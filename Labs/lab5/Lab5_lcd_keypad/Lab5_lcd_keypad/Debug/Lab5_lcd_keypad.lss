
Lab5_lcd_keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000144c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000dc  00802000  0000144c  000014e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008020dc  008020dc  000015bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000015bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  0000162c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000122f  00000000  00000000  000016fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000266  00000000  00000000  0000292b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000afb  00000000  00000000  00002b91  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000300  00000000  00000000  0000368c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d28  00000000  00000000  0000398c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000063b  00000000  00000000  000046b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00004cef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
       4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
       8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
       c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      10:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      14:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      18:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      1c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      20:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      24:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      28:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      2c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      30:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      34:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      38:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      3c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      40:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      44:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      48:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      4c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      50:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      54:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      58:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      5c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      60:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      64:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      68:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      6c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      70:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      74:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      78:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      7c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      80:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      84:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      88:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      8c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      90:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      94:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      98:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      9c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      fc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     100:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     104:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     108:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     10c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     110:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     114:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     118:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     11c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     120:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     124:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     128:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     12c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     130:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     134:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     138:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     13c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     140:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     144:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     148:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     14c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     150:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     154:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     158:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     15c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     160:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     164:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     168:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     16c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     170:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     174:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     178:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     17c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     180:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     184:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     188:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     18c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     190:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     194:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     198:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     19c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e3       	ldi	r29, 0x3F	; 63
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60
     20c:	18 be       	out	0x38, r1	; 56
     20e:	19 be       	out	0x39, r1	; 57
     210:	1a be       	out	0x3a, r1	; 58
     212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
     214:	10 e2       	ldi	r17, 0x20	; 32
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	ec e4       	ldi	r30, 0x4C	; 76
     21c:	f4 e1       	ldi	r31, 0x14	; 20
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	ac 3d       	cpi	r26, 0xDC	; 220
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
     22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
     230:	20 e2       	ldi	r18, 0x20	; 32
     232:	ac ed       	ldi	r26, 0xDC	; 220
     234:	b0 e2       	ldi	r27, 0x20	; 32
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	a0 3e       	cpi	r26, 0xE0	; 224
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	0e 94 9c 04 	call	0x938	; 0x938 <main>
     244:	0c 94 24 0a 	jmp	0x1448	; 0x1448 <_exit>

00000248 <__bad_interrupt>:
     248:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024c <time>:
     24c:	fc 01       	movw	r30, r24
     24e:	0f b6       	in	r0, 0x3f	; 63
     250:	f8 94       	cli
     252:	60 91 dc 20 	lds	r22, 0x20DC	; 0x8020dc <__data_end>
     256:	70 91 dd 20 	lds	r23, 0x20DD	; 0x8020dd <__data_end+0x1>
     25a:	80 91 de 20 	lds	r24, 0x20DE	; 0x8020de <__data_end+0x2>
     25e:	90 91 df 20 	lds	r25, 0x20DF	; 0x8020df <__data_end+0x3>
     262:	0f be       	out	0x3f, r0	; 63
     264:	30 97       	sbiw	r30, 0x00	; 0
     266:	21 f0       	breq	.+8      	; 0x270 <time+0x24>
     268:	60 83       	st	Z, r22
     26a:	71 83       	std	Z+1, r23	; 0x01
     26c:	82 83       	std	Z+2, r24	; 0x02
     26e:	93 83       	std	Z+3, r25	; 0x03
     270:	08 95       	ret

00000272 <ebi_init>:
/////////////////////////////////////PROTOTYPES//////////////////////////////////////
void ebi_init();

/////////////////////////////////////FUNCTIONS///////////////////////////////////////
void ebi_init()
{
     272:	cf 93       	push	r28
     274:	df 93       	push	r29
     276:	cd b7       	in	r28, 0x3d	; 61
     278:	de b7       	in	r29, 0x3e	; 62
	PORTH.DIR = 0x37;
     27a:	80 ee       	ldi	r24, 0xE0	; 224
     27c:	96 e0       	ldi	r25, 0x06	; 6
     27e:	27 e3       	ldi	r18, 0x37	; 55
     280:	fc 01       	movw	r30, r24
     282:	20 83       	st	Z, r18
	PORTH.OUT = 0x33;
     284:	80 ee       	ldi	r24, 0xE0	; 224
     286:	96 e0       	ldi	r25, 0x06	; 6
     288:	23 e3       	ldi	r18, 0x33	; 51
     28a:	fc 01       	movw	r30, r24
     28c:	24 83       	std	Z+4, r18	; 0x04
	PORTK.DIR = 0xFF;
     28e:	80 e2       	ldi	r24, 0x20	; 32
     290:	97 e0       	ldi	r25, 0x07	; 7
     292:	2f ef       	ldi	r18, 0xFF	; 255
     294:	fc 01       	movw	r30, r24
     296:	20 83       	st	Z, r18
	
	EBI.CTRL = EBI_SRMODE_ALE1_gc | EBI_IFMODE_3PORT_gc;
     298:	80 e4       	ldi	r24, 0x40	; 64
     29a:	94 e0       	ldi	r25, 0x04	; 4
     29c:	21 e0       	ldi	r18, 0x01	; 1
     29e:	fc 01       	movw	r30, r24
     2a0:	20 83       	st	Z, r18
	
	EBI.CS0.BASEADDRH = (uint8_t) (CS0_Start>>16) & 0xFF;
     2a2:	80 e4       	ldi	r24, 0x40	; 64
     2a4:	94 e0       	ldi	r25, 0x04	; 4
     2a6:	28 e2       	ldi	r18, 0x28	; 40
     2a8:	fc 01       	movw	r30, r24
     2aa:	23 8b       	std	Z+19, r18	; 0x13
	EBI.CS0.BASEADDRL = (uint8_t) (CS0_Start>>8) & 0xFF;
     2ac:	80 e4       	ldi	r24, 0x40	; 64
     2ae:	94 e0       	ldi	r25, 0x04	; 4
     2b0:	20 e8       	ldi	r18, 0x80	; 128
     2b2:	fc 01       	movw	r30, r24
     2b4:	22 8b       	std	Z+18, r18	; 0x12
	EBI.CS0.CTRLA = EBI_CS_MODE_SRAM_gc | EBI_CS_ASPACE_8KB_gc;
     2b6:	80 e4       	ldi	r24, 0x40	; 64
     2b8:	94 e0       	ldi	r25, 0x04	; 4
     2ba:	25 e1       	ldi	r18, 0x15	; 21
     2bc:	fc 01       	movw	r30, r24
     2be:	20 8b       	std	Z+16, r18	; 0x10
	
	EBI.CS1.BASEADDR = (uint16_t) (CS1_Start>>8) & 0xFFFF;
     2c0:	80 e4       	ldi	r24, 0x40	; 64
     2c2:	94 e0       	ldi	r25, 0x04	; 4
     2c4:	20 e4       	ldi	r18, 0x40	; 64
     2c6:	39 e3       	ldi	r19, 0x39	; 57
     2c8:	fc 01       	movw	r30, r24
     2ca:	26 8b       	std	Z+22, r18	; 0x16
     2cc:	37 8b       	std	Z+23, r19	; 0x17
	EBI.CS1.CTRLA = EBI_CS_MODE_SRAM_gc | EBI_CS_ASPACE_16KB_gc;
     2ce:	80 e4       	ldi	r24, 0x40	; 64
     2d0:	94 e0       	ldi	r25, 0x04	; 4
     2d2:	29 e1       	ldi	r18, 0x19	; 25
     2d4:	fc 01       	movw	r30, r24
     2d6:	24 8b       	std	Z+20, r18	; 0x14
     2d8:	df 91       	pop	r29
     2da:	cf 91       	pop	r28
     2dc:	08 95       	ret

000002de <lcd_init>:

uint8_t lcd_disp = 0x07;

/////////////////////////////////////FUNCTIONS///////////////////////////////////////
void lcd_init()
{
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	cd b7       	in	r28, 0x3d	; 61
     2e4:	de b7       	in	r29, 0x3e	; 62
     2e6:	2c 97       	sbiw	r28, 0x0c	; 12
     2e8:	cd bf       	out	0x3d, r28	; 61
     2ea:	de bf       	out	0x3e, r29	; 62
	wait_busy();
     2ec:	0e 94 c0 01 	call	0x380	; 0x380 <wait_busy>
	__far_mem_write(LCD_BASEADDR, 0x38);	// Two lines
     2f0:	80 e0       	ldi	r24, 0x00	; 0
     2f2:	90 e5       	ldi	r25, 0x50	; 80
     2f4:	a9 e3       	ldi	r26, 0x39	; 57
     2f6:	b0 e0       	ldi	r27, 0x00	; 0
     2f8:	89 83       	std	Y+1, r24	; 0x01
     2fa:	9a 83       	std	Y+2, r25	; 0x02
     2fc:	ab 83       	std	Y+3, r26	; 0x03
     2fe:	bc 83       	std	Y+4, r27	; 0x04
     300:	89 81       	ldd	r24, Y+1	; 0x01
     302:	9a 81       	ldd	r25, Y+2	; 0x02
     304:	ab 81       	ldd	r26, Y+3	; 0x03
     306:	bc 81       	ldd	r27, Y+4	; 0x04
     308:	28 e3       	ldi	r18, 0x38	; 56
     30a:	0b b6       	in	r0, 0x3b	; 59
     30c:	ab bf       	out	0x3b, r26	; 59
     30e:	fc 01       	movw	r30, r24
     310:	20 83       	st	Z, r18
     312:	0b be       	out	0x3b, r0	; 59
	asm volatile ("nop");
     314:	00 00       	nop
	asm volatile ("nop");
     316:	00 00       	nop
	wait_busy();
     318:	0e 94 c0 01 	call	0x380	; 0x380 <wait_busy>
	
	__far_mem_write(LCD_BASEADDR, 0x0F);	// Display on; Cursor on; Blink on
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	90 e5       	ldi	r25, 0x50	; 80
     320:	a9 e3       	ldi	r26, 0x39	; 57
     322:	b0 e0       	ldi	r27, 0x00	; 0
     324:	8d 83       	std	Y+5, r24	; 0x05
     326:	9e 83       	std	Y+6, r25	; 0x06
     328:	af 83       	std	Y+7, r26	; 0x07
     32a:	b8 87       	std	Y+8, r27	; 0x08
     32c:	8d 81       	ldd	r24, Y+5	; 0x05
     32e:	9e 81       	ldd	r25, Y+6	; 0x06
     330:	af 81       	ldd	r26, Y+7	; 0x07
     332:	b8 85       	ldd	r27, Y+8	; 0x08
     334:	2f e0       	ldi	r18, 0x0F	; 15
     336:	0b b6       	in	r0, 0x3b	; 59
     338:	ab bf       	out	0x3b, r26	; 59
     33a:	fc 01       	movw	r30, r24
     33c:	20 83       	st	Z, r18
     33e:	0b be       	out	0x3b, r0	; 59
	asm volatile ("nop");
     340:	00 00       	nop
	asm volatile ("nop");
     342:	00 00       	nop
	wait_busy();
     344:	0e 94 c0 01 	call	0x380	; 0x380 <wait_busy>
	
	__far_mem_write(LCD_BASEADDR, 0x01);	// Clear screen; Cursor home
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	90 e5       	ldi	r25, 0x50	; 80
     34c:	a9 e3       	ldi	r26, 0x39	; 57
     34e:	b0 e0       	ldi	r27, 0x00	; 0
     350:	89 87       	std	Y+9, r24	; 0x09
     352:	9a 87       	std	Y+10, r25	; 0x0a
     354:	ab 87       	std	Y+11, r26	; 0x0b
     356:	bc 87       	std	Y+12, r27	; 0x0c
     358:	89 85       	ldd	r24, Y+9	; 0x09
     35a:	9a 85       	ldd	r25, Y+10	; 0x0a
     35c:	ab 85       	ldd	r26, Y+11	; 0x0b
     35e:	bc 85       	ldd	r27, Y+12	; 0x0c
     360:	21 e0       	ldi	r18, 0x01	; 1
     362:	0b b6       	in	r0, 0x3b	; 59
     364:	ab bf       	out	0x3b, r26	; 59
     366:	fc 01       	movw	r30, r24
     368:	20 83       	st	Z, r18
     36a:	0b be       	out	0x3b, r0	; 59
	asm volatile ("nop");
     36c:	00 00       	nop
	asm volatile ("nop");
     36e:	00 00       	nop
	wait_busy();
     370:	0e 94 c0 01 	call	0x380	; 0x380 <wait_busy>
}
     374:	2c 96       	adiw	r28, 0x0c	; 12
     376:	cd bf       	out	0x3d, r28	; 61
     378:	de bf       	out	0x3e, r29	; 62
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	08 95       	ret

00000380 <wait_busy>:

void wait_busy()
{
     380:	cf 93       	push	r28
     382:	df 93       	push	r29
     384:	00 d0       	rcall	.+0      	; 0x386 <wait_busy+0x6>
     386:	00 d0       	rcall	.+0      	; 0x388 <wait_busy+0x8>
     388:	cd b7       	in	r28, 0x3d	; 61
     38a:	de b7       	in	r29, 0x3e	; 62
	uint8_t result = 0;
     38c:	19 82       	std	Y+1, r1	; 0x01
	do 
	{
		result = __far_mem_read(LCD_BASEADDR);
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	90 e5       	ldi	r25, 0x50	; 80
     392:	a9 e3       	ldi	r26, 0x39	; 57
     394:	b0 e0       	ldi	r27, 0x00	; 0
     396:	8a 83       	std	Y+2, r24	; 0x02
     398:	9b 83       	std	Y+3, r25	; 0x03
     39a:	ac 83       	std	Y+4, r26	; 0x04
     39c:	bd 83       	std	Y+5, r27	; 0x05
     39e:	8a 81       	ldd	r24, Y+2	; 0x02
     3a0:	9b 81       	ldd	r25, Y+3	; 0x03
     3a2:	ac 81       	ldd	r26, Y+4	; 0x04
     3a4:	bd 81       	ldd	r27, Y+5	; 0x05
     3a6:	0b b6       	in	r0, 0x3b	; 59
     3a8:	ab bf       	out	0x3b, r26	; 59
     3aa:	fc 01       	movw	r30, r24
     3ac:	80 81       	ld	r24, Z
     3ae:	0b be       	out	0x3b, r0	; 59
     3b0:	8e 83       	std	Y+6, r24	; 0x06
     3b2:	8e 81       	ldd	r24, Y+6	; 0x06
     3b4:	89 83       	std	Y+1, r24	; 0x01
	} while (result & 0x80);				// Poll the BF of the LCD
     3b6:	89 81       	ldd	r24, Y+1	; 0x01
     3b8:	88 23       	and	r24, r24
     3ba:	4c f3       	brlt	.-46     	; 0x38e <wait_busy+0xe>
}
     3bc:	26 96       	adiw	r28, 0x06	; 6
     3be:	cd bf       	out	0x3d, r28	; 61
     3c0:	de bf       	out	0x3e, r29	; 62
     3c2:	df 91       	pop	r29
     3c4:	cf 91       	pop	r28
     3c6:	08 95       	ret

000003c8 <OUT_CHAR>:

void OUT_CHAR(char character)
{
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	cd b7       	in	r28, 0x3d	; 61
     3ce:	de b7       	in	r29, 0x3e	; 62
     3d0:	25 97       	sbiw	r28, 0x05	; 5
     3d2:	cd bf       	out	0x3d, r28	; 61
     3d4:	de bf       	out	0x3e, r29	; 62
     3d6:	8d 83       	std	Y+5, r24	; 0x05
	wait_busy();
     3d8:	0e 94 c0 01 	call	0x380	; 0x380 <wait_busy>
	__far_mem_write(LCD_BASEADDR+1, character);
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	90 e5       	ldi	r25, 0x50	; 80
     3e0:	a9 e3       	ldi	r26, 0x39	; 57
     3e2:	b0 e0       	ldi	r27, 0x00	; 0
     3e4:	89 83       	std	Y+1, r24	; 0x01
     3e6:	9a 83       	std	Y+2, r25	; 0x02
     3e8:	ab 83       	std	Y+3, r26	; 0x03
     3ea:	bc 83       	std	Y+4, r27	; 0x04
     3ec:	89 81       	ldd	r24, Y+1	; 0x01
     3ee:	9a 81       	ldd	r25, Y+2	; 0x02
     3f0:	ab 81       	ldd	r26, Y+3	; 0x03
     3f2:	bc 81       	ldd	r27, Y+4	; 0x04
     3f4:	2d 81       	ldd	r18, Y+5	; 0x05
     3f6:	0b b6       	in	r0, 0x3b	; 59
     3f8:	ab bf       	out	0x3b, r26	; 59
     3fa:	fc 01       	movw	r30, r24
     3fc:	20 83       	st	Z, r18
     3fe:	0b be       	out	0x3b, r0	; 59
	asm volatile ("nop");
     400:	00 00       	nop
	asm volatile ("nop");
     402:	00 00       	nop
	wait_busy();
     404:	0e 94 c0 01 	call	0x380	; 0x380 <wait_busy>
}
     408:	25 96       	adiw	r28, 0x05	; 5
     40a:	cd bf       	out	0x3d, r28	; 61
     40c:	de bf       	out	0x3e, r29	; 62
     40e:	df 91       	pop	r29
     410:	cf 91       	pop	r28
     412:	08 95       	ret

00000414 <OUT_STRING>:

void OUT_STRING(char *string)
{
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
     418:	1f 92       	push	r1
     41a:	1f 92       	push	r1
     41c:	cd b7       	in	r28, 0x3d	; 61
     41e:	de b7       	in	r29, 0x3e	; 62
     420:	89 83       	std	Y+1, r24	; 0x01
     422:	9a 83       	std	Y+2, r25	; 0x02
	while (*string != '\0')					// Loop until null character is encountered
     424:	0b c0       	rjmp	.+22     	; 0x43c <OUT_STRING+0x28>
	{
		OUT_CHAR(*string);
     426:	89 81       	ldd	r24, Y+1	; 0x01
     428:	9a 81       	ldd	r25, Y+2	; 0x02
     42a:	fc 01       	movw	r30, r24
     42c:	80 81       	ld	r24, Z
     42e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <OUT_CHAR>
		string++;
     432:	89 81       	ldd	r24, Y+1	; 0x01
     434:	9a 81       	ldd	r25, Y+2	; 0x02
     436:	01 96       	adiw	r24, 0x01	; 1
     438:	89 83       	std	Y+1, r24	; 0x01
     43a:	9a 83       	std	Y+2, r25	; 0x02
	wait_busy();
}

void OUT_STRING(char *string)
{
	while (*string != '\0')					// Loop until null character is encountered
     43c:	89 81       	ldd	r24, Y+1	; 0x01
     43e:	9a 81       	ldd	r25, Y+2	; 0x02
     440:	fc 01       	movw	r30, r24
     442:	80 81       	ld	r24, Z
     444:	88 23       	and	r24, r24
     446:	79 f7       	brne	.-34     	; 0x426 <OUT_STRING+0x12>
	{
		OUT_CHAR(*string);
		string++;
	}
}
     448:	0f 90       	pop	r0
     44a:	0f 90       	pop	r0
     44c:	df 91       	pop	r29
     44e:	cf 91       	pop	r28
     450:	08 95       	ret

00000452 <OUT_COMMAND>:

void OUT_COMMAND(char command)
{
     452:	cf 93       	push	r28
     454:	df 93       	push	r29
     456:	cd b7       	in	r28, 0x3d	; 61
     458:	de b7       	in	r29, 0x3e	; 62
     45a:	25 97       	sbiw	r28, 0x05	; 5
     45c:	cd bf       	out	0x3d, r28	; 61
     45e:	de bf       	out	0x3e, r29	; 62
     460:	8d 83       	std	Y+5, r24	; 0x05
	wait_busy();
     462:	0e 94 c0 01 	call	0x380	; 0x380 <wait_busy>
	__far_mem_write(LCD_BASEADDR, command);
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	90 e5       	ldi	r25, 0x50	; 80
     46a:	a9 e3       	ldi	r26, 0x39	; 57
     46c:	b0 e0       	ldi	r27, 0x00	; 0
     46e:	89 83       	std	Y+1, r24	; 0x01
     470:	9a 83       	std	Y+2, r25	; 0x02
     472:	ab 83       	std	Y+3, r26	; 0x03
     474:	bc 83       	std	Y+4, r27	; 0x04
     476:	89 81       	ldd	r24, Y+1	; 0x01
     478:	9a 81       	ldd	r25, Y+2	; 0x02
     47a:	ab 81       	ldd	r26, Y+3	; 0x03
     47c:	bc 81       	ldd	r27, Y+4	; 0x04
     47e:	2d 81       	ldd	r18, Y+5	; 0x05
     480:	0b b6       	in	r0, 0x3b	; 59
     482:	ab bf       	out	0x3b, r26	; 59
     484:	fc 01       	movw	r30, r24
     486:	20 83       	st	Z, r18
     488:	0b be       	out	0x3b, r0	; 59
	asm volatile ("nop");
     48a:	00 00       	nop
	asm volatile ("nop");
     48c:	00 00       	nop
	wait_busy();
     48e:	0e 94 c0 01 	call	0x380	; 0x380 <wait_busy>
}
     492:	25 96       	adiw	r28, 0x05	; 5
     494:	cd bf       	out	0x3d, r28	; 61
     496:	de bf       	out	0x3e, r29	; 62
     498:	df 91       	pop	r29
     49a:	cf 91       	pop	r28
     49c:	08 95       	ret

0000049e <CLEAR_SCREEN>:

void CLEAR_SCREEN(void)
{
     49e:	cf 93       	push	r28
     4a0:	df 93       	push	r29
     4a2:	00 d0       	rcall	.+0      	; 0x4a4 <CLEAR_SCREEN+0x6>
     4a4:	1f 92       	push	r1
     4a6:	cd b7       	in	r28, 0x3d	; 61
     4a8:	de b7       	in	r29, 0x3e	; 62
	wait_busy();
     4aa:	0e 94 c0 01 	call	0x380	; 0x380 <wait_busy>
	__far_mem_write(LCD_BASEADDR, 0x01);
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	90 e5       	ldi	r25, 0x50	; 80
     4b2:	a9 e3       	ldi	r26, 0x39	; 57
     4b4:	b0 e0       	ldi	r27, 0x00	; 0
     4b6:	89 83       	std	Y+1, r24	; 0x01
     4b8:	9a 83       	std	Y+2, r25	; 0x02
     4ba:	ab 83       	std	Y+3, r26	; 0x03
     4bc:	bc 83       	std	Y+4, r27	; 0x04
     4be:	89 81       	ldd	r24, Y+1	; 0x01
     4c0:	9a 81       	ldd	r25, Y+2	; 0x02
     4c2:	ab 81       	ldd	r26, Y+3	; 0x03
     4c4:	bc 81       	ldd	r27, Y+4	; 0x04
     4c6:	21 e0       	ldi	r18, 0x01	; 1
     4c8:	0b b6       	in	r0, 0x3b	; 59
     4ca:	ab bf       	out	0x3b, r26	; 59
     4cc:	fc 01       	movw	r30, r24
     4ce:	20 83       	st	Z, r18
     4d0:	0b be       	out	0x3b, r0	; 59
	asm volatile ("nop");
     4d2:	00 00       	nop
	asm volatile ("nop");
     4d4:	00 00       	nop
	wait_busy();
     4d6:	0e 94 c0 01 	call	0x380	; 0x380 <wait_busy>
}
     4da:	24 96       	adiw	r28, 0x04	; 4
     4dc:	cd bf       	out	0x3d, r28	; 61
     4de:	de bf       	out	0x3e, r29	; 62
     4e0:	df 91       	pop	r29
     4e2:	cf 91       	pop	r28
     4e4:	08 95       	ret

000004e6 <lcd_toggle>:

void lcd_toggle(void)
{
     4e6:	cf 93       	push	r28
     4e8:	df 93       	push	r29
     4ea:	1f 92       	push	r1
     4ec:	cd b7       	in	r28, 0x3d	; 61
     4ee:	de b7       	in	r29, 0x3e	; 62
	lcd_disp = lcd_disp ^ 0x07;
     4f0:	90 91 04 20 	lds	r25, 0x2004	; 0x802004 <lcd_disp>
     4f4:	87 e0       	ldi	r24, 0x07	; 7
     4f6:	89 27       	eor	r24, r25
     4f8:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <lcd_disp>
	uint8_t disp_comm = 0x08 | lcd_disp;
     4fc:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <lcd_disp>
     500:	88 60       	ori	r24, 0x08	; 8
     502:	89 83       	std	Y+1, r24	; 0x01
	
	wait_busy();
     504:	0e 94 c0 01 	call	0x380	; 0x380 <wait_busy>
	OUT_COMMAND(disp_comm);
     508:	89 81       	ldd	r24, Y+1	; 0x01
     50a:	0e 94 29 02 	call	0x452	; 0x452 <OUT_COMMAND>
     50e:	0f 90       	pop	r0
     510:	df 91       	pop	r29
     512:	cf 91       	pop	r28
     514:	08 95       	ret

00000516 <adc_init>:
/////////////////////////////////////PROTOTYPES//////////////////////////////////////
void adc_init();

/////////////////////////////////////FUNCTIONS///////////////////////////////////////
void adc_init()
{
     516:	cf 93       	push	r28
     518:	df 93       	push	r29
     51a:	cd b7       	in	r28, 0x3d	; 61
     51c:	de b7       	in	r29, 0x3e	; 62
	// General ADC Configuration
	ADCB.CTRLB = ADC_CONMODE_bm | ADC_FREERUN_bm;		// High Z, No Limit, Signed, Free Run, 12 Bit
     51e:	80 e4       	ldi	r24, 0x40	; 64
     520:	92 e0       	ldi	r25, 0x02	; 2
     522:	28 e1       	ldi	r18, 0x18	; 24
     524:	fc 01       	movw	r30, r24
     526:	21 83       	std	Z+1, r18	; 0x01
	ADCB.REFCTRL = ADC_REFSEL_AREFB_gc;					// Ext. Ref. from AREFB
     528:	80 e4       	ldi	r24, 0x40	; 64
     52a:	92 e0       	ldi	r25, 0x02	; 2
     52c:	20 e3       	ldi	r18, 0x30	; 48
     52e:	fc 01       	movw	r30, r24
     530:	22 83       	std	Z+2, r18	; 0x02
	ADCB.PRESCALER = ADC_PRESCALER_DIV4_gc;
     532:	80 e4       	ldi	r24, 0x40	; 64
     534:	92 e0       	ldi	r25, 0x02	; 2
     536:	fc 01       	movw	r30, r24
     538:	14 82       	std	Z+4, r1	; 0x04
	ADCB.EVCTRL = ADC_SWEEP0_bm | ADC_EVACT1_bm;
     53a:	80 e4       	ldi	r24, 0x40	; 64
     53c:	92 e0       	ldi	r25, 0x02	; 2
     53e:	22 e4       	ldi	r18, 0x42	; 66
     540:	fc 01       	movw	r30, r24
     542:	23 83       	std	Z+3, r18	; 0x03
	
	// ADC Channel Configuration
	ADCB.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN4_gc;			// Pin 4
     544:	80 e4       	ldi	r24, 0x40	; 64
     546:	92 e0       	ldi	r25, 0x02	; 2
     548:	20 e2       	ldi	r18, 0x20	; 32
     54a:	fc 01       	movw	r30, r24
     54c:	21 a3       	std	Z+33, r18	; 0x21
	ADCB.CH0.INTCTRL = ADC_CH_INTLVL_LO_gc;				// Enable low-level interrupts
     54e:	80 e4       	ldi	r24, 0x40	; 64
     550:	92 e0       	ldi	r25, 0x02	; 2
     552:	21 e0       	ldi	r18, 0x01	; 1
     554:	fc 01       	movw	r30, r24
     556:	22 a3       	std	Z+34, r18	; 0x22
	ADCB.CH0.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;	// Single-ended
     558:	80 e4       	ldi	r24, 0x40	; 64
     55a:	92 e0       	ldi	r25, 0x02	; 2
     55c:	21 e0       	ldi	r18, 0x01	; 1
     55e:	fc 01       	movw	r30, r24
     560:	20 a3       	std	Z+32, r18	; 0x20
	
	ADCB.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc;			// Pin 5
     562:	80 e4       	ldi	r24, 0x40	; 64
     564:	92 e0       	ldi	r25, 0x02	; 2
     566:	28 e2       	ldi	r18, 0x28	; 40
     568:	fc 01       	movw	r30, r24
     56a:	21 a7       	std	Z+41, r18	; 0x29
	ADCB.CH1.INTCTRL = ADC_CH_INTLVL_LO_gc;				// Enable low-level interrupts
     56c:	80 e4       	ldi	r24, 0x40	; 64
     56e:	92 e0       	ldi	r25, 0x02	; 2
     570:	21 e0       	ldi	r18, 0x01	; 1
     572:	fc 01       	movw	r30, r24
     574:	22 a7       	std	Z+42, r18	; 0x2a
	ADCB.CH1.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;	// Single-ended
     576:	80 e4       	ldi	r24, 0x40	; 64
     578:	92 e0       	ldi	r25, 0x02	; 2
     57a:	21 e0       	ldi	r18, 0x01	; 1
     57c:	fc 01       	movw	r30, r24
     57e:	20 a7       	std	Z+40, r18	; 0x28
	
	// Begin Conversions
	ADCB.CTRLA = ADC_CH0START_bm | ADC_CH1START_bm | ADC_ENABLE_bm;		// Start Conversion on channel 0 and 1, Enable ADC
     580:	80 e4       	ldi	r24, 0x40	; 64
     582:	92 e0       	ldi	r25, 0x02	; 2
     584:	2d e0       	ldi	r18, 0x0D	; 13
     586:	fc 01       	movw	r30, r24
     588:	20 83       	st	Z, r18
	
	PORTB.DIRCLR = 0x33;
     58a:	80 e2       	ldi	r24, 0x20	; 32
     58c:	96 e0       	ldi	r25, 0x06	; 6
     58e:	23 e3       	ldi	r18, 0x33	; 51
     590:	fc 01       	movw	r30, r24
     592:	22 83       	std	Z+2, r18	; 0x02
     594:	df 91       	pop	r29
     596:	cf 91       	pop	r28
     598:	08 95       	ret

0000059a <adc_pot>:
void lcd_voltage(uint16_t volt);
uint8_t conv_nibble(uint8_t nib);

/////////////////////////////////////FUNCTIONS///////////////////////////////////////
uint16_t adc_pot(void) 
{
     59a:	cf 93       	push	r28
     59c:	df 93       	push	r29
     59e:	cd b7       	in	r28, 0x3d	; 61
     5a0:	de b7       	in	r29, 0x3e	; 62
	while (!ADCB.CH0.INTFLAGS);
     5a2:	00 00       	nop
     5a4:	80 e4       	ldi	r24, 0x40	; 64
     5a6:	92 e0       	ldi	r25, 0x02	; 2
     5a8:	fc 01       	movw	r30, r24
     5aa:	83 a1       	ldd	r24, Z+35	; 0x23
     5ac:	88 23       	and	r24, r24
     5ae:	d1 f3       	breq	.-12     	; 0x5a4 <adc_pot+0xa>
	ADCB.CH0.INTFLAGS = 0x01;
     5b0:	80 e4       	ldi	r24, 0x40	; 64
     5b2:	92 e0       	ldi	r25, 0x02	; 2
     5b4:	21 e0       	ldi	r18, 0x01	; 1
     5b6:	fc 01       	movw	r30, r24
     5b8:	23 a3       	std	Z+35, r18	; 0x23
	return ADCB.CH0.RES;
     5ba:	80 e4       	ldi	r24, 0x40	; 64
     5bc:	92 e0       	ldi	r25, 0x02	; 2
     5be:	fc 01       	movw	r30, r24
     5c0:	84 a1       	ldd	r24, Z+36	; 0x24
     5c2:	95 a1       	ldd	r25, Z+37	; 0x25
}
     5c4:	df 91       	pop	r29
     5c6:	cf 91       	pop	r28
     5c8:	08 95       	ret

000005ca <lcd_voltage>:

void lcd_voltage(uint16_t volt)
{
     5ca:	cf 93       	push	r28
     5cc:	df 93       	push	r29
     5ce:	cd b7       	in	r28, 0x3d	; 61
     5d0:	de b7       	in	r29, 0x3e	; 62
     5d2:	a6 97       	sbiw	r28, 0x26	; 38
     5d4:	cd bf       	out	0x3d, r28	; 61
     5d6:	de bf       	out	0x3e, r29	; 62
     5d8:	8d a3       	std	Y+37, r24	; 0x25
     5da:	9e a3       	std	Y+38, r25	; 0x26
	CLEAR_SCREEN();
     5dc:	0e 94 4f 02 	call	0x49e	; 0x49e <CLEAR_SCREEN>
	
	// Convert ADC value to Decimal Voltage
	volt = volt & 0x07FF;					// We can assume positive, so ignore sign bit.
     5e0:	8d a1       	ldd	r24, Y+37	; 0x25
     5e2:	9e a1       	ldd	r25, Y+38	; 0x26
     5e4:	97 70       	andi	r25, 0x07	; 7
     5e6:	8d a3       	std	Y+37, r24	; 0x25
     5e8:	9e a3       	std	Y+38, r25	; 0x26
	volt *= 2;								// Multiply by 2 to account for ADC /2
     5ea:	8d a1       	ldd	r24, Y+37	; 0x25
     5ec:	9e a1       	ldd	r25, Y+38	; 0x26
     5ee:	88 0f       	add	r24, r24
     5f0:	99 1f       	adc	r25, r25
     5f2:	8d a3       	std	Y+37, r24	; 0x25
     5f4:	9e a3       	std	Y+38, r25	; 0x26
	float dec_volt = ADC_RATIO*volt;		// Apply formula. 
     5f6:	8d a1       	ldd	r24, Y+37	; 0x25
     5f8:	9e a1       	ldd	r25, Y+38	; 0x26
     5fa:	cc 01       	movw	r24, r24
     5fc:	a0 e0       	ldi	r26, 0x00	; 0
     5fe:	b0 e0       	ldi	r27, 0x00	; 0
     600:	bc 01       	movw	r22, r24
     602:	cd 01       	movw	r24, r26
     604:	0e 94 44 08 	call	0x1088	; 0x1088 <__floatunsisf>
     608:	dc 01       	movw	r26, r24
     60a:	cb 01       	movw	r24, r22
     60c:	26 ef       	ldi	r18, 0xF6	; 246
     60e:	39 e0       	ldi	r19, 0x09	; 9
     610:	40 ea       	ldi	r20, 0xA0	; 160
     612:	5a e3       	ldi	r21, 0x3A	; 58
     614:	bc 01       	movw	r22, r24
     616:	cd 01       	movw	r24, r26
     618:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <__mulsf3>
     61c:	dc 01       	movw	r26, r24
     61e:	cb 01       	movw	r24, r22
     620:	89 83       	std	Y+1, r24	; 0x01
     622:	9a 83       	std	Y+2, r25	; 0x02
     624:	ab 83       	std	Y+3, r26	; 0x03
     626:	bc 83       	std	Y+4, r27	; 0x04
	
	uint8_t int1, int2, int3, h1, h2, h3;
	char d1, d2, d3;
	float volt2, volt3;
	
	int1 = (uint8_t) dec_volt;				// Determine Decimal representation
     628:	69 81       	ldd	r22, Y+1	; 0x01
     62a:	7a 81       	ldd	r23, Y+2	; 0x02
     62c:	8b 81       	ldd	r24, Y+3	; 0x03
     62e:	9c 81       	ldd	r25, Y+4	; 0x04
     630:	0e 94 15 08 	call	0x102a	; 0x102a <__fixunssfsi>
     634:	dc 01       	movw	r26, r24
     636:	cb 01       	movw	r24, r22
     638:	8d 83       	std	Y+5, r24	; 0x05
	d1 = (char) (int1 + '0');
     63a:	8d 81       	ldd	r24, Y+5	; 0x05
     63c:	80 5d       	subi	r24, 0xD0	; 208
     63e:	8e 83       	std	Y+6, r24	; 0x06
	volt2 = 10*(dec_volt - int1);
     640:	8d 81       	ldd	r24, Y+5	; 0x05
     642:	88 2f       	mov	r24, r24
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	09 2e       	mov	r0, r25
     648:	00 0c       	add	r0, r0
     64a:	aa 0b       	sbc	r26, r26
     64c:	bb 0b       	sbc	r27, r27
     64e:	bc 01       	movw	r22, r24
     650:	cd 01       	movw	r24, r26
     652:	0e 94 46 08 	call	0x108c	; 0x108c <__floatsisf>
     656:	dc 01       	movw	r26, r24
     658:	cb 01       	movw	r24, r22
     65a:	9c 01       	movw	r18, r24
     65c:	ad 01       	movw	r20, r26
     65e:	69 81       	ldd	r22, Y+1	; 0x01
     660:	7a 81       	ldd	r23, Y+2	; 0x02
     662:	8b 81       	ldd	r24, Y+3	; 0x03
     664:	9c 81       	ldd	r25, Y+4	; 0x04
     666:	0e 94 a8 07 	call	0xf50	; 0xf50 <__subsf3>
     66a:	dc 01       	movw	r26, r24
     66c:	cb 01       	movw	r24, r22
     66e:	20 e0       	ldi	r18, 0x00	; 0
     670:	30 e0       	ldi	r19, 0x00	; 0
     672:	40 e2       	ldi	r20, 0x20	; 32
     674:	51 e4       	ldi	r21, 0x41	; 65
     676:	bc 01       	movw	r22, r24
     678:	cd 01       	movw	r24, r26
     67a:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <__mulsf3>
     67e:	dc 01       	movw	r26, r24
     680:	cb 01       	movw	r24, r22
     682:	8f 83       	std	Y+7, r24	; 0x07
     684:	98 87       	std	Y+8, r25	; 0x08
     686:	a9 87       	std	Y+9, r26	; 0x09
     688:	ba 87       	std	Y+10, r27	; 0x0a
	int2 = (uint8_t) volt2;
     68a:	6f 81       	ldd	r22, Y+7	; 0x07
     68c:	78 85       	ldd	r23, Y+8	; 0x08
     68e:	89 85       	ldd	r24, Y+9	; 0x09
     690:	9a 85       	ldd	r25, Y+10	; 0x0a
     692:	0e 94 15 08 	call	0x102a	; 0x102a <__fixunssfsi>
     696:	dc 01       	movw	r26, r24
     698:	cb 01       	movw	r24, r22
     69a:	8b 87       	std	Y+11, r24	; 0x0b
	d2 = (char) (int2 + '0');
     69c:	8b 85       	ldd	r24, Y+11	; 0x0b
     69e:	80 5d       	subi	r24, 0xD0	; 208
     6a0:	8c 87       	std	Y+12, r24	; 0x0c
	volt3 = 10*(volt2 - int2);
     6a2:	8b 85       	ldd	r24, Y+11	; 0x0b
     6a4:	88 2f       	mov	r24, r24
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	09 2e       	mov	r0, r25
     6aa:	00 0c       	add	r0, r0
     6ac:	aa 0b       	sbc	r26, r26
     6ae:	bb 0b       	sbc	r27, r27
     6b0:	bc 01       	movw	r22, r24
     6b2:	cd 01       	movw	r24, r26
     6b4:	0e 94 46 08 	call	0x108c	; 0x108c <__floatsisf>
     6b8:	dc 01       	movw	r26, r24
     6ba:	cb 01       	movw	r24, r22
     6bc:	9c 01       	movw	r18, r24
     6be:	ad 01       	movw	r20, r26
     6c0:	6f 81       	ldd	r22, Y+7	; 0x07
     6c2:	78 85       	ldd	r23, Y+8	; 0x08
     6c4:	89 85       	ldd	r24, Y+9	; 0x09
     6c6:	9a 85       	ldd	r25, Y+10	; 0x0a
     6c8:	0e 94 a8 07 	call	0xf50	; 0xf50 <__subsf3>
     6cc:	dc 01       	movw	r26, r24
     6ce:	cb 01       	movw	r24, r22
     6d0:	20 e0       	ldi	r18, 0x00	; 0
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	40 e2       	ldi	r20, 0x20	; 32
     6d6:	51 e4       	ldi	r21, 0x41	; 65
     6d8:	bc 01       	movw	r22, r24
     6da:	cd 01       	movw	r24, r26
     6dc:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <__mulsf3>
     6e0:	dc 01       	movw	r26, r24
     6e2:	cb 01       	movw	r24, r22
     6e4:	8d 87       	std	Y+13, r24	; 0x0d
     6e6:	9e 87       	std	Y+14, r25	; 0x0e
     6e8:	af 87       	std	Y+15, r26	; 0x0f
     6ea:	b8 8b       	std	Y+16, r27	; 0x10
	int3 = (uint8_t) volt3;
     6ec:	6d 85       	ldd	r22, Y+13	; 0x0d
     6ee:	7e 85       	ldd	r23, Y+14	; 0x0e
     6f0:	8f 85       	ldd	r24, Y+15	; 0x0f
     6f2:	98 89       	ldd	r25, Y+16	; 0x10
     6f4:	0e 94 15 08 	call	0x102a	; 0x102a <__fixunssfsi>
     6f8:	dc 01       	movw	r26, r24
     6fa:	cb 01       	movw	r24, r22
     6fc:	89 8b       	std	Y+17, r24	; 0x11
	d3 = (char) (int3 + '0');
     6fe:	89 89       	ldd	r24, Y+17	; 0x11
     700:	80 5d       	subi	r24, 0xD0	; 208
     702:	8a 8b       	std	Y+18, r24	; 0x12
	
	h1 = conv_nibble(volt>>8);				// Obtain ASCII for Hex representation
     704:	8d a1       	ldd	r24, Y+37	; 0x25
     706:	9e a1       	ldd	r25, Y+38	; 0x26
     708:	89 2f       	mov	r24, r25
     70a:	99 27       	eor	r25, r25
     70c:	0e 94 c1 03 	call	0x782	; 0x782 <conv_nibble>
     710:	8b 8b       	std	Y+19, r24	; 0x13
	h2 = conv_nibble(volt>>4 & 0x0F);
     712:	8d a1       	ldd	r24, Y+37	; 0x25
     714:	9e a1       	ldd	r25, Y+38	; 0x26
     716:	92 95       	swap	r25
     718:	82 95       	swap	r24
     71a:	8f 70       	andi	r24, 0x0F	; 15
     71c:	89 27       	eor	r24, r25
     71e:	9f 70       	andi	r25, 0x0F	; 15
     720:	89 27       	eor	r24, r25
     722:	8f 70       	andi	r24, 0x0F	; 15
     724:	0e 94 c1 03 	call	0x782	; 0x782 <conv_nibble>
     728:	8c 8b       	std	Y+20, r24	; 0x14
	h3 = conv_nibble(volt & 0x0F);
     72a:	8d a1       	ldd	r24, Y+37	; 0x25
     72c:	8f 70       	andi	r24, 0x0F	; 15
     72e:	0e 94 c1 03 	call	0x782	; 0x782 <conv_nibble>
     732:	8d 8b       	std	Y+21, r24	; 0x15
	
	char string[] = {d1, '.', d2, d3, ' ', 'V', ' ', '(', '0', 'x', h1, h2, h3, ')', '\0'};
     734:	8e 81       	ldd	r24, Y+6	; 0x06
     736:	8e 8b       	std	Y+22, r24	; 0x16
     738:	8e e2       	ldi	r24, 0x2E	; 46
     73a:	8f 8b       	std	Y+23, r24	; 0x17
     73c:	8c 85       	ldd	r24, Y+12	; 0x0c
     73e:	88 8f       	std	Y+24, r24	; 0x18
     740:	8a 89       	ldd	r24, Y+18	; 0x12
     742:	89 8f       	std	Y+25, r24	; 0x19
     744:	80 e2       	ldi	r24, 0x20	; 32
     746:	8a 8f       	std	Y+26, r24	; 0x1a
     748:	86 e5       	ldi	r24, 0x56	; 86
     74a:	8b 8f       	std	Y+27, r24	; 0x1b
     74c:	80 e2       	ldi	r24, 0x20	; 32
     74e:	8c 8f       	std	Y+28, r24	; 0x1c
     750:	88 e2       	ldi	r24, 0x28	; 40
     752:	8d 8f       	std	Y+29, r24	; 0x1d
     754:	80 e3       	ldi	r24, 0x30	; 48
     756:	8e 8f       	std	Y+30, r24	; 0x1e
     758:	88 e7       	ldi	r24, 0x78	; 120
     75a:	8f 8f       	std	Y+31, r24	; 0x1f
     75c:	8b 89       	ldd	r24, Y+19	; 0x13
     75e:	88 a3       	std	Y+32, r24	; 0x20
     760:	8c 89       	ldd	r24, Y+20	; 0x14
     762:	89 a3       	std	Y+33, r24	; 0x21
     764:	8d 89       	ldd	r24, Y+21	; 0x15
     766:	8a a3       	std	Y+34, r24	; 0x22
     768:	89 e2       	ldi	r24, 0x29	; 41
     76a:	8b a3       	std	Y+35, r24	; 0x23
     76c:	1c a2       	std	Y+36, r1	; 0x24
	OUT_STRING(string);						// Output Voltmeter reading
     76e:	ce 01       	movw	r24, r28
     770:	46 96       	adiw	r24, 0x16	; 22
     772:	0e 94 0a 02 	call	0x414	; 0x414 <OUT_STRING>
}
     776:	a6 96       	adiw	r28, 0x26	; 38
     778:	cd bf       	out	0x3d, r28	; 61
     77a:	de bf       	out	0x3e, r29	; 62
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	08 95       	ret

00000782 <conv_nibble>:

uint8_t conv_nibble(uint8_t nib)
{
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
     786:	1f 92       	push	r1
     788:	cd b7       	in	r28, 0x3d	; 61
     78a:	de b7       	in	r29, 0x3e	; 62
     78c:	89 83       	std	Y+1, r24	; 0x01
	if (nib < 0xA)
     78e:	89 81       	ldd	r24, Y+1	; 0x01
     790:	8a 30       	cpi	r24, 0x0A	; 10
     792:	20 f4       	brcc	.+8      	; 0x79c <conv_nibble+0x1a>
	{
		nib += '0';							// Offset by ASCII '0'
     794:	89 81       	ldd	r24, Y+1	; 0x01
     796:	80 5d       	subi	r24, 0xD0	; 208
     798:	89 83       	std	Y+1, r24	; 0x01
     79a:	03 c0       	rjmp	.+6      	; 0x7a2 <conv_nibble+0x20>
	} else
	{
		nib += 'A' - 0xA;					// Subtract out 0xA so that 0xA => 0, 0xB => 1, etc., then offset by ASCII 'A'
     79c:	89 81       	ldd	r24, Y+1	; 0x01
     79e:	89 5c       	subi	r24, 0xC9	; 201
     7a0:	89 83       	std	Y+1, r24	; 0x01
	}
	return nib;
     7a2:	89 81       	ldd	r24, Y+1	; 0x01
     7a4:	0f 90       	pop	r0
     7a6:	df 91       	pop	r29
     7a8:	cf 91       	pop	r28
     7aa:	08 95       	ret

000007ac <cds>:
/////////////////////////////////////PROTOTYPES//////////////////////////////////////
uint16_t cds(void);

/////////////////////////////////////FUNCTIONS///////////////////////////////////////
uint16_t cds(void)
{
     7ac:	cf 93       	push	r28
     7ae:	df 93       	push	r29
     7b0:	cd b7       	in	r28, 0x3d	; 61
     7b2:	de b7       	in	r29, 0x3e	; 62
	while (!ADCB.CH1.INTFLAGS);
     7b4:	00 00       	nop
     7b6:	80 e4       	ldi	r24, 0x40	; 64
     7b8:	92 e0       	ldi	r25, 0x02	; 2
     7ba:	fc 01       	movw	r30, r24
     7bc:	83 a5       	ldd	r24, Z+43	; 0x2b
     7be:	88 23       	and	r24, r24
     7c0:	d1 f3       	breq	.-12     	; 0x7b6 <cds+0xa>
	ADCB.CH1.INTFLAGS = 0x01;
     7c2:	80 e4       	ldi	r24, 0x40	; 64
     7c4:	92 e0       	ldi	r25, 0x02	; 2
     7c6:	21 e0       	ldi	r18, 0x01	; 1
     7c8:	fc 01       	movw	r30, r24
     7ca:	23 a7       	std	Z+43, r18	; 0x2b
	return ADCB.CH1.RES;
     7cc:	80 e4       	ldi	r24, 0x40	; 64
     7ce:	92 e0       	ldi	r25, 0x02	; 2
     7d0:	fc 01       	movw	r30, r24
     7d2:	84 a5       	ldd	r24, Z+44	; 0x2c
     7d4:	95 a5       	ldd	r25, Z+45	; 0x2d
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
     7da:	08 95       	ret

000007dc <keypad_init>:
uint8_t keyscan(void);
void keyhold(void);

/////////////////////////////////////FUNCTIONS///////////////////////////////////////
void keypad_init(void)
{
     7dc:	cf 93       	push	r28
     7de:	df 93       	push	r29
     7e0:	cd b7       	in	r28, 0x3d	; 61
     7e2:	de b7       	in	r29, 0x3e	; 62
	PORTF.PIN7CTRL = PORT_OPC_PULLUP_gc;		// Set OPC to Pull-Up for all Keypad pins
     7e4:	80 ea       	ldi	r24, 0xA0	; 160
     7e6:	96 e0       	ldi	r25, 0x06	; 6
     7e8:	28 e1       	ldi	r18, 0x18	; 24
     7ea:	fc 01       	movw	r30, r24
     7ec:	27 8b       	std	Z+23, r18	; 0x17
	PORTF.PIN6CTRL = PORT_OPC_PULLUP_gc;
     7ee:	80 ea       	ldi	r24, 0xA0	; 160
     7f0:	96 e0       	ldi	r25, 0x06	; 6
     7f2:	28 e1       	ldi	r18, 0x18	; 24
     7f4:	fc 01       	movw	r30, r24
     7f6:	26 8b       	std	Z+22, r18	; 0x16
	PORTF.PIN5CTRL = PORT_OPC_PULLUP_gc;
     7f8:	80 ea       	ldi	r24, 0xA0	; 160
     7fa:	96 e0       	ldi	r25, 0x06	; 6
     7fc:	28 e1       	ldi	r18, 0x18	; 24
     7fe:	fc 01       	movw	r30, r24
     800:	25 8b       	std	Z+21, r18	; 0x15
	PORTF.PIN4CTRL = PORT_OPC_PULLUP_gc;
     802:	80 ea       	ldi	r24, 0xA0	; 160
     804:	96 e0       	ldi	r25, 0x06	; 6
     806:	28 e1       	ldi	r18, 0x18	; 24
     808:	fc 01       	movw	r30, r24
     80a:	24 8b       	std	Z+20, r18	; 0x14
	PORTF.PIN3CTRL = PORT_OPC_PULLUP_gc;
     80c:	80 ea       	ldi	r24, 0xA0	; 160
     80e:	96 e0       	ldi	r25, 0x06	; 6
     810:	28 e1       	ldi	r18, 0x18	; 24
     812:	fc 01       	movw	r30, r24
     814:	23 8b       	std	Z+19, r18	; 0x13
	PORTF.PIN2CTRL = PORT_OPC_PULLUP_gc;
     816:	80 ea       	ldi	r24, 0xA0	; 160
     818:	96 e0       	ldi	r25, 0x06	; 6
     81a:	28 e1       	ldi	r18, 0x18	; 24
     81c:	fc 01       	movw	r30, r24
     81e:	22 8b       	std	Z+18, r18	; 0x12
	PORTF.PIN1CTRL = PORT_OPC_PULLUP_gc;
     820:	80 ea       	ldi	r24, 0xA0	; 160
     822:	96 e0       	ldi	r25, 0x06	; 6
     824:	28 e1       	ldi	r18, 0x18	; 24
     826:	fc 01       	movw	r30, r24
     828:	21 8b       	std	Z+17, r18	; 0x11
	PORTF.PIN0CTRL = PORT_OPC_PULLUP_gc;
     82a:	80 ea       	ldi	r24, 0xA0	; 160
     82c:	96 e0       	ldi	r25, 0x06	; 6
     82e:	28 e1       	ldi	r18, 0x18	; 24
     830:	fc 01       	movw	r30, r24
     832:	20 8b       	std	Z+16, r18	; 0x10
	
	PORTF.DIRSET = 0x0F;			// Set LSNibble of PortF as Output
     834:	80 ea       	ldi	r24, 0xA0	; 160
     836:	96 e0       	ldi	r25, 0x06	; 6
     838:	2f e0       	ldi	r18, 0x0F	; 15
     83a:	fc 01       	movw	r30, r24
     83c:	21 83       	std	Z+1, r18	; 0x01
}
     83e:	df 91       	pop	r29
     840:	cf 91       	pop	r28
     842:	08 95       	ret

00000844 <keyscan>:

uint8_t keyscan(void)
{
     844:	cf 93       	push	r28
     846:	df 93       	push	r29
     848:	cd b7       	in	r28, 0x3d	; 61
     84a:	de b7       	in	r29, 0x3e	; 62
     84c:	25 97       	sbiw	r28, 0x05	; 5
     84e:	cd bf       	out	0x3d, r28	; 61
     850:	de bf       	out	0x3e, r29	; 62
	uint8_t input, index, line, key = 0xFF, i = 0;
     852:	8f ef       	ldi	r24, 0xFF	; 255
     854:	8b 83       	std	Y+3, r24	; 0x03
     856:	1a 82       	std	Y+2, r1	; 0x02
	for (i = 0; i < 4; i++)	// Iterate columns
     858:	1a 82       	std	Y+2, r1	; 0x02
     85a:	50 c0       	rjmp	.+160    	; 0x8fc <keyscan+0xb8>
	{
		line = ~(0x01 << i) & 0x0F;		// Iterate shift 0x08 by i and not to hit each col
     85c:	8a 81       	ldd	r24, Y+2	; 0x02
     85e:	28 2f       	mov	r18, r24
     860:	30 e0       	ldi	r19, 0x00	; 0
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	02 c0       	rjmp	.+4      	; 0x86c <keyscan+0x28>
     868:	88 0f       	add	r24, r24
     86a:	99 1f       	adc	r25, r25
     86c:	2a 95       	dec	r18
     86e:	e2 f7       	brpl	.-8      	; 0x868 <keyscan+0x24>
     870:	80 95       	com	r24
     872:	8f 70       	andi	r24, 0x0F	; 15
     874:	8c 83       	std	Y+4, r24	; 0x04
		PORTF.OUT = line;			// Output value for col
     876:	80 ea       	ldi	r24, 0xA0	; 160
     878:	96 e0       	ldi	r25, 0x06	; 6
     87a:	2c 81       	ldd	r18, Y+4	; 0x04
     87c:	fc 01       	movw	r30, r24
     87e:	24 83       	std	Z+4, r18	; 0x04
		asm volatile ("nop");
     880:	00 00       	nop
		input = PORTF.IN & 0xF0;	// Read Input and bitmask off Output bits
     882:	80 ea       	ldi	r24, 0xA0	; 160
     884:	96 e0       	ldi	r25, 0x06	; 6
     886:	fc 01       	movw	r30, r24
     888:	80 85       	ldd	r24, Z+8	; 0x08
     88a:	80 7f       	andi	r24, 0xF0	; 240
     88c:	8d 83       	std	Y+5, r24	; 0x05
		
		if (input < 0xF0)
     88e:	8d 81       	ldd	r24, Y+5	; 0x05
     890:	80 3f       	cpi	r24, 0xF0	; 240
     892:	88 f5       	brcc	.+98     	; 0x8f6 <keyscan+0xb2>
		{
			switch (input)
     894:	8d 81       	ldd	r24, Y+5	; 0x05
     896:	88 2f       	mov	r24, r24
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	80 3b       	cpi	r24, 0xB0	; 176
     89c:	91 05       	cpc	r25, r1
     89e:	91 f0       	breq	.+36     	; 0x8c4 <keyscan+0x80>
     8a0:	81 3b       	cpi	r24, 0xB1	; 177
     8a2:	91 05       	cpc	r25, r1
     8a4:	24 f4       	brge	.+8      	; 0x8ae <keyscan+0x6a>
     8a6:	80 37       	cpi	r24, 0x70	; 112
     8a8:	91 05       	cpc	r25, r1
     8aa:	79 f0       	breq	.+30     	; 0x8ca <keyscan+0x86>
     8ac:	11 c0       	rjmp	.+34     	; 0x8d0 <keyscan+0x8c>
     8ae:	80 3d       	cpi	r24, 0xD0	; 208
     8b0:	91 05       	cpc	r25, r1
     8b2:	29 f0       	breq	.+10     	; 0x8be <keyscan+0x7a>
     8b4:	80 3e       	cpi	r24, 0xE0	; 224
     8b6:	91 05       	cpc	r25, r1
     8b8:	59 f4       	brne	.+22     	; 0x8d0 <keyscan+0x8c>
			{
				case 0xE0:
					index = 0x00;
     8ba:	19 82       	std	Y+1, r1	; 0x01
					break;
     8bc:	09 c0       	rjmp	.+18     	; 0x8d0 <keyscan+0x8c>
				case 0xD0:
					index = 0x01;
     8be:	81 e0       	ldi	r24, 0x01	; 1
     8c0:	89 83       	std	Y+1, r24	; 0x01
					break;
     8c2:	06 c0       	rjmp	.+12     	; 0x8d0 <keyscan+0x8c>
				case 0xB0:
					index = 0x02;
     8c4:	82 e0       	ldi	r24, 0x02	; 2
     8c6:	89 83       	std	Y+1, r24	; 0x01
					break;
     8c8:	03 c0       	rjmp	.+6      	; 0x8d0 <keyscan+0x8c>
				case 0x70:
					index = 0x03;
     8ca:	83 e0       	ldi	r24, 0x03	; 3
     8cc:	89 83       	std	Y+1, r24	; 0x01
					break;
     8ce:	00 00       	nop
			}
			key = keys[index+4*i];
     8d0:	89 81       	ldd	r24, Y+1	; 0x01
     8d2:	28 2f       	mov	r18, r24
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	8a 81       	ldd	r24, Y+2	; 0x02
     8d8:	88 2f       	mov	r24, r24
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	88 0f       	add	r24, r24
     8de:	99 1f       	adc	r25, r25
     8e0:	88 0f       	add	r24, r24
     8e2:	99 1f       	adc	r25, r25
     8e4:	82 0f       	add	r24, r18
     8e6:	93 1f       	adc	r25, r19
     8e8:	8b 5f       	subi	r24, 0xFB	; 251
     8ea:	9f 4d       	sbci	r25, 0xDF	; 223
     8ec:	fc 01       	movw	r30, r24
     8ee:	80 81       	ld	r24, Z
     8f0:	8b 83       	std	Y+3, r24	; 0x03
			return key;
     8f2:	8b 81       	ldd	r24, Y+3	; 0x03
     8f4:	08 c0       	rjmp	.+16     	; 0x906 <keyscan+0xc2>
}

uint8_t keyscan(void)
{
	uint8_t input, index, line, key = 0xFF, i = 0;
	for (i = 0; i < 4; i++)	// Iterate columns
     8f6:	8a 81       	ldd	r24, Y+2	; 0x02
     8f8:	8f 5f       	subi	r24, 0xFF	; 255
     8fa:	8a 83       	std	Y+2, r24	; 0x02
     8fc:	8a 81       	ldd	r24, Y+2	; 0x02
     8fe:	84 30       	cpi	r24, 0x04	; 4
     900:	08 f4       	brcc	.+2      	; 0x904 <keyscan+0xc0>
     902:	ac cf       	rjmp	.-168    	; 0x85c <keyscan+0x18>
			}
			key = keys[index+4*i];
			return key;
		}
	}
	return key;
     904:	8b 81       	ldd	r24, Y+3	; 0x03
}
     906:	25 96       	adiw	r28, 0x05	; 5
     908:	cd bf       	out	0x3d, r28	; 61
     90a:	de bf       	out	0x3e, r29	; 62
     90c:	df 91       	pop	r29
     90e:	cf 91       	pop	r28
     910:	08 95       	ret

00000912 <keyhold>:

void keyhold(void) 
{
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	cd b7       	in	r28, 0x3d	; 61
     918:	de b7       	in	r29, 0x3e	; 62
	while ((PORTF.IN & 0xF0) < 0xF0);
     91a:	00 00       	nop
     91c:	80 ea       	ldi	r24, 0xA0	; 160
     91e:	96 e0       	ldi	r25, 0x06	; 6
     920:	fc 01       	movw	r30, r24
     922:	80 85       	ldd	r24, Z+8	; 0x08
     924:	88 2f       	mov	r24, r24
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	80 7f       	andi	r24, 0xF0	; 240
     92a:	99 27       	eor	r25, r25
     92c:	80 3f       	cpi	r24, 0xF0	; 240
     92e:	91 05       	cpc	r25, r1
     930:	ac f3       	brlt	.-22     	; 0x91c <keyhold+0xa>
     932:	df 91       	pop	r29
     934:	cf 91       	pop	r28
     936:	08 95       	ret

00000938 <main>:
char *start = "Press any key";
char *quit = "Press * to quit.";

///////////////////////////////////MAIN FUNCTION/////////////////////////////////////
int main(void)
{
     938:	cf 93       	push	r28
     93a:	df 93       	push	r29
     93c:	cd b7       	in	r28, 0x3d	; 61
     93e:	de b7       	in	r29, 0x3e	; 62
     940:	2c 97       	sbiw	r28, 0x0c	; 12
     942:	cd bf       	out	0x3d, r28	; 61
     944:	de bf       	out	0x3e, r29	; 62
	ebi_init();
     946:	0e 94 39 01 	call	0x272	; 0x272 <ebi_init>
	lcd_init();
     94a:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_init>
	adc_init();
     94e:	0e 94 8b 02 	call	0x516	; 0x516 <adc_init>
	keypad_init();
     952:	0e 94 ee 03 	call	0x7dc	; 0x7dc <keypad_init>
	srand(time(NULL));
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	0e 94 26 01 	call	0x24c	; 0x24c <time>
     95e:	dc 01       	movw	r26, r24
     960:	cb 01       	movw	r24, r22
     962:	0e 94 b6 09 	call	0x136c	; 0x136c <srand>
	
	
	uint8_t key, loop_key = 0xFF;
     966:	8f ef       	ldi	r24, 0xFF	; 255
     968:	8a 83       	std	Y+2, r24	; 0x02
	while (1)
	{
		if (loop_key == 0xFF)					// If no loop key, scan for key
     96a:	8a 81       	ldd	r24, Y+2	; 0x02
     96c:	8f 3f       	cpi	r24, 0xFF	; 255
     96e:	39 f4       	brne	.+14     	; 0x97e <main+0x46>
		{
			do 
			{
				key = keyscan();
     970:	0e 94 22 04 	call	0x844	; 0x844 <keyscan>
     974:	89 83       	std	Y+1, r24	; 0x01
			} while (key == 0xFF);
     976:	89 81       	ldd	r24, Y+1	; 0x01
     978:	8f 3f       	cpi	r24, 0xFF	; 255
     97a:	d1 f3       	breq	.-12     	; 0x970 <main+0x38>
     97c:	04 c0       	rjmp	.+8      	; 0x986 <main+0x4e>
		}
		else
		{										// Else a loop key has been read, use it
			key = loop_key;
     97e:	8a 81       	ldd	r24, Y+2	; 0x02
     980:	89 83       	std	Y+1, r24	; 0x01
			loop_key = 0xFF;
     982:	8f ef       	ldi	r24, 0xFF	; 255
     984:	8a 83       	std	Y+2, r24	; 0x02
		}
		
		if (key <= 0x01)						// Toggle LCD On/Off
     986:	89 81       	ldd	r24, Y+1	; 0x01
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	18 f4       	brcc	.+6      	; 0x992 <main+0x5a>
		{
			lcd_toggle();
     98c:	0e 94 73 02 	call	0x4e6	; 0x4e6 <lcd_toggle>
     990:	62 c0       	rjmp	.+196    	; 0xa56 <main+0x11e>
		} 
		else if (key <= 0x03)					// Display ADC Voltage reading from Potentiometer
     992:	89 81       	ldd	r24, Y+1	; 0x01
     994:	84 30       	cpi	r24, 0x04	; 4
     996:	68 f4       	brcc	.+26     	; 0x9b2 <main+0x7a>
		{
			do 
			{
				lcd_voltage(adc_pot());
     998:	0e 94 cd 02 	call	0x59a	; 0x59a <adc_pot>
     99c:	0e 94 e5 02 	call	0x5ca	; 0x5ca <lcd_voltage>
				rough_delay();
     9a0:	0e 94 2e 05 	call	0xa5c	; 0xa5c <rough_delay>
				loop_key = keyscan();
     9a4:	0e 94 22 04 	call	0x844	; 0x844 <keyscan>
     9a8:	8a 83       	std	Y+2, r24	; 0x02
			} while (loop_key == 0xFF);
     9aa:	8a 81       	ldd	r24, Y+2	; 0x02
     9ac:	8f 3f       	cpi	r24, 0xFF	; 255
     9ae:	a1 f3       	breq	.-24     	; 0x998 <main+0x60>
     9b0:	52 c0       	rjmp	.+164    	; 0xa56 <main+0x11e>
		}
		else if (key <= 0x05)					// Send "Nick Imamshah" to LCD Screen
     9b2:	89 81       	ldd	r24, Y+1	; 0x01
     9b4:	86 30       	cpi	r24, 0x06	; 6
     9b6:	28 f4       	brcc	.+10     	; 0x9c2 <main+0x8a>
		{
			OUT_STRING("Nick Imamshah");
     9b8:	86 e4       	ldi	r24, 0x46	; 70
     9ba:	90 e2       	ldi	r25, 0x20	; 32
     9bc:	0e 94 0a 02 	call	0x414	; 0x414 <OUT_STRING>
     9c0:	4a c0       	rjmp	.+148    	; 0xa56 <main+0x11e>
		}
		else if (key <= 0x07)					// Send phrase to LCD Screen on both lines
     9c2:	89 81       	ldd	r24, Y+1	; 0x01
     9c4:	88 30       	cpi	r24, 0x08	; 8
     9c6:	60 f4       	brcc	.+24     	; 0x9e0 <main+0xa8>
		{
			OUT_STRING("May the Schwartz");
     9c8:	84 e5       	ldi	r24, 0x54	; 84
     9ca:	90 e2       	ldi	r25, 0x20	; 32
     9cc:	0e 94 0a 02 	call	0x414	; 0x414 <OUT_STRING>
			OUT_COMMAND(0xC0);
     9d0:	80 ec       	ldi	r24, 0xC0	; 192
     9d2:	0e 94 29 02 	call	0x452	; 0x452 <OUT_COMMAND>
			OUT_STRING("be with you!");
     9d6:	85 e6       	ldi	r24, 0x65	; 101
     9d8:	90 e2       	ldi	r25, 0x20	; 32
     9da:	0e 94 0a 02 	call	0x414	; 0x414 <OUT_STRING>
     9de:	3b c0       	rjmp	.+118    	; 0xa56 <main+0x11e>
		}
		else if (key >= 0x0E && key < 0xFF)		// Clear the LCD Screen and control LED with CdS ADC reading
     9e0:	89 81       	ldd	r24, Y+1	; 0x01
     9e2:	8e 30       	cpi	r24, 0x0E	; 14
     9e4:	08 f4       	brcc	.+2      	; 0x9e8 <main+0xb0>
     9e6:	35 c0       	rjmp	.+106    	; 0xa52 <main+0x11a>
     9e8:	89 81       	ldd	r24, Y+1	; 0x01
     9ea:	8f 3f       	cpi	r24, 0xFF	; 255
     9ec:	91 f1       	breq	.+100    	; 0xa52 <main+0x11a>
		{
			CLEAR_SCREEN();
     9ee:	0e 94 4f 02 	call	0x49e	; 0x49e <CLEAR_SCREEN>
			uint16_t cds_volt = cds();
     9f2:	0e 94 d6 03 	call	0x7ac	; 0x7ac <cds>
     9f6:	8b 83       	std	Y+3, r24	; 0x03
     9f8:	9c 83       	std	Y+4, r25	; 0x04
			if (cds_volt < 256)
     9fa:	8b 81       	ldd	r24, Y+3	; 0x03
     9fc:	9c 81       	ldd	r25, Y+4	; 0x04
     9fe:	8f 3f       	cpi	r24, 0xFF	; 255
     a00:	91 05       	cpc	r25, r1
     a02:	09 f0       	breq	.+2      	; 0xa06 <main+0xce>
     a04:	98 f4       	brcc	.+38     	; 0xa2c <main+0xf4>
			{
				__far_mem_write(CS0_Start, 0x01);
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	90 e8       	ldi	r25, 0x80	; 128
     a0a:	a8 e2       	ldi	r26, 0x28	; 40
     a0c:	b0 e0       	ldi	r27, 0x00	; 0
     a0e:	8d 83       	std	Y+5, r24	; 0x05
     a10:	9e 83       	std	Y+6, r25	; 0x06
     a12:	af 83       	std	Y+7, r26	; 0x07
     a14:	b8 87       	std	Y+8, r27	; 0x08
     a16:	8d 81       	ldd	r24, Y+5	; 0x05
     a18:	9e 81       	ldd	r25, Y+6	; 0x06
     a1a:	af 81       	ldd	r26, Y+7	; 0x07
     a1c:	b8 85       	ldd	r27, Y+8	; 0x08
     a1e:	21 e0       	ldi	r18, 0x01	; 1
     a20:	0b b6       	in	r0, 0x3b	; 59
     a22:	ab bf       	out	0x3b, r26	; 59
     a24:	fc 01       	movw	r30, r24
     a26:	20 83       	st	Z, r18
     a28:	0b be       	out	0x3b, r0	; 59
			OUT_STRING("May the Schwartz");
			OUT_COMMAND(0xC0);
			OUT_STRING("be with you!");
		}
		else if (key >= 0x0E && key < 0xFF)		// Clear the LCD Screen and control LED with CdS ADC reading
		{
     a2a:	15 c0       	rjmp	.+42     	; 0xa56 <main+0x11e>
			if (cds_volt < 256)
			{
				__far_mem_write(CS0_Start, 0x01);
			} else
			{
				__far_mem_write(CS0_Start, 0x00);
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	90 e8       	ldi	r25, 0x80	; 128
     a30:	a8 e2       	ldi	r26, 0x28	; 40
     a32:	b0 e0       	ldi	r27, 0x00	; 0
     a34:	89 87       	std	Y+9, r24	; 0x09
     a36:	9a 87       	std	Y+10, r25	; 0x0a
     a38:	ab 87       	std	Y+11, r26	; 0x0b
     a3a:	bc 87       	std	Y+12, r27	; 0x0c
     a3c:	89 85       	ldd	r24, Y+9	; 0x09
     a3e:	9a 85       	ldd	r25, Y+10	; 0x0a
     a40:	ab 85       	ldd	r26, Y+11	; 0x0b
     a42:	bc 85       	ldd	r27, Y+12	; 0x0c
     a44:	20 e0       	ldi	r18, 0x00	; 0
     a46:	0b b6       	in	r0, 0x3b	; 59
     a48:	ab bf       	out	0x3b, r26	; 59
     a4a:	fc 01       	movw	r30, r24
     a4c:	20 83       	st	Z, r18
     a4e:	0b be       	out	0x3b, r0	; 59
			OUT_STRING("May the Schwartz");
			OUT_COMMAND(0xC0);
			OUT_STRING("be with you!");
		}
		else if (key >= 0x0E && key < 0xFF)		// Clear the LCD Screen and control LED with CdS ADC reading
		{
     a50:	02 c0       	rjmp	.+4      	; 0xa56 <main+0x11e>
				__far_mem_write(CS0_Start, 0x00);
			}
		}
		else
		{										// Perform a custom operation
			fun_func();
     a52:	0e 94 6d 05 	call	0xada	; 0xada <fun_func>
		}
		
		keyhold();
     a56:	0e 94 89 04 	call	0x912	; 0x912 <keyhold>
	}
     a5a:	87 cf       	rjmp	.-242    	; 0x96a <main+0x32>

00000a5c <rough_delay>:
}

/////////////////////////////////////FUNCTIONS///////////////////////////////////////
void rough_delay(void)
{
     a5c:	cf 93       	push	r28
     a5e:	df 93       	push	r29
     a60:	1f 92       	push	r1
     a62:	1f 92       	push	r1
     a64:	cd b7       	in	r28, 0x3d	; 61
     a66:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i < 15000; i++)
     a68:	19 82       	std	Y+1, r1	; 0x01
     a6a:	1a 82       	std	Y+2, r1	; 0x02
     a6c:	06 c0       	rjmp	.+12     	; 0xa7a <rough_delay+0x1e>
	{
		asm volatile ("nop");
     a6e:	00 00       	nop
}

/////////////////////////////////////FUNCTIONS///////////////////////////////////////
void rough_delay(void)
{
	for (int i = 0; i < 15000; i++)
     a70:	89 81       	ldd	r24, Y+1	; 0x01
     a72:	9a 81       	ldd	r25, Y+2	; 0x02
     a74:	01 96       	adiw	r24, 0x01	; 1
     a76:	89 83       	std	Y+1, r24	; 0x01
     a78:	9a 83       	std	Y+2, r25	; 0x02
     a7a:	89 81       	ldd	r24, Y+1	; 0x01
     a7c:	9a 81       	ldd	r25, Y+2	; 0x02
     a7e:	88 39       	cpi	r24, 0x98	; 152
     a80:	9a 43       	sbci	r25, 0x3A	; 58
     a82:	ac f3       	brlt	.-22     	; 0xa6e <rough_delay+0x12>
	{
		asm volatile ("nop");
	}
}
     a84:	0f 90       	pop	r0
     a86:	0f 90       	pop	r0
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	08 95       	ret

00000a8e <long_delay>:

void long_delay(void)
{
     a8e:	cf 93       	push	r28
     a90:	df 93       	push	r29
     a92:	00 d0       	rcall	.+0      	; 0xa94 <long_delay+0x6>
     a94:	1f 92       	push	r1
     a96:	cd b7       	in	r28, 0x3d	; 61
     a98:	de b7       	in	r29, 0x3e	; 62
	for (int i = 0; i < 20; i++)
     a9a:	19 82       	std	Y+1, r1	; 0x01
     a9c:	1a 82       	std	Y+2, r1	; 0x02
     a9e:	13 c0       	rjmp	.+38     	; 0xac6 <long_delay+0x38>
	{
		for (int j = 0; j < 5000; j++)
     aa0:	1b 82       	std	Y+3, r1	; 0x03
     aa2:	1c 82       	std	Y+4, r1	; 0x04
     aa4:	06 c0       	rjmp	.+12     	; 0xab2 <long_delay+0x24>
		{
			asm volatile ("nop");
     aa6:	00 00       	nop

void long_delay(void)
{
	for (int i = 0; i < 20; i++)
	{
		for (int j = 0; j < 5000; j++)
     aa8:	8b 81       	ldd	r24, Y+3	; 0x03
     aaa:	9c 81       	ldd	r25, Y+4	; 0x04
     aac:	01 96       	adiw	r24, 0x01	; 1
     aae:	8b 83       	std	Y+3, r24	; 0x03
     ab0:	9c 83       	std	Y+4, r25	; 0x04
     ab2:	8b 81       	ldd	r24, Y+3	; 0x03
     ab4:	9c 81       	ldd	r25, Y+4	; 0x04
     ab6:	88 38       	cpi	r24, 0x88	; 136
     ab8:	93 41       	sbci	r25, 0x13	; 19
     aba:	ac f3       	brlt	.-22     	; 0xaa6 <long_delay+0x18>
	}
}

void long_delay(void)
{
	for (int i = 0; i < 20; i++)
     abc:	89 81       	ldd	r24, Y+1	; 0x01
     abe:	9a 81       	ldd	r25, Y+2	; 0x02
     ac0:	01 96       	adiw	r24, 0x01	; 1
     ac2:	89 83       	std	Y+1, r24	; 0x01
     ac4:	9a 83       	std	Y+2, r25	; 0x02
     ac6:	89 81       	ldd	r24, Y+1	; 0x01
     ac8:	9a 81       	ldd	r25, Y+2	; 0x02
     aca:	44 97       	sbiw	r24, 0x14	; 20
     acc:	4c f3       	brlt	.-46     	; 0xaa0 <long_delay+0x12>
		for (int j = 0; j < 5000; j++)
		{
			asm volatile ("nop");
		}
	}
}
     ace:	24 96       	adiw	r28, 0x04	; 4
     ad0:	cd bf       	out	0x3d, r28	; 61
     ad2:	de bf       	out	0x3e, r29	; 62
     ad4:	df 91       	pop	r29
     ad6:	cf 91       	pop	r28
     ad8:	08 95       	ret

00000ada <fun_func>:

void fun_func(void)
{
     ada:	cf 93       	push	r28
     adc:	df 93       	push	r29
     ade:	cd b7       	in	r28, 0x3d	; 61
     ae0:	de b7       	in	r29, 0x3e	; 62
     ae2:	2b 97       	sbiw	r28, 0x0b	; 11
     ae4:	cd bf       	out	0x3d, r28	; 61
     ae6:	de bf       	out	0x3e, r29	; 62
	OUT_STRING(prompt);
     ae8:	80 91 15 20 	lds	r24, 0x2015	; 0x802015 <prompt>
     aec:	90 91 16 20 	lds	r25, 0x2016	; 0x802016 <prompt+0x1>
     af0:	0e 94 0a 02 	call	0x414	; 0x414 <OUT_STRING>
	wait_key();
     af4:	0e 94 9a 06 	call	0xd34	; 0xd34 <wait_key>
	
	CLEAR_SCREEN();
     af8:	0e 94 4f 02 	call	0x49e	; 0x49e <CLEAR_SCREEN>
	
	uint8_t key = 0xFF, diff = 5;
     afc:	8f ef       	ldi	r24, 0xFF	; 255
     afe:	89 83       	std	Y+1, r24	; 0x01
     b00:	85 e0       	ldi	r24, 0x05	; 5
     b02:	8d 83       	std	Y+5, r24	; 0x05
	
	OUT_STRING(quit);
     b04:	80 91 19 20 	lds	r24, 0x2019	; 0x802019 <quit>
     b08:	90 91 1a 20 	lds	r25, 0x201A	; 0x80201a <quit+0x1>
     b0c:	0e 94 0a 02 	call	0x414	; 0x414 <OUT_STRING>
	OUT_COMMAND(0xC0);
     b10:	80 ec       	ldi	r24, 0xC0	; 192
     b12:	0e 94 29 02 	call	0x452	; 0x452 <OUT_COMMAND>
	OUT_STRING("Press any key");
     b16:	87 e2       	ldi	r24, 0x27	; 39
     b18:	90 e2       	ldi	r25, 0x20	; 32
     b1a:	0e 94 0a 02 	call	0x414	; 0x414 <OUT_STRING>
	do 
	{
		key = keyscan();
     b1e:	0e 94 22 04 	call	0x844	; 0x844 <keyscan>
     b22:	89 83       	std	Y+1, r24	; 0x01
	} while (key == 0xFF);
     b24:	89 81       	ldd	r24, Y+1	; 0x01
     b26:	8f 3f       	cpi	r24, 0xFF	; 255
     b28:	d1 f3       	breq	.-12     	; 0xb1e <fun_func+0x44>
	//wait_key();
	key == 0xFF;
	
	while (key != 0x0E)
     b2a:	96 c0       	rjmp	.+300    	; 0xc58 <fun_func+0x17e>
	{	
		CLEAR_SCREEN();
     b2c:	0e 94 4f 02 	call	0x49e	; 0x49e <CLEAR_SCREEN>
		
		uint8_t total_score = 0;			// Initialize the total score
     b30:	1a 82       	std	Y+2, r1	; 0x02
		char *says = 0;
     b32:	1e 82       	std	Y+6, r1	; 0x06
     b34:	1f 82       	std	Y+7, r1	; 0x07
		
		for (int i = 0; i < 3; i++)			// Play 3 rounds
     b36:	1b 82       	std	Y+3, r1	; 0x03
     b38:	1c 82       	std	Y+4, r1	; 0x04
     b3a:	39 c0       	rjmp	.+114    	; 0xbae <fun_func+0xd4>
		{
			OUT_STRING("Round ");
     b3c:	82 e7       	ldi	r24, 0x72	; 114
     b3e:	90 e2       	ldi	r25, 0x20	; 32
     b40:	0e 94 0a 02 	call	0x414	; 0x414 <OUT_STRING>
			OUT_CHAR((char) (i+1) + '0');
     b44:	8b 81       	ldd	r24, Y+3	; 0x03
     b46:	8f 5c       	subi	r24, 0xCF	; 207
     b48:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <OUT_CHAR>
			gen_seq(diff + i*2, says);
     b4c:	8b 81       	ldd	r24, Y+3	; 0x03
     b4e:	98 2f       	mov	r25, r24
     b50:	99 0f       	add	r25, r25
     b52:	8d 81       	ldd	r24, Y+5	; 0x05
     b54:	29 2f       	mov	r18, r25
     b56:	28 0f       	add	r18, r24
     b58:	8e 81       	ldd	r24, Y+6	; 0x06
     b5a:	9f 81       	ldd	r25, Y+7	; 0x07
     b5c:	bc 01       	movw	r22, r24
     b5e:	82 2f       	mov	r24, r18
     b60:	0e 94 38 06 	call	0xc70	; 0xc70 <gen_seq>
			wait_key();
     b64:	0e 94 9a 06 	call	0xd34	; 0xd34 <wait_key>
			CLEAR_SCREEN();
     b68:	0e 94 4f 02 	call	0x49e	; 0x49e <CLEAR_SCREEN>
			total_score += simon_says(diff + i*2, 14-i*3, says);	// Play game & sum scores
     b6c:	9b 81       	ldd	r25, Y+3	; 0x03
     b6e:	89 2f       	mov	r24, r25
     b70:	88 0f       	add	r24, r24
     b72:	89 0f       	add	r24, r25
     b74:	81 95       	neg	r24
     b76:	3e e0       	ldi	r19, 0x0E	; 14
     b78:	38 0f       	add	r19, r24
     b7a:	8b 81       	ldd	r24, Y+3	; 0x03
     b7c:	98 2f       	mov	r25, r24
     b7e:	99 0f       	add	r25, r25
     b80:	8d 81       	ldd	r24, Y+5	; 0x05
     b82:	29 2f       	mov	r18, r25
     b84:	28 0f       	add	r18, r24
     b86:	8e 81       	ldd	r24, Y+6	; 0x06
     b88:	9f 81       	ldd	r25, Y+7	; 0x07
     b8a:	ac 01       	movw	r20, r24
     b8c:	63 2f       	mov	r22, r19
     b8e:	82 2f       	mov	r24, r18
     b90:	0e 94 b6 06 	call	0xd6c	; 0xd6c <simon_says>
     b94:	98 2f       	mov	r25, r24
     b96:	8a 81       	ldd	r24, Y+2	; 0x02
     b98:	89 0f       	add	r24, r25
     b9a:	8a 83       	std	Y+2, r24	; 0x02
			keyhold();						// Wait for key press to continue to next round
     b9c:	0e 94 89 04 	call	0x912	; 0x912 <keyhold>
			CLEAR_SCREEN();
     ba0:	0e 94 4f 02 	call	0x49e	; 0x49e <CLEAR_SCREEN>
		CLEAR_SCREEN();
		
		uint8_t total_score = 0;			// Initialize the total score
		char *says = 0;
		
		for (int i = 0; i < 3; i++)			// Play 3 rounds
     ba4:	8b 81       	ldd	r24, Y+3	; 0x03
     ba6:	9c 81       	ldd	r25, Y+4	; 0x04
     ba8:	01 96       	adiw	r24, 0x01	; 1
     baa:	8b 83       	std	Y+3, r24	; 0x03
     bac:	9c 83       	std	Y+4, r25	; 0x04
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	9c 81       	ldd	r25, Y+4	; 0x04
     bb2:	03 97       	sbiw	r24, 0x03	; 3
     bb4:	1c f2       	brlt	.-122    	; 0xb3c <fun_func+0x62>
			total_score += simon_says(diff + i*2, 14-i*3, says);	// Play game & sum scores
			keyhold();						// Wait for key press to continue to next round
			CLEAR_SCREEN();
		}
		
		OUT_STRING("Total Score: ");		// Output total score
     bb6:	89 e7       	ldi	r24, 0x79	; 121
     bb8:	90 e2       	ldi	r25, 0x20	; 32
     bba:	0e 94 0a 02 	call	0x414	; 0x414 <OUT_STRING>
		if (total_score >= 20)				// Handles various ranges of numbers
     bbe:	8a 81       	ldd	r24, Y+2	; 0x02
     bc0:	84 31       	cpi	r24, 0x14	; 20
     bc2:	b8 f0       	brcs	.+46     	; 0xbf2 <fun_func+0x118>
		{
			uint8_t d1 = total_score/10;
     bc4:	9a 81       	ldd	r25, Y+2	; 0x02
     bc6:	8d ec       	ldi	r24, 0xCD	; 205
     bc8:	98 9f       	mul	r25, r24
     bca:	81 2d       	mov	r24, r1
     bcc:	11 24       	eor	r1, r1
     bce:	86 95       	lsr	r24
     bd0:	86 95       	lsr	r24
     bd2:	86 95       	lsr	r24
     bd4:	88 87       	std	Y+8, r24	; 0x08
			uint8_t d2 = total_score - 20;
     bd6:	8a 81       	ldd	r24, Y+2	; 0x02
     bd8:	84 51       	subi	r24, 0x14	; 20
     bda:	89 87       	std	Y+9, r24	; 0x09
			OUT_CHAR(conv_nibble(d1));
     bdc:	88 85       	ldd	r24, Y+8	; 0x08
     bde:	0e 94 c1 03 	call	0x782	; 0x782 <conv_nibble>
     be2:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <OUT_CHAR>
			OUT_CHAR(conv_nibble(d2));
     be6:	89 85       	ldd	r24, Y+9	; 0x09
     be8:	0e 94 c1 03 	call	0x782	; 0x782 <conv_nibble>
     bec:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <OUT_CHAR>
     bf0:	21 c0       	rjmp	.+66     	; 0xc34 <fun_func+0x15a>
		}
		else if (total_score > 9 && total_score < 20)
     bf2:	8a 81       	ldd	r24, Y+2	; 0x02
     bf4:	8a 30       	cpi	r24, 0x0A	; 10
     bf6:	d0 f0       	brcs	.+52     	; 0xc2c <fun_func+0x152>
     bf8:	8a 81       	ldd	r24, Y+2	; 0x02
     bfa:	84 31       	cpi	r24, 0x14	; 20
     bfc:	b8 f4       	brcc	.+46     	; 0xc2c <fun_func+0x152>
		{
			uint8_t d1 = total_score/10;
     bfe:	9a 81       	ldd	r25, Y+2	; 0x02
     c00:	8d ec       	ldi	r24, 0xCD	; 205
     c02:	98 9f       	mul	r25, r24
     c04:	81 2d       	mov	r24, r1
     c06:	11 24       	eor	r1, r1
     c08:	86 95       	lsr	r24
     c0a:	86 95       	lsr	r24
     c0c:	86 95       	lsr	r24
     c0e:	8a 87       	std	Y+10, r24	; 0x0a
			uint8_t d2 = total_score - 10;
     c10:	8a 81       	ldd	r24, Y+2	; 0x02
     c12:	8a 50       	subi	r24, 0x0A	; 10
     c14:	8b 87       	std	Y+11, r24	; 0x0b
			OUT_CHAR(conv_nibble(d1));
     c16:	8a 85       	ldd	r24, Y+10	; 0x0a
     c18:	0e 94 c1 03 	call	0x782	; 0x782 <conv_nibble>
     c1c:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <OUT_CHAR>
			OUT_CHAR(conv_nibble(d2));
     c20:	8b 85       	ldd	r24, Y+11	; 0x0b
     c22:	0e 94 c1 03 	call	0x782	; 0x782 <conv_nibble>
     c26:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <OUT_CHAR>
			uint8_t d2 = total_score - 20;
			OUT_CHAR(conv_nibble(d1));
			OUT_CHAR(conv_nibble(d2));
		}
		else if (total_score > 9 && total_score < 20)
		{
     c2a:	04 c0       	rjmp	.+8      	; 0xc34 <fun_func+0x15a>
			uint8_t d2 = total_score - 10;
			OUT_CHAR(conv_nibble(d1));
			OUT_CHAR(conv_nibble(d2));
		} else
		{
			OUT_CHAR((char) total_score + '0');
     c2c:	8a 81       	ldd	r24, Y+2	; 0x02
     c2e:	80 5d       	subi	r24, 0xD0	; 208
     c30:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <OUT_CHAR>
		}
		long_delay();						// Wait before moving on to options
     c34:	0e 94 47 05 	call	0xa8e	; 0xa8e <long_delay>
		
		CLEAR_SCREEN();
     c38:	0e 94 4f 02 	call	0x49e	; 0x49e <CLEAR_SCREEN>
		OUT_STRING(quit);
     c3c:	80 91 19 20 	lds	r24, 0x2019	; 0x802019 <quit>
     c40:	90 91 1a 20 	lds	r25, 0x201A	; 0x80201a <quit+0x1>
     c44:	0e 94 0a 02 	call	0x414	; 0x414 <OUT_STRING>
		wait_key();
     c48:	0e 94 9a 06 	call	0xd34	; 0xd34 <wait_key>
		
		do 
		{									// Scan for keys
			key = keyscan();
     c4c:	0e 94 22 04 	call	0x844	; 0x844 <keyscan>
     c50:	89 83       	std	Y+1, r24	; 0x01
		} while (key == 0xFF);
     c52:	89 81       	ldd	r24, Y+1	; 0x01
     c54:	8f 3f       	cpi	r24, 0xFF	; 255
     c56:	d1 f3       	breq	.-12     	; 0xc4c <fun_func+0x172>
		key = keyscan();
	} while (key == 0xFF);
	//wait_key();
	key == 0xFF;
	
	while (key != 0x0E)
     c58:	89 81       	ldd	r24, Y+1	; 0x01
     c5a:	8e 30       	cpi	r24, 0x0E	; 14
     c5c:	09 f0       	breq	.+2      	; 0xc60 <fun_func+0x186>
     c5e:	66 cf       	rjmp	.-308    	; 0xb2c <fun_func+0x52>
		do 
		{									// Scan for keys
			key = keyscan();
		} while (key == 0xFF);
	}
	CLEAR_SCREEN();
     c60:	0e 94 4f 02 	call	0x49e	; 0x49e <CLEAR_SCREEN>
}
     c64:	2b 96       	adiw	r28, 0x0b	; 11
     c66:	cd bf       	out	0x3d, r28	; 61
     c68:	de bf       	out	0x3e, r29	; 62
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	08 95       	ret

00000c70 <gen_seq>:

void gen_seq(uint8_t diff, char *says)
{
     c70:	0f 93       	push	r16
     c72:	1f 93       	push	r17
     c74:	cf 93       	push	r28
     c76:	df 93       	push	r29
     c78:	cd b7       	in	r28, 0x3d	; 61
     c7a:	de b7       	in	r29, 0x3e	; 62
     c7c:	2d 97       	sbiw	r28, 0x0d	; 13
     c7e:	cd bf       	out	0x3d, r28	; 61
     c80:	de bf       	out	0x3e, r29	; 62
     c82:	8f 83       	std	Y+7, r24	; 0x07
     c84:	68 87       	std	Y+8, r22	; 0x08
     c86:	79 87       	std	Y+9, r23	; 0x09
	for (int i = 0; i < diff; i++)
     c88:	19 82       	std	Y+1, r1	; 0x01
     c8a:	1a 82       	std	Y+2, r1	; 0x02
     c8c:	19 c0       	rjmp	.+50     	; 0xcc0 <gen_seq+0x50>
	{
		says[i] = (rand() % 4) + 'A';
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
     c90:	9a 81       	ldd	r25, Y+2	; 0x02
     c92:	28 85       	ldd	r18, Y+8	; 0x08
     c94:	39 85       	ldd	r19, Y+9	; 0x09
     c96:	89 01       	movw	r16, r18
     c98:	08 0f       	add	r16, r24
     c9a:	19 1f       	adc	r17, r25
     c9c:	0e 94 b2 09 	call	0x1364	; 0x1364 <rand>
     ca0:	83 70       	andi	r24, 0x03	; 3
     ca2:	90 78       	andi	r25, 0x80	; 128
     ca4:	99 23       	and	r25, r25
     ca6:	24 f4       	brge	.+8      	; 0xcb0 <gen_seq+0x40>
     ca8:	01 97       	sbiw	r24, 0x01	; 1
     caa:	8c 6f       	ori	r24, 0xFC	; 252
     cac:	9f 6f       	ori	r25, 0xFF	; 255
     cae:	01 96       	adiw	r24, 0x01	; 1
     cb0:	8f 5b       	subi	r24, 0xBF	; 191
     cb2:	f8 01       	movw	r30, r16
     cb4:	80 83       	st	Z, r24
	CLEAR_SCREEN();
}

void gen_seq(uint8_t diff, char *says)
{
	for (int i = 0; i < diff; i++)
     cb6:	89 81       	ldd	r24, Y+1	; 0x01
     cb8:	9a 81       	ldd	r25, Y+2	; 0x02
     cba:	01 96       	adiw	r24, 0x01	; 1
     cbc:	89 83       	std	Y+1, r24	; 0x01
     cbe:	9a 83       	std	Y+2, r25	; 0x02
     cc0:	8f 81       	ldd	r24, Y+7	; 0x07
     cc2:	28 2f       	mov	r18, r24
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	9a 81       	ldd	r25, Y+2	; 0x02
     cca:	82 17       	cp	r24, r18
     ccc:	93 07       	cpc	r25, r19
     cce:	fc f2       	brlt	.-66     	; 0xc8e <gen_seq+0x1e>
	{
		says[i] = (rand() % 4) + 'A';
	}
	int nulls = rand() % diff;
     cd0:	0e 94 b2 09 	call	0x1364	; 0x1364 <rand>
     cd4:	2f 81       	ldd	r18, Y+7	; 0x07
     cd6:	22 2f       	mov	r18, r18
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	b9 01       	movw	r22, r18
     cdc:	0e 94 3f 09 	call	0x127e	; 0x127e <__divmodhi4>
     ce0:	8d 83       	std	Y+5, r24	; 0x05
     ce2:	9e 83       	std	Y+6, r25	; 0x06
	for (int i = 0; i < nulls; i++)
     ce4:	1b 82       	std	Y+3, r1	; 0x03
     ce6:	1c 82       	std	Y+4, r1	; 0x04
     ce8:	15 c0       	rjmp	.+42     	; 0xd14 <gen_seq+0xa4>
	{
		says[rand() % diff] = '0';
     cea:	0e 94 b2 09 	call	0x1364	; 0x1364 <rand>
     cee:	2f 81       	ldd	r18, Y+7	; 0x07
     cf0:	22 2f       	mov	r18, r18
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	b9 01       	movw	r22, r18
     cf6:	0e 94 3f 09 	call	0x127e	; 0x127e <__divmodhi4>
     cfa:	9c 01       	movw	r18, r24
     cfc:	88 85       	ldd	r24, Y+8	; 0x08
     cfe:	99 85       	ldd	r25, Y+9	; 0x09
     d00:	82 0f       	add	r24, r18
     d02:	93 1f       	adc	r25, r19
     d04:	20 e3       	ldi	r18, 0x30	; 48
     d06:	fc 01       	movw	r30, r24
     d08:	20 83       	st	Z, r18
	for (int i = 0; i < diff; i++)
	{
		says[i] = (rand() % 4) + 'A';
	}
	int nulls = rand() % diff;
	for (int i = 0; i < nulls; i++)
     d0a:	8b 81       	ldd	r24, Y+3	; 0x03
     d0c:	9c 81       	ldd	r25, Y+4	; 0x04
     d0e:	01 96       	adiw	r24, 0x01	; 1
     d10:	8b 83       	std	Y+3, r24	; 0x03
     d12:	9c 83       	std	Y+4, r25	; 0x04
     d14:	2b 81       	ldd	r18, Y+3	; 0x03
     d16:	3c 81       	ldd	r19, Y+4	; 0x04
     d18:	8d 81       	ldd	r24, Y+5	; 0x05
     d1a:	9e 81       	ldd	r25, Y+6	; 0x06
     d1c:	28 17       	cp	r18, r24
     d1e:	39 07       	cpc	r19, r25
     d20:	24 f3       	brlt	.-56     	; 0xcea <gen_seq+0x7a>
	{
		says[rand() % diff] = '0';
	}
	asm volatile ("nop");
     d22:	00 00       	nop
}
     d24:	2d 96       	adiw	r28, 0x0d	; 13
     d26:	cd bf       	out	0x3d, r28	; 61
     d28:	de bf       	out	0x3e, r29	; 62
     d2a:	df 91       	pop	r29
     d2c:	cf 91       	pop	r28
     d2e:	1f 91       	pop	r17
     d30:	0f 91       	pop	r16
     d32:	08 95       	ret

00000d34 <wait_key>:

void wait_key(void)
{
     d34:	cf 93       	push	r28
     d36:	df 93       	push	r29
     d38:	1f 92       	push	r1
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
	rough_delay();
     d3e:	0e 94 2e 05 	call	0xa5c	; 0xa5c <rough_delay>
	OUT_COMMAND(0xC0);			// Break line first
     d42:	80 ec       	ldi	r24, 0xC0	; 192
     d44:	0e 94 29 02 	call	0x452	; 0x452 <OUT_COMMAND>
	OUT_STRING(start);			// Output 'start' string
     d48:	80 91 17 20 	lds	r24, 0x2017	; 0x802017 <start>
     d4c:	90 91 18 20 	lds	r25, 0x2018	; 0x802018 <start+0x1>
     d50:	0e 94 0a 02 	call	0x414	; 0x414 <OUT_STRING>
	uint8_t key;			
	do
	{							// Wait for a key press
		key = keyscan();
     d54:	0e 94 22 04 	call	0x844	; 0x844 <keyscan>
     d58:	89 83       	std	Y+1, r24	; 0x01
	} while (key == 0xFF);
     d5a:	89 81       	ldd	r24, Y+1	; 0x01
     d5c:	8f 3f       	cpi	r24, 0xFF	; 255
     d5e:	d1 f3       	breq	.-12     	; 0xd54 <wait_key+0x20>
	keyhold();
     d60:	0e 94 89 04 	call	0x912	; 0x912 <keyhold>
}
     d64:	0f 90       	pop	r0
     d66:	df 91       	pop	r29
     d68:	cf 91       	pop	r28
     d6a:	08 95       	ret

00000d6c <simon_says>:

uint8_t simon_says(uint8_t diff, uint8_t speed, char *says)
{
     d6c:	cf 93       	push	r28
     d6e:	df 93       	push	r29
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
     d74:	60 97       	sbiw	r28, 0x10	; 16
     d76:	cd bf       	out	0x3d, r28	; 61
     d78:	de bf       	out	0x3e, r29	; 62
     d7a:	8d 87       	std	Y+13, r24	; 0x0d
     d7c:	6e 87       	std	Y+14, r22	; 0x0e
     d7e:	4f 87       	std	Y+15, r20	; 0x0f
     d80:	58 8b       	std	Y+16, r21	; 0x10
	uint8_t key = 0xFF, score = 0;		// Initialize variables
     d82:	8f ef       	ldi	r24, 0xFF	; 255
     d84:	89 83       	std	Y+1, r24	; 0x01
     d86:	1a 82       	std	Y+2, r1	; 0x02
	for (uint8_t i = 0; i < diff; i++)	// 'diff'iculty determines length of Round
     d88:	1b 82       	std	Y+3, r1	; 0x03
     d8a:	c9 c0       	rjmp	.+402    	; 0xf1e <simon_says+0x1b2>
	{
		if (says[i] >= 'A' && says[i] <= 'D')					// Simon said
     d8c:	8b 81       	ldd	r24, Y+3	; 0x03
     d8e:	88 2f       	mov	r24, r24
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	2f 85       	ldd	r18, Y+15	; 0x0f
     d94:	38 89       	ldd	r19, Y+16	; 0x10
     d96:	82 0f       	add	r24, r18
     d98:	93 1f       	adc	r25, r19
     d9a:	fc 01       	movw	r30, r24
     d9c:	80 81       	ld	r24, Z
     d9e:	81 34       	cpi	r24, 0x41	; 65
     da0:	08 f4       	brcc	.+2      	; 0xda4 <simon_says+0x38>
     da2:	68 c0       	rjmp	.+208    	; 0xe74 <simon_says+0x108>
     da4:	8b 81       	ldd	r24, Y+3	; 0x03
     da6:	88 2f       	mov	r24, r24
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	2f 85       	ldd	r18, Y+15	; 0x0f
     dac:	38 89       	ldd	r19, Y+16	; 0x10
     dae:	82 0f       	add	r24, r18
     db0:	93 1f       	adc	r25, r19
     db2:	fc 01       	movw	r30, r24
     db4:	80 81       	ld	r24, Z
     db6:	85 34       	cpi	r24, 0x45	; 69
     db8:	08 f0       	brcs	.+2      	; 0xdbc <simon_says+0x50>
     dba:	5c c0       	rjmp	.+184    	; 0xe74 <simon_says+0x108>
		{
			OUT_STRING("Simon says: ");
     dbc:	87 e8       	ldi	r24, 0x87	; 135
     dbe:	90 e2       	ldi	r25, 0x20	; 32
     dc0:	0e 94 0a 02 	call	0x414	; 0x414 <OUT_STRING>
			OUT_CHAR(says[i]);
     dc4:	8b 81       	ldd	r24, Y+3	; 0x03
     dc6:	88 2f       	mov	r24, r24
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	2f 85       	ldd	r18, Y+15	; 0x0f
     dcc:	38 89       	ldd	r19, Y+16	; 0x10
     dce:	82 0f       	add	r24, r18
     dd0:	93 1f       	adc	r25, r19
     dd2:	fc 01       	movw	r30, r24
     dd4:	80 81       	ld	r24, Z
     dd6:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <OUT_CHAR>
			keyhold();
     dda:	0e 94 89 04 	call	0x912	; 0x912 <keyhold>
			for (int i = 0; i < speed; i++)			// Speed determines how long player
     dde:	1c 82       	std	Y+4, r1	; 0x04
     de0:	1d 82       	std	Y+5, r1	; 0x05
     de2:	19 c0       	rjmp	.+50     	; 0xe16 <simon_says+0xaa>
			{										//	has to enter a key
				for (int j = 0; j < 1000; j++)
     de4:	1e 82       	std	Y+6, r1	; 0x06
     de6:	1f 82       	std	Y+7, r1	; 0x07
     de8:	0c c0       	rjmp	.+24     	; 0xe02 <simon_says+0x96>
				{
					key = keyscan();
     dea:	0e 94 22 04 	call	0x844	; 0x844 <keyscan>
     dee:	89 83       	std	Y+1, r24	; 0x01
					if (key != 0xFF) break;
     df0:	89 81       	ldd	r24, Y+1	; 0x01
     df2:	8f 3f       	cpi	r24, 0xFF	; 255
     df4:	09 f0       	breq	.+2      	; 0xdf8 <simon_says+0x8c>
     df6:	0a c0       	rjmp	.+20     	; 0xe0c <simon_says+0xa0>
			OUT_STRING("Simon says: ");
			OUT_CHAR(says[i]);
			keyhold();
			for (int i = 0; i < speed; i++)			// Speed determines how long player
			{										//	has to enter a key
				for (int j = 0; j < 1000; j++)
     df8:	8e 81       	ldd	r24, Y+6	; 0x06
     dfa:	9f 81       	ldd	r25, Y+7	; 0x07
     dfc:	01 96       	adiw	r24, 0x01	; 1
     dfe:	8e 83       	std	Y+6, r24	; 0x06
     e00:	9f 83       	std	Y+7, r25	; 0x07
     e02:	8e 81       	ldd	r24, Y+6	; 0x06
     e04:	9f 81       	ldd	r25, Y+7	; 0x07
     e06:	88 3e       	cpi	r24, 0xE8	; 232
     e08:	93 40       	sbci	r25, 0x03	; 3
     e0a:	7c f3       	brlt	.-34     	; 0xdea <simon_says+0x7e>
		if (says[i] >= 'A' && says[i] <= 'D')					// Simon said
		{
			OUT_STRING("Simon says: ");
			OUT_CHAR(says[i]);
			keyhold();
			for (int i = 0; i < speed; i++)			// Speed determines how long player
     e0c:	8c 81       	ldd	r24, Y+4	; 0x04
     e0e:	9d 81       	ldd	r25, Y+5	; 0x05
     e10:	01 96       	adiw	r24, 0x01	; 1
     e12:	8c 83       	std	Y+4, r24	; 0x04
     e14:	9d 83       	std	Y+5, r25	; 0x05
     e16:	8e 85       	ldd	r24, Y+14	; 0x0e
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	8c 81       	ldd	r24, Y+4	; 0x04
     e1e:	9d 81       	ldd	r25, Y+5	; 0x05
     e20:	82 17       	cp	r24, r18
     e22:	93 07       	cpc	r25, r19
     e24:	fc f2       	brlt	.-66     	; 0xde4 <simon_says+0x78>
				{
					key = keyscan();
					if (key != 0xFF) break;
				}
			}
			if (conv_nibble(key & 0x0F) == says[i])	// Check if correct action
     e26:	89 81       	ldd	r24, Y+1	; 0x01
     e28:	8f 70       	andi	r24, 0x0F	; 15
     e2a:	0e 94 c1 03 	call	0x782	; 0x782 <conv_nibble>
     e2e:	48 2f       	mov	r20, r24
     e30:	8b 81       	ldd	r24, Y+3	; 0x03
     e32:	88 2f       	mov	r24, r24
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	2f 85       	ldd	r18, Y+15	; 0x0f
     e38:	38 89       	ldd	r19, Y+16	; 0x10
     e3a:	82 0f       	add	r24, r18
     e3c:	93 1f       	adc	r25, r19
     e3e:	fc 01       	movw	r30, r24
     e40:	80 81       	ld	r24, Z
     e42:	48 17       	cp	r20, r24
     e44:	59 f4       	brne	.+22     	; 0xe5c <simon_says+0xf0>
			{
				OUT_COMMAND(0xC0);
     e46:	80 ec       	ldi	r24, 0xC0	; 192
     e48:	0e 94 29 02 	call	0x452	; 0x452 <OUT_COMMAND>
				OUT_STRING("CORRECT! :-)");
     e4c:	84 e9       	ldi	r24, 0x94	; 148
     e4e:	90 e2       	ldi	r25, 0x20	; 32
     e50:	0e 94 0a 02 	call	0x414	; 0x414 <OUT_STRING>
				score += 1;
     e54:	8a 81       	ldd	r24, Y+2	; 0x02
     e56:	8f 5f       	subi	r24, 0xFF	; 255
     e58:	8a 83       	std	Y+2, r24	; 0x02
     e5a:	07 c0       	rjmp	.+14     	; 0xe6a <simon_says+0xfe>
			}
			else
			{
				OUT_COMMAND(0xC0);
     e5c:	80 ec       	ldi	r24, 0xC0	; 192
     e5e:	0e 94 29 02 	call	0x452	; 0x452 <OUT_COMMAND>
				OUT_STRING("WRONG! :-(");
     e62:	81 ea       	ldi	r24, 0xA1	; 161
     e64:	90 e2       	ldi	r25, 0x20	; 32
     e66:	0e 94 0a 02 	call	0x414	; 0x414 <OUT_STRING>
			}
			long_delay();							// Wait before moving to next letter
     e6a:	0e 94 47 05 	call	0xa8e	; 0xa8e <long_delay>
			CLEAR_SCREEN();
     e6e:	0e 94 4f 02 	call	0x49e	; 0x49e <CLEAR_SCREEN>
     e72:	52 c0       	rjmp	.+164    	; 0xf18 <simon_says+0x1ac>
		}
		else
		{											// Simon DID NOT say
			char c = (rand() % 4) + 'A';
     e74:	0e 94 b2 09 	call	0x1364	; 0x1364 <rand>
     e78:	83 70       	andi	r24, 0x03	; 3
     e7a:	90 78       	andi	r25, 0x80	; 128
     e7c:	99 23       	and	r25, r25
     e7e:	24 f4       	brge	.+8      	; 0xe88 <simon_says+0x11c>
     e80:	01 97       	sbiw	r24, 0x01	; 1
     e82:	8c 6f       	ori	r24, 0xFC	; 252
     e84:	9f 6f       	ori	r25, 0xFF	; 255
     e86:	01 96       	adiw	r24, 0x01	; 1
     e88:	8f 5b       	subi	r24, 0xBF	; 191
     e8a:	8c 87       	std	Y+12, r24	; 0x0c
			OUT_STRING("Press this: ");
     e8c:	8c ea       	ldi	r24, 0xAC	; 172
     e8e:	90 e2       	ldi	r25, 0x20	; 32
     e90:	0e 94 0a 02 	call	0x414	; 0x414 <OUT_STRING>
			OUT_CHAR(c);
     e94:	8c 85       	ldd	r24, Y+12	; 0x0c
     e96:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <OUT_CHAR>
			keyhold();
     e9a:	0e 94 89 04 	call	0x912	; 0x912 <keyhold>
			for (int i = 0; i < speed; i++)			// Speed determines how long player
     e9e:	18 86       	std	Y+8, r1	; 0x08
     ea0:	19 86       	std	Y+9, r1	; 0x09
     ea2:	19 c0       	rjmp	.+50     	; 0xed6 <simon_says+0x16a>
			{										//	has to enter a key
				for (int j = 0; j < 1000; j++)
     ea4:	1a 86       	std	Y+10, r1	; 0x0a
     ea6:	1b 86       	std	Y+11, r1	; 0x0b
     ea8:	0c c0       	rjmp	.+24     	; 0xec2 <simon_says+0x156>
				{
					key = keyscan();
     eaa:	0e 94 22 04 	call	0x844	; 0x844 <keyscan>
     eae:	89 83       	std	Y+1, r24	; 0x01
					if (key != 0xFF) break;
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	8f 3f       	cpi	r24, 0xFF	; 255
     eb4:	09 f0       	breq	.+2      	; 0xeb8 <simon_says+0x14c>
     eb6:	0a c0       	rjmp	.+20     	; 0xecc <simon_says+0x160>
			OUT_STRING("Press this: ");
			OUT_CHAR(c);
			keyhold();
			for (int i = 0; i < speed; i++)			// Speed determines how long player
			{										//	has to enter a key
				for (int j = 0; j < 1000; j++)
     eb8:	8a 85       	ldd	r24, Y+10	; 0x0a
     eba:	9b 85       	ldd	r25, Y+11	; 0x0b
     ebc:	01 96       	adiw	r24, 0x01	; 1
     ebe:	8a 87       	std	Y+10, r24	; 0x0a
     ec0:	9b 87       	std	Y+11, r25	; 0x0b
     ec2:	8a 85       	ldd	r24, Y+10	; 0x0a
     ec4:	9b 85       	ldd	r25, Y+11	; 0x0b
     ec6:	88 3e       	cpi	r24, 0xE8	; 232
     ec8:	93 40       	sbci	r25, 0x03	; 3
     eca:	7c f3       	brlt	.-34     	; 0xeaa <simon_says+0x13e>
		{											// Simon DID NOT say
			char c = (rand() % 4) + 'A';
			OUT_STRING("Press this: ");
			OUT_CHAR(c);
			keyhold();
			for (int i = 0; i < speed; i++)			// Speed determines how long player
     ecc:	88 85       	ldd	r24, Y+8	; 0x08
     ece:	99 85       	ldd	r25, Y+9	; 0x09
     ed0:	01 96       	adiw	r24, 0x01	; 1
     ed2:	88 87       	std	Y+8, r24	; 0x08
     ed4:	99 87       	std	Y+9, r25	; 0x09
     ed6:	8e 85       	ldd	r24, Y+14	; 0x0e
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	88 85       	ldd	r24, Y+8	; 0x08
     ede:	99 85       	ldd	r25, Y+9	; 0x09
     ee0:	82 17       	cp	r24, r18
     ee2:	93 07       	cpc	r25, r19
     ee4:	fc f2       	brlt	.-66     	; 0xea4 <simon_says+0x138>
				{
					key = keyscan();
					if (key != 0xFF) break;
				}
			}
			if (key == 0xFF)						// Check if correct action
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
     ee8:	8f 3f       	cpi	r24, 0xFF	; 255
     eea:	59 f4       	brne	.+22     	; 0xf02 <simon_says+0x196>
			{
				OUT_COMMAND(0xC0);
     eec:	80 ec       	ldi	r24, 0xC0	; 192
     eee:	0e 94 29 02 	call	0x452	; 0x452 <OUT_COMMAND>
				OUT_STRING("Good Job!");
     ef2:	89 eb       	ldi	r24, 0xB9	; 185
     ef4:	90 e2       	ldi	r25, 0x20	; 32
     ef6:	0e 94 0a 02 	call	0x414	; 0x414 <OUT_STRING>
				score += 1;
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	8f 5f       	subi	r24, 0xFF	; 255
     efe:	8a 83       	std	Y+2, r24	; 0x02
     f00:	07 c0       	rjmp	.+14     	; 0xf10 <simon_says+0x1a4>
			}
			else
			{
				OUT_COMMAND(0xC0);
     f02:	80 ec       	ldi	r24, 0xC0	; 192
     f04:	0e 94 29 02 	call	0x452	; 0x452 <OUT_COMMAND>
				OUT_STRING("Simon didn't say");
     f08:	83 ec       	ldi	r24, 0xC3	; 195
     f0a:	90 e2       	ldi	r25, 0x20	; 32
     f0c:	0e 94 0a 02 	call	0x414	; 0x414 <OUT_STRING>
			}
			long_delay();							// Wait before moving to next letter
     f10:	0e 94 47 05 	call	0xa8e	; 0xa8e <long_delay>
			CLEAR_SCREEN();
     f14:	0e 94 4f 02 	call	0x49e	; 0x49e <CLEAR_SCREEN>
}

uint8_t simon_says(uint8_t diff, uint8_t speed, char *says)
{
	uint8_t key = 0xFF, score = 0;		// Initialize variables
	for (uint8_t i = 0; i < diff; i++)	// 'diff'iculty determines length of Round
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
     f1a:	8f 5f       	subi	r24, 0xFF	; 255
     f1c:	8b 83       	std	Y+3, r24	; 0x03
     f1e:	9b 81       	ldd	r25, Y+3	; 0x03
     f20:	8d 85       	ldd	r24, Y+13	; 0x0d
     f22:	98 17       	cp	r25, r24
     f24:	08 f4       	brcc	.+2      	; 0xf28 <simon_says+0x1bc>
     f26:	32 cf       	rjmp	.-412    	; 0xd8c <simon_says+0x20>
			}
			long_delay();							// Wait before moving to next letter
			CLEAR_SCREEN();
		}
	}
	OUT_STRING("Score: ");							// Output Round score
     f28:	84 ed       	ldi	r24, 0xD4	; 212
     f2a:	90 e2       	ldi	r25, 0x20	; 32
     f2c:	0e 94 0a 02 	call	0x414	; 0x414 <OUT_STRING>
	OUT_CHAR((char) score + '0');
     f30:	8a 81       	ldd	r24, Y+2	; 0x02
     f32:	80 5d       	subi	r24, 0xD0	; 208
     f34:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <OUT_CHAR>
	OUT_COMMAND(0xC0);
     f38:	80 ec       	ldi	r24, 0xC0	; 192
     f3a:	0e 94 29 02 	call	0x452	; 0x452 <OUT_COMMAND>
	wait_key();										// Wait for player input before continuing
     f3e:	0e 94 9a 06 	call	0xd34	; 0xd34 <wait_key>
	return score;
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	60 96       	adiw	r28, 0x10	; 16
     f46:	cd bf       	out	0x3d, r28	; 61
     f48:	de bf       	out	0x3e, r29	; 62
     f4a:	df 91       	pop	r29
     f4c:	cf 91       	pop	r28
     f4e:	08 95       	ret

00000f50 <__subsf3>:
     f50:	50 58       	subi	r21, 0x80	; 128

00000f52 <__addsf3>:
     f52:	bb 27       	eor	r27, r27
     f54:	aa 27       	eor	r26, r26
     f56:	0e 94 c0 07 	call	0xf80	; 0xf80 <__addsf3x>
     f5a:	0c 94 98 08 	jmp	0x1130	; 0x1130 <__fp_round>
     f5e:	0e 94 8a 08 	call	0x1114	; 0x1114 <__fp_pscA>
     f62:	38 f0       	brcs	.+14     	; 0xf72 <__addsf3+0x20>
     f64:	0e 94 91 08 	call	0x1122	; 0x1122 <__fp_pscB>
     f68:	20 f0       	brcs	.+8      	; 0xf72 <__addsf3+0x20>
     f6a:	39 f4       	brne	.+14     	; 0xf7a <__addsf3+0x28>
     f6c:	9f 3f       	cpi	r25, 0xFF	; 255
     f6e:	19 f4       	brne	.+6      	; 0xf76 <__addsf3+0x24>
     f70:	26 f4       	brtc	.+8      	; 0xf7a <__addsf3+0x28>
     f72:	0c 94 87 08 	jmp	0x110e	; 0x110e <__fp_nan>
     f76:	0e f4       	brtc	.+2      	; 0xf7a <__addsf3+0x28>
     f78:	e0 95       	com	r30
     f7a:	e7 fb       	bst	r30, 7
     f7c:	0c 94 81 08 	jmp	0x1102	; 0x1102 <__fp_inf>

00000f80 <__addsf3x>:
     f80:	e9 2f       	mov	r30, r25
     f82:	0e 94 a9 08 	call	0x1152	; 0x1152 <__fp_split3>
     f86:	58 f3       	brcs	.-42     	; 0xf5e <__addsf3+0xc>
     f88:	ba 17       	cp	r27, r26
     f8a:	62 07       	cpc	r22, r18
     f8c:	73 07       	cpc	r23, r19
     f8e:	84 07       	cpc	r24, r20
     f90:	95 07       	cpc	r25, r21
     f92:	20 f0       	brcs	.+8      	; 0xf9c <__addsf3x+0x1c>
     f94:	79 f4       	brne	.+30     	; 0xfb4 <__addsf3x+0x34>
     f96:	a6 f5       	brtc	.+104    	; 0x1000 <__addsf3x+0x80>
     f98:	0c 94 cb 08 	jmp	0x1196	; 0x1196 <__fp_zero>
     f9c:	0e f4       	brtc	.+2      	; 0xfa0 <__addsf3x+0x20>
     f9e:	e0 95       	com	r30
     fa0:	0b 2e       	mov	r0, r27
     fa2:	ba 2f       	mov	r27, r26
     fa4:	a0 2d       	mov	r26, r0
     fa6:	0b 01       	movw	r0, r22
     fa8:	b9 01       	movw	r22, r18
     faa:	90 01       	movw	r18, r0
     fac:	0c 01       	movw	r0, r24
     fae:	ca 01       	movw	r24, r20
     fb0:	a0 01       	movw	r20, r0
     fb2:	11 24       	eor	r1, r1
     fb4:	ff 27       	eor	r31, r31
     fb6:	59 1b       	sub	r21, r25
     fb8:	99 f0       	breq	.+38     	; 0xfe0 <__addsf3x+0x60>
     fba:	59 3f       	cpi	r21, 0xF9	; 249
     fbc:	50 f4       	brcc	.+20     	; 0xfd2 <__addsf3x+0x52>
     fbe:	50 3e       	cpi	r21, 0xE0	; 224
     fc0:	68 f1       	brcs	.+90     	; 0x101c <__addsf3x+0x9c>
     fc2:	1a 16       	cp	r1, r26
     fc4:	f0 40       	sbci	r31, 0x00	; 0
     fc6:	a2 2f       	mov	r26, r18
     fc8:	23 2f       	mov	r18, r19
     fca:	34 2f       	mov	r19, r20
     fcc:	44 27       	eor	r20, r20
     fce:	58 5f       	subi	r21, 0xF8	; 248
     fd0:	f3 cf       	rjmp	.-26     	; 0xfb8 <__addsf3x+0x38>
     fd2:	46 95       	lsr	r20
     fd4:	37 95       	ror	r19
     fd6:	27 95       	ror	r18
     fd8:	a7 95       	ror	r26
     fda:	f0 40       	sbci	r31, 0x00	; 0
     fdc:	53 95       	inc	r21
     fde:	c9 f7       	brne	.-14     	; 0xfd2 <__addsf3x+0x52>
     fe0:	7e f4       	brtc	.+30     	; 0x1000 <__addsf3x+0x80>
     fe2:	1f 16       	cp	r1, r31
     fe4:	ba 0b       	sbc	r27, r26
     fe6:	62 0b       	sbc	r22, r18
     fe8:	73 0b       	sbc	r23, r19
     fea:	84 0b       	sbc	r24, r20
     fec:	ba f0       	brmi	.+46     	; 0x101c <__addsf3x+0x9c>
     fee:	91 50       	subi	r25, 0x01	; 1
     ff0:	a1 f0       	breq	.+40     	; 0x101a <__addsf3x+0x9a>
     ff2:	ff 0f       	add	r31, r31
     ff4:	bb 1f       	adc	r27, r27
     ff6:	66 1f       	adc	r22, r22
     ff8:	77 1f       	adc	r23, r23
     ffa:	88 1f       	adc	r24, r24
     ffc:	c2 f7       	brpl	.-16     	; 0xfee <__addsf3x+0x6e>
     ffe:	0e c0       	rjmp	.+28     	; 0x101c <__addsf3x+0x9c>
    1000:	ba 0f       	add	r27, r26
    1002:	62 1f       	adc	r22, r18
    1004:	73 1f       	adc	r23, r19
    1006:	84 1f       	adc	r24, r20
    1008:	48 f4       	brcc	.+18     	; 0x101c <__addsf3x+0x9c>
    100a:	87 95       	ror	r24
    100c:	77 95       	ror	r23
    100e:	67 95       	ror	r22
    1010:	b7 95       	ror	r27
    1012:	f7 95       	ror	r31
    1014:	9e 3f       	cpi	r25, 0xFE	; 254
    1016:	08 f0       	brcs	.+2      	; 0x101a <__addsf3x+0x9a>
    1018:	b0 cf       	rjmp	.-160    	; 0xf7a <__addsf3+0x28>
    101a:	93 95       	inc	r25
    101c:	88 0f       	add	r24, r24
    101e:	08 f0       	brcs	.+2      	; 0x1022 <__addsf3x+0xa2>
    1020:	99 27       	eor	r25, r25
    1022:	ee 0f       	add	r30, r30
    1024:	97 95       	ror	r25
    1026:	87 95       	ror	r24
    1028:	08 95       	ret

0000102a <__fixunssfsi>:
    102a:	0e 94 b1 08 	call	0x1162	; 0x1162 <__fp_splitA>
    102e:	88 f0       	brcs	.+34     	; 0x1052 <__fixunssfsi+0x28>
    1030:	9f 57       	subi	r25, 0x7F	; 127
    1032:	98 f0       	brcs	.+38     	; 0x105a <__fixunssfsi+0x30>
    1034:	b9 2f       	mov	r27, r25
    1036:	99 27       	eor	r25, r25
    1038:	b7 51       	subi	r27, 0x17	; 23
    103a:	b0 f0       	brcs	.+44     	; 0x1068 <__fixunssfsi+0x3e>
    103c:	e1 f0       	breq	.+56     	; 0x1076 <__fixunssfsi+0x4c>
    103e:	66 0f       	add	r22, r22
    1040:	77 1f       	adc	r23, r23
    1042:	88 1f       	adc	r24, r24
    1044:	99 1f       	adc	r25, r25
    1046:	1a f0       	brmi	.+6      	; 0x104e <__fixunssfsi+0x24>
    1048:	ba 95       	dec	r27
    104a:	c9 f7       	brne	.-14     	; 0x103e <__fixunssfsi+0x14>
    104c:	14 c0       	rjmp	.+40     	; 0x1076 <__fixunssfsi+0x4c>
    104e:	b1 30       	cpi	r27, 0x01	; 1
    1050:	91 f0       	breq	.+36     	; 0x1076 <__fixunssfsi+0x4c>
    1052:	0e 94 cb 08 	call	0x1196	; 0x1196 <__fp_zero>
    1056:	b1 e0       	ldi	r27, 0x01	; 1
    1058:	08 95       	ret
    105a:	0c 94 cb 08 	jmp	0x1196	; 0x1196 <__fp_zero>
    105e:	67 2f       	mov	r22, r23
    1060:	78 2f       	mov	r23, r24
    1062:	88 27       	eor	r24, r24
    1064:	b8 5f       	subi	r27, 0xF8	; 248
    1066:	39 f0       	breq	.+14     	; 0x1076 <__fixunssfsi+0x4c>
    1068:	b9 3f       	cpi	r27, 0xF9	; 249
    106a:	cc f3       	brlt	.-14     	; 0x105e <__fixunssfsi+0x34>
    106c:	86 95       	lsr	r24
    106e:	77 95       	ror	r23
    1070:	67 95       	ror	r22
    1072:	b3 95       	inc	r27
    1074:	d9 f7       	brne	.-10     	; 0x106c <__fixunssfsi+0x42>
    1076:	3e f4       	brtc	.+14     	; 0x1086 <__fixunssfsi+0x5c>
    1078:	90 95       	com	r25
    107a:	80 95       	com	r24
    107c:	70 95       	com	r23
    107e:	61 95       	neg	r22
    1080:	7f 4f       	sbci	r23, 0xFF	; 255
    1082:	8f 4f       	sbci	r24, 0xFF	; 255
    1084:	9f 4f       	sbci	r25, 0xFF	; 255
    1086:	08 95       	ret

00001088 <__floatunsisf>:
    1088:	e8 94       	clt
    108a:	09 c0       	rjmp	.+18     	; 0x109e <__floatsisf+0x12>

0000108c <__floatsisf>:
    108c:	97 fb       	bst	r25, 7
    108e:	3e f4       	brtc	.+14     	; 0x109e <__floatsisf+0x12>
    1090:	90 95       	com	r25
    1092:	80 95       	com	r24
    1094:	70 95       	com	r23
    1096:	61 95       	neg	r22
    1098:	7f 4f       	sbci	r23, 0xFF	; 255
    109a:	8f 4f       	sbci	r24, 0xFF	; 255
    109c:	9f 4f       	sbci	r25, 0xFF	; 255
    109e:	99 23       	and	r25, r25
    10a0:	a9 f0       	breq	.+42     	; 0x10cc <__floatsisf+0x40>
    10a2:	f9 2f       	mov	r31, r25
    10a4:	96 e9       	ldi	r25, 0x96	; 150
    10a6:	bb 27       	eor	r27, r27
    10a8:	93 95       	inc	r25
    10aa:	f6 95       	lsr	r31
    10ac:	87 95       	ror	r24
    10ae:	77 95       	ror	r23
    10b0:	67 95       	ror	r22
    10b2:	b7 95       	ror	r27
    10b4:	f1 11       	cpse	r31, r1
    10b6:	f8 cf       	rjmp	.-16     	; 0x10a8 <__floatsisf+0x1c>
    10b8:	fa f4       	brpl	.+62     	; 0x10f8 <__floatsisf+0x6c>
    10ba:	bb 0f       	add	r27, r27
    10bc:	11 f4       	brne	.+4      	; 0x10c2 <__floatsisf+0x36>
    10be:	60 ff       	sbrs	r22, 0
    10c0:	1b c0       	rjmp	.+54     	; 0x10f8 <__floatsisf+0x6c>
    10c2:	6f 5f       	subi	r22, 0xFF	; 255
    10c4:	7f 4f       	sbci	r23, 0xFF	; 255
    10c6:	8f 4f       	sbci	r24, 0xFF	; 255
    10c8:	9f 4f       	sbci	r25, 0xFF	; 255
    10ca:	16 c0       	rjmp	.+44     	; 0x10f8 <__floatsisf+0x6c>
    10cc:	88 23       	and	r24, r24
    10ce:	11 f0       	breq	.+4      	; 0x10d4 <__floatsisf+0x48>
    10d0:	96 e9       	ldi	r25, 0x96	; 150
    10d2:	11 c0       	rjmp	.+34     	; 0x10f6 <__floatsisf+0x6a>
    10d4:	77 23       	and	r23, r23
    10d6:	21 f0       	breq	.+8      	; 0x10e0 <__floatsisf+0x54>
    10d8:	9e e8       	ldi	r25, 0x8E	; 142
    10da:	87 2f       	mov	r24, r23
    10dc:	76 2f       	mov	r23, r22
    10de:	05 c0       	rjmp	.+10     	; 0x10ea <__floatsisf+0x5e>
    10e0:	66 23       	and	r22, r22
    10e2:	71 f0       	breq	.+28     	; 0x1100 <__floatsisf+0x74>
    10e4:	96 e8       	ldi	r25, 0x86	; 134
    10e6:	86 2f       	mov	r24, r22
    10e8:	70 e0       	ldi	r23, 0x00	; 0
    10ea:	60 e0       	ldi	r22, 0x00	; 0
    10ec:	2a f0       	brmi	.+10     	; 0x10f8 <__floatsisf+0x6c>
    10ee:	9a 95       	dec	r25
    10f0:	66 0f       	add	r22, r22
    10f2:	77 1f       	adc	r23, r23
    10f4:	88 1f       	adc	r24, r24
    10f6:	da f7       	brpl	.-10     	; 0x10ee <__floatsisf+0x62>
    10f8:	88 0f       	add	r24, r24
    10fa:	96 95       	lsr	r25
    10fc:	87 95       	ror	r24
    10fe:	97 f9       	bld	r25, 7
    1100:	08 95       	ret

00001102 <__fp_inf>:
    1102:	97 f9       	bld	r25, 7
    1104:	9f 67       	ori	r25, 0x7F	; 127
    1106:	80 e8       	ldi	r24, 0x80	; 128
    1108:	70 e0       	ldi	r23, 0x00	; 0
    110a:	60 e0       	ldi	r22, 0x00	; 0
    110c:	08 95       	ret

0000110e <__fp_nan>:
    110e:	9f ef       	ldi	r25, 0xFF	; 255
    1110:	80 ec       	ldi	r24, 0xC0	; 192
    1112:	08 95       	ret

00001114 <__fp_pscA>:
    1114:	00 24       	eor	r0, r0
    1116:	0a 94       	dec	r0
    1118:	16 16       	cp	r1, r22
    111a:	17 06       	cpc	r1, r23
    111c:	18 06       	cpc	r1, r24
    111e:	09 06       	cpc	r0, r25
    1120:	08 95       	ret

00001122 <__fp_pscB>:
    1122:	00 24       	eor	r0, r0
    1124:	0a 94       	dec	r0
    1126:	12 16       	cp	r1, r18
    1128:	13 06       	cpc	r1, r19
    112a:	14 06       	cpc	r1, r20
    112c:	05 06       	cpc	r0, r21
    112e:	08 95       	ret

00001130 <__fp_round>:
    1130:	09 2e       	mov	r0, r25
    1132:	03 94       	inc	r0
    1134:	00 0c       	add	r0, r0
    1136:	11 f4       	brne	.+4      	; 0x113c <__fp_round+0xc>
    1138:	88 23       	and	r24, r24
    113a:	52 f0       	brmi	.+20     	; 0x1150 <__fp_round+0x20>
    113c:	bb 0f       	add	r27, r27
    113e:	40 f4       	brcc	.+16     	; 0x1150 <__fp_round+0x20>
    1140:	bf 2b       	or	r27, r31
    1142:	11 f4       	brne	.+4      	; 0x1148 <__fp_round+0x18>
    1144:	60 ff       	sbrs	r22, 0
    1146:	04 c0       	rjmp	.+8      	; 0x1150 <__fp_round+0x20>
    1148:	6f 5f       	subi	r22, 0xFF	; 255
    114a:	7f 4f       	sbci	r23, 0xFF	; 255
    114c:	8f 4f       	sbci	r24, 0xFF	; 255
    114e:	9f 4f       	sbci	r25, 0xFF	; 255
    1150:	08 95       	ret

00001152 <__fp_split3>:
    1152:	57 fd       	sbrc	r21, 7
    1154:	90 58       	subi	r25, 0x80	; 128
    1156:	44 0f       	add	r20, r20
    1158:	55 1f       	adc	r21, r21
    115a:	59 f0       	breq	.+22     	; 0x1172 <__fp_splitA+0x10>
    115c:	5f 3f       	cpi	r21, 0xFF	; 255
    115e:	71 f0       	breq	.+28     	; 0x117c <__fp_splitA+0x1a>
    1160:	47 95       	ror	r20

00001162 <__fp_splitA>:
    1162:	88 0f       	add	r24, r24
    1164:	97 fb       	bst	r25, 7
    1166:	99 1f       	adc	r25, r25
    1168:	61 f0       	breq	.+24     	; 0x1182 <__fp_splitA+0x20>
    116a:	9f 3f       	cpi	r25, 0xFF	; 255
    116c:	79 f0       	breq	.+30     	; 0x118c <__fp_splitA+0x2a>
    116e:	87 95       	ror	r24
    1170:	08 95       	ret
    1172:	12 16       	cp	r1, r18
    1174:	13 06       	cpc	r1, r19
    1176:	14 06       	cpc	r1, r20
    1178:	55 1f       	adc	r21, r21
    117a:	f2 cf       	rjmp	.-28     	; 0x1160 <__fp_split3+0xe>
    117c:	46 95       	lsr	r20
    117e:	f1 df       	rcall	.-30     	; 0x1162 <__fp_splitA>
    1180:	08 c0       	rjmp	.+16     	; 0x1192 <__fp_splitA+0x30>
    1182:	16 16       	cp	r1, r22
    1184:	17 06       	cpc	r1, r23
    1186:	18 06       	cpc	r1, r24
    1188:	99 1f       	adc	r25, r25
    118a:	f1 cf       	rjmp	.-30     	; 0x116e <__fp_splitA+0xc>
    118c:	86 95       	lsr	r24
    118e:	71 05       	cpc	r23, r1
    1190:	61 05       	cpc	r22, r1
    1192:	08 94       	sec
    1194:	08 95       	ret

00001196 <__fp_zero>:
    1196:	e8 94       	clt

00001198 <__fp_szero>:
    1198:	bb 27       	eor	r27, r27
    119a:	66 27       	eor	r22, r22
    119c:	77 27       	eor	r23, r23
    119e:	cb 01       	movw	r24, r22
    11a0:	97 f9       	bld	r25, 7
    11a2:	08 95       	ret

000011a4 <__mulsf3>:
    11a4:	0e 94 e5 08 	call	0x11ca	; 0x11ca <__mulsf3x>
    11a8:	0c 94 98 08 	jmp	0x1130	; 0x1130 <__fp_round>
    11ac:	0e 94 8a 08 	call	0x1114	; 0x1114 <__fp_pscA>
    11b0:	38 f0       	brcs	.+14     	; 0x11c0 <__mulsf3+0x1c>
    11b2:	0e 94 91 08 	call	0x1122	; 0x1122 <__fp_pscB>
    11b6:	20 f0       	brcs	.+8      	; 0x11c0 <__mulsf3+0x1c>
    11b8:	95 23       	and	r25, r21
    11ba:	11 f0       	breq	.+4      	; 0x11c0 <__mulsf3+0x1c>
    11bc:	0c 94 81 08 	jmp	0x1102	; 0x1102 <__fp_inf>
    11c0:	0c 94 87 08 	jmp	0x110e	; 0x110e <__fp_nan>
    11c4:	11 24       	eor	r1, r1
    11c6:	0c 94 cc 08 	jmp	0x1198	; 0x1198 <__fp_szero>

000011ca <__mulsf3x>:
    11ca:	0e 94 a9 08 	call	0x1152	; 0x1152 <__fp_split3>
    11ce:	70 f3       	brcs	.-36     	; 0x11ac <__mulsf3+0x8>

000011d0 <__mulsf3_pse>:
    11d0:	95 9f       	mul	r25, r21
    11d2:	c1 f3       	breq	.-16     	; 0x11c4 <__mulsf3+0x20>
    11d4:	95 0f       	add	r25, r21
    11d6:	50 e0       	ldi	r21, 0x00	; 0
    11d8:	55 1f       	adc	r21, r21
    11da:	62 9f       	mul	r22, r18
    11dc:	f0 01       	movw	r30, r0
    11de:	72 9f       	mul	r23, r18
    11e0:	bb 27       	eor	r27, r27
    11e2:	f0 0d       	add	r31, r0
    11e4:	b1 1d       	adc	r27, r1
    11e6:	63 9f       	mul	r22, r19
    11e8:	aa 27       	eor	r26, r26
    11ea:	f0 0d       	add	r31, r0
    11ec:	b1 1d       	adc	r27, r1
    11ee:	aa 1f       	adc	r26, r26
    11f0:	64 9f       	mul	r22, r20
    11f2:	66 27       	eor	r22, r22
    11f4:	b0 0d       	add	r27, r0
    11f6:	a1 1d       	adc	r26, r1
    11f8:	66 1f       	adc	r22, r22
    11fa:	82 9f       	mul	r24, r18
    11fc:	22 27       	eor	r18, r18
    11fe:	b0 0d       	add	r27, r0
    1200:	a1 1d       	adc	r26, r1
    1202:	62 1f       	adc	r22, r18
    1204:	73 9f       	mul	r23, r19
    1206:	b0 0d       	add	r27, r0
    1208:	a1 1d       	adc	r26, r1
    120a:	62 1f       	adc	r22, r18
    120c:	83 9f       	mul	r24, r19
    120e:	a0 0d       	add	r26, r0
    1210:	61 1d       	adc	r22, r1
    1212:	22 1f       	adc	r18, r18
    1214:	74 9f       	mul	r23, r20
    1216:	33 27       	eor	r19, r19
    1218:	a0 0d       	add	r26, r0
    121a:	61 1d       	adc	r22, r1
    121c:	23 1f       	adc	r18, r19
    121e:	84 9f       	mul	r24, r20
    1220:	60 0d       	add	r22, r0
    1222:	21 1d       	adc	r18, r1
    1224:	82 2f       	mov	r24, r18
    1226:	76 2f       	mov	r23, r22
    1228:	6a 2f       	mov	r22, r26
    122a:	11 24       	eor	r1, r1
    122c:	9f 57       	subi	r25, 0x7F	; 127
    122e:	50 40       	sbci	r21, 0x00	; 0
    1230:	9a f0       	brmi	.+38     	; 0x1258 <__mulsf3_pse+0x88>
    1232:	f1 f0       	breq	.+60     	; 0x1270 <__mulsf3_pse+0xa0>
    1234:	88 23       	and	r24, r24
    1236:	4a f0       	brmi	.+18     	; 0x124a <__mulsf3_pse+0x7a>
    1238:	ee 0f       	add	r30, r30
    123a:	ff 1f       	adc	r31, r31
    123c:	bb 1f       	adc	r27, r27
    123e:	66 1f       	adc	r22, r22
    1240:	77 1f       	adc	r23, r23
    1242:	88 1f       	adc	r24, r24
    1244:	91 50       	subi	r25, 0x01	; 1
    1246:	50 40       	sbci	r21, 0x00	; 0
    1248:	a9 f7       	brne	.-22     	; 0x1234 <__mulsf3_pse+0x64>
    124a:	9e 3f       	cpi	r25, 0xFE	; 254
    124c:	51 05       	cpc	r21, r1
    124e:	80 f0       	brcs	.+32     	; 0x1270 <__mulsf3_pse+0xa0>
    1250:	0c 94 81 08 	jmp	0x1102	; 0x1102 <__fp_inf>
    1254:	0c 94 cc 08 	jmp	0x1198	; 0x1198 <__fp_szero>
    1258:	5f 3f       	cpi	r21, 0xFF	; 255
    125a:	e4 f3       	brlt	.-8      	; 0x1254 <__mulsf3_pse+0x84>
    125c:	98 3e       	cpi	r25, 0xE8	; 232
    125e:	d4 f3       	brlt	.-12     	; 0x1254 <__mulsf3_pse+0x84>
    1260:	86 95       	lsr	r24
    1262:	77 95       	ror	r23
    1264:	67 95       	ror	r22
    1266:	b7 95       	ror	r27
    1268:	f7 95       	ror	r31
    126a:	e7 95       	ror	r30
    126c:	9f 5f       	subi	r25, 0xFF	; 255
    126e:	c1 f7       	brne	.-16     	; 0x1260 <__mulsf3_pse+0x90>
    1270:	fe 2b       	or	r31, r30
    1272:	88 0f       	add	r24, r24
    1274:	91 1d       	adc	r25, r1
    1276:	96 95       	lsr	r25
    1278:	87 95       	ror	r24
    127a:	97 f9       	bld	r25, 7
    127c:	08 95       	ret

0000127e <__divmodhi4>:
    127e:	97 fb       	bst	r25, 7
    1280:	07 2e       	mov	r0, r23
    1282:	16 f4       	brtc	.+4      	; 0x1288 <__divmodhi4+0xa>
    1284:	00 94       	com	r0
    1286:	07 d0       	rcall	.+14     	; 0x1296 <__divmodhi4_neg1>
    1288:	77 fd       	sbrc	r23, 7
    128a:	09 d0       	rcall	.+18     	; 0x129e <__divmodhi4_neg2>
    128c:	0e 94 53 09 	call	0x12a6	; 0x12a6 <__udivmodhi4>
    1290:	07 fc       	sbrc	r0, 7
    1292:	05 d0       	rcall	.+10     	; 0x129e <__divmodhi4_neg2>
    1294:	3e f4       	brtc	.+14     	; 0x12a4 <__divmodhi4_exit>

00001296 <__divmodhi4_neg1>:
    1296:	90 95       	com	r25
    1298:	81 95       	neg	r24
    129a:	9f 4f       	sbci	r25, 0xFF	; 255
    129c:	08 95       	ret

0000129e <__divmodhi4_neg2>:
    129e:	70 95       	com	r23
    12a0:	61 95       	neg	r22
    12a2:	7f 4f       	sbci	r23, 0xFF	; 255

000012a4 <__divmodhi4_exit>:
    12a4:	08 95       	ret

000012a6 <__udivmodhi4>:
    12a6:	aa 1b       	sub	r26, r26
    12a8:	bb 1b       	sub	r27, r27
    12aa:	51 e1       	ldi	r21, 0x11	; 17
    12ac:	07 c0       	rjmp	.+14     	; 0x12bc <__udivmodhi4_ep>

000012ae <__udivmodhi4_loop>:
    12ae:	aa 1f       	adc	r26, r26
    12b0:	bb 1f       	adc	r27, r27
    12b2:	a6 17       	cp	r26, r22
    12b4:	b7 07       	cpc	r27, r23
    12b6:	10 f0       	brcs	.+4      	; 0x12bc <__udivmodhi4_ep>
    12b8:	a6 1b       	sub	r26, r22
    12ba:	b7 0b       	sbc	r27, r23

000012bc <__udivmodhi4_ep>:
    12bc:	88 1f       	adc	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	5a 95       	dec	r21
    12c2:	a9 f7       	brne	.-22     	; 0x12ae <__udivmodhi4_loop>
    12c4:	80 95       	com	r24
    12c6:	90 95       	com	r25
    12c8:	bc 01       	movw	r22, r24
    12ca:	cd 01       	movw	r24, r26
    12cc:	08 95       	ret

000012ce <do_rand>:
    12ce:	8f 92       	push	r8
    12d0:	9f 92       	push	r9
    12d2:	af 92       	push	r10
    12d4:	bf 92       	push	r11
    12d6:	cf 92       	push	r12
    12d8:	df 92       	push	r13
    12da:	ef 92       	push	r14
    12dc:	ff 92       	push	r15
    12de:	cf 93       	push	r28
    12e0:	df 93       	push	r29
    12e2:	ec 01       	movw	r28, r24
    12e4:	68 81       	ld	r22, Y
    12e6:	79 81       	ldd	r23, Y+1	; 0x01
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	9b 81       	ldd	r25, Y+3	; 0x03
    12ec:	61 15       	cp	r22, r1
    12ee:	71 05       	cpc	r23, r1
    12f0:	81 05       	cpc	r24, r1
    12f2:	91 05       	cpc	r25, r1
    12f4:	21 f4       	brne	.+8      	; 0x12fe <do_rand+0x30>
    12f6:	64 e2       	ldi	r22, 0x24	; 36
    12f8:	79 ed       	ldi	r23, 0xD9	; 217
    12fa:	8b e5       	ldi	r24, 0x5B	; 91
    12fc:	97 e0       	ldi	r25, 0x07	; 7
    12fe:	2d e1       	ldi	r18, 0x1D	; 29
    1300:	33 ef       	ldi	r19, 0xF3	; 243
    1302:	41 e0       	ldi	r20, 0x01	; 1
    1304:	50 e0       	ldi	r21, 0x00	; 0
    1306:	0e 94 c1 09 	call	0x1382	; 0x1382 <__divmodsi4>
    130a:	49 01       	movw	r8, r18
    130c:	5a 01       	movw	r10, r20
    130e:	9b 01       	movw	r18, r22
    1310:	ac 01       	movw	r20, r24
    1312:	a7 ea       	ldi	r26, 0xA7	; 167
    1314:	b1 e4       	ldi	r27, 0x41	; 65
    1316:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <__muluhisi3>
    131a:	6b 01       	movw	r12, r22
    131c:	7c 01       	movw	r14, r24
    131e:	ac ee       	ldi	r26, 0xEC	; 236
    1320:	b4 ef       	ldi	r27, 0xF4	; 244
    1322:	a5 01       	movw	r20, r10
    1324:	94 01       	movw	r18, r8
    1326:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__mulohisi3>
    132a:	dc 01       	movw	r26, r24
    132c:	cb 01       	movw	r24, r22
    132e:	8c 0d       	add	r24, r12
    1330:	9d 1d       	adc	r25, r13
    1332:	ae 1d       	adc	r26, r14
    1334:	bf 1d       	adc	r27, r15
    1336:	b7 ff       	sbrs	r27, 7
    1338:	03 c0       	rjmp	.+6      	; 0x1340 <do_rand+0x72>
    133a:	01 97       	sbiw	r24, 0x01	; 1
    133c:	a1 09       	sbc	r26, r1
    133e:	b0 48       	sbci	r27, 0x80	; 128
    1340:	88 83       	st	Y, r24
    1342:	99 83       	std	Y+1, r25	; 0x01
    1344:	aa 83       	std	Y+2, r26	; 0x02
    1346:	bb 83       	std	Y+3, r27	; 0x03
    1348:	9f 77       	andi	r25, 0x7F	; 127
    134a:	df 91       	pop	r29
    134c:	cf 91       	pop	r28
    134e:	ff 90       	pop	r15
    1350:	ef 90       	pop	r14
    1352:	df 90       	pop	r13
    1354:	cf 90       	pop	r12
    1356:	bf 90       	pop	r11
    1358:	af 90       	pop	r10
    135a:	9f 90       	pop	r9
    135c:	8f 90       	pop	r8
    135e:	08 95       	ret

00001360 <rand_r>:
    1360:	0c 94 67 09 	jmp	0x12ce	; 0x12ce <do_rand>

00001364 <rand>:
    1364:	80 e0       	ldi	r24, 0x00	; 0
    1366:	90 e2       	ldi	r25, 0x20	; 32
    1368:	0c 94 67 09 	jmp	0x12ce	; 0x12ce <do_rand>

0000136c <srand>:
    136c:	a0 e0       	ldi	r26, 0x00	; 0
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
    1374:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
    1378:	a0 93 02 20 	sts	0x2002, r26	; 0x802002 <__data_start+0x2>
    137c:	b0 93 03 20 	sts	0x2003, r27	; 0x802003 <__data_start+0x3>
    1380:	08 95       	ret

00001382 <__divmodsi4>:
    1382:	05 2e       	mov	r0, r21
    1384:	97 fb       	bst	r25, 7
    1386:	1e f4       	brtc	.+6      	; 0x138e <__divmodsi4+0xc>
    1388:	00 94       	com	r0
    138a:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <__negsi2>
    138e:	57 fd       	sbrc	r21, 7
    1390:	07 d0       	rcall	.+14     	; 0x13a0 <__divmodsi4_neg2>
    1392:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__udivmodsi4>
    1396:	07 fc       	sbrc	r0, 7
    1398:	03 d0       	rcall	.+6      	; 0x13a0 <__divmodsi4_neg2>
    139a:	4e f4       	brtc	.+18     	; 0x13ae <__divmodsi4_exit>
    139c:	0c 94 d8 09 	jmp	0x13b0	; 0x13b0 <__negsi2>

000013a0 <__divmodsi4_neg2>:
    13a0:	50 95       	com	r21
    13a2:	40 95       	com	r20
    13a4:	30 95       	com	r19
    13a6:	21 95       	neg	r18
    13a8:	3f 4f       	sbci	r19, 0xFF	; 255
    13aa:	4f 4f       	sbci	r20, 0xFF	; 255
    13ac:	5f 4f       	sbci	r21, 0xFF	; 255

000013ae <__divmodsi4_exit>:
    13ae:	08 95       	ret

000013b0 <__negsi2>:
    13b0:	90 95       	com	r25
    13b2:	80 95       	com	r24
    13b4:	70 95       	com	r23
    13b6:	61 95       	neg	r22
    13b8:	7f 4f       	sbci	r23, 0xFF	; 255
    13ba:	8f 4f       	sbci	r24, 0xFF	; 255
    13bc:	9f 4f       	sbci	r25, 0xFF	; 255
    13be:	08 95       	ret

000013c0 <__muluhisi3>:
    13c0:	0e 94 15 0a 	call	0x142a	; 0x142a <__umulhisi3>
    13c4:	a5 9f       	mul	r26, r21
    13c6:	90 0d       	add	r25, r0
    13c8:	b4 9f       	mul	r27, r20
    13ca:	90 0d       	add	r25, r0
    13cc:	a4 9f       	mul	r26, r20
    13ce:	80 0d       	add	r24, r0
    13d0:	91 1d       	adc	r25, r1
    13d2:	11 24       	eor	r1, r1
    13d4:	08 95       	ret

000013d6 <__mulshisi3>:
    13d6:	b7 ff       	sbrs	r27, 7
    13d8:	0c 94 e0 09 	jmp	0x13c0	; 0x13c0 <__muluhisi3>

000013dc <__mulohisi3>:
    13dc:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <__muluhisi3>
    13e0:	82 1b       	sub	r24, r18
    13e2:	93 0b       	sbc	r25, r19
    13e4:	08 95       	ret

000013e6 <__udivmodsi4>:
    13e6:	a1 e2       	ldi	r26, 0x21	; 33
    13e8:	1a 2e       	mov	r1, r26
    13ea:	aa 1b       	sub	r26, r26
    13ec:	bb 1b       	sub	r27, r27
    13ee:	fd 01       	movw	r30, r26
    13f0:	0d c0       	rjmp	.+26     	; 0x140c <__udivmodsi4_ep>

000013f2 <__udivmodsi4_loop>:
    13f2:	aa 1f       	adc	r26, r26
    13f4:	bb 1f       	adc	r27, r27
    13f6:	ee 1f       	adc	r30, r30
    13f8:	ff 1f       	adc	r31, r31
    13fa:	a2 17       	cp	r26, r18
    13fc:	b3 07       	cpc	r27, r19
    13fe:	e4 07       	cpc	r30, r20
    1400:	f5 07       	cpc	r31, r21
    1402:	20 f0       	brcs	.+8      	; 0x140c <__udivmodsi4_ep>
    1404:	a2 1b       	sub	r26, r18
    1406:	b3 0b       	sbc	r27, r19
    1408:	e4 0b       	sbc	r30, r20
    140a:	f5 0b       	sbc	r31, r21

0000140c <__udivmodsi4_ep>:
    140c:	66 1f       	adc	r22, r22
    140e:	77 1f       	adc	r23, r23
    1410:	88 1f       	adc	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	1a 94       	dec	r1
    1416:	69 f7       	brne	.-38     	; 0x13f2 <__udivmodsi4_loop>
    1418:	60 95       	com	r22
    141a:	70 95       	com	r23
    141c:	80 95       	com	r24
    141e:	90 95       	com	r25
    1420:	9b 01       	movw	r18, r22
    1422:	ac 01       	movw	r20, r24
    1424:	bd 01       	movw	r22, r26
    1426:	cf 01       	movw	r24, r30
    1428:	08 95       	ret

0000142a <__umulhisi3>:
    142a:	a2 9f       	mul	r26, r18
    142c:	b0 01       	movw	r22, r0
    142e:	b3 9f       	mul	r27, r19
    1430:	c0 01       	movw	r24, r0
    1432:	a3 9f       	mul	r26, r19
    1434:	70 0d       	add	r23, r0
    1436:	81 1d       	adc	r24, r1
    1438:	11 24       	eor	r1, r1
    143a:	91 1d       	adc	r25, r1
    143c:	b2 9f       	mul	r27, r18
    143e:	70 0d       	add	r23, r0
    1440:	81 1d       	adc	r24, r1
    1442:	11 24       	eor	r1, r1
    1444:	91 1d       	adc	r25, r1
    1446:	08 95       	ret

00001448 <_exit>:
    1448:	f8 94       	cli

0000144a <__stop_program>:
    144a:	ff cf       	rjmp	.-2      	; 0x144a <__stop_program>
