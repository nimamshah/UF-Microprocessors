
Lab5_lcd_voltage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  00000a52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000a52  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a84  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d80  00000000  00000000  00000b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000207  00000000  00000000  000018bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000413  00000000  00000000  00001ac3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000194  00000000  00000000  00001ed8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000ba5  00000000  00000000  0000206c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000328  00000000  00000000  00002c11  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002f39  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
   8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
   c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  10:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  14:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  18:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  1c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  20:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  24:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  28:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  2c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  30:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  34:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  38:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  3c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  40:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  44:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  48:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  4c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  50:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  54:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  58:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  5c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  60:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  64:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  68:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  6c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  70:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  74:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  78:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  7c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  80:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  84:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  88:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  8c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  90:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  94:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  98:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  9c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  a0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  a4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  a8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  ac:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  b0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  b4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  b8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  bc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  c0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  c4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  c8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  cc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  d0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  d4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  d8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  dc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  e0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  e4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  e8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  ec:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  f0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  f4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  f8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  fc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 100:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 104:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 108:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 10c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 110:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 114:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 118:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 11c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 120:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 124:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 128:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 12c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 130:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 134:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 138:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 13c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 140:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 144:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 148:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 14c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 150:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 154:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 158:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 15c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 160:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 164:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 168:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 16c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 170:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 174:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 178:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 17c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 180:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 184:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 188:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 18c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 190:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 194:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 198:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 19c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1a0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1a4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1a8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1ac:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1b0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1b4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1b8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1bc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1c0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1c4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1c8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1cc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1d0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1d4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1d8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1dc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1e0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1e4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1e8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1ec:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1f0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1f4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1f8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59
 214:	0e 94 20 02 	call	0x440	; 0x440 <main>
 218:	0c 94 fd 04 	jmp	0x9fa	; 0x9fa <_exit>

0000021c <__bad_interrupt>:
 21c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000220 <ebi_init>:
{
	__far_mem_write(LCD_BASEADDR, command);
	asm volatile ("nop");
	asm volatile ("nop");
	wait_busy();
}
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	cd b7       	in	r28, 0x3d	; 61
 226:	de b7       	in	r29, 0x3e	; 62
 228:	80 ee       	ldi	r24, 0xE0	; 224
 22a:	96 e0       	ldi	r25, 0x06	; 6
 22c:	27 e3       	ldi	r18, 0x37	; 55
 22e:	fc 01       	movw	r30, r24
 230:	20 83       	st	Z, r18
 232:	80 ee       	ldi	r24, 0xE0	; 224
 234:	96 e0       	ldi	r25, 0x06	; 6
 236:	23 e3       	ldi	r18, 0x33	; 51
 238:	fc 01       	movw	r30, r24
 23a:	24 83       	std	Z+4, r18	; 0x04
 23c:	80 e2       	ldi	r24, 0x20	; 32
 23e:	97 e0       	ldi	r25, 0x07	; 7
 240:	2f ef       	ldi	r18, 0xFF	; 255
 242:	fc 01       	movw	r30, r24
 244:	20 83       	st	Z, r18
 246:	80 e4       	ldi	r24, 0x40	; 64
 248:	94 e0       	ldi	r25, 0x04	; 4
 24a:	21 e0       	ldi	r18, 0x01	; 1
 24c:	fc 01       	movw	r30, r24
 24e:	20 83       	st	Z, r18
 250:	80 e4       	ldi	r24, 0x40	; 64
 252:	94 e0       	ldi	r25, 0x04	; 4
 254:	28 e2       	ldi	r18, 0x28	; 40
 256:	fc 01       	movw	r30, r24
 258:	23 8b       	std	Z+19, r18	; 0x13
 25a:	80 e4       	ldi	r24, 0x40	; 64
 25c:	94 e0       	ldi	r25, 0x04	; 4
 25e:	20 e8       	ldi	r18, 0x80	; 128
 260:	fc 01       	movw	r30, r24
 262:	22 8b       	std	Z+18, r18	; 0x12
 264:	80 e4       	ldi	r24, 0x40	; 64
 266:	94 e0       	ldi	r25, 0x04	; 4
 268:	25 e1       	ldi	r18, 0x15	; 21
 26a:	fc 01       	movw	r30, r24
 26c:	20 8b       	std	Z+16, r18	; 0x10
 26e:	80 e4       	ldi	r24, 0x40	; 64
 270:	94 e0       	ldi	r25, 0x04	; 4
 272:	20 e4       	ldi	r18, 0x40	; 64
 274:	39 e3       	ldi	r19, 0x39	; 57
 276:	fc 01       	movw	r30, r24
 278:	26 8b       	std	Z+22, r18	; 0x16
 27a:	37 8b       	std	Z+23, r19	; 0x17
 27c:	80 e4       	ldi	r24, 0x40	; 64
 27e:	94 e0       	ldi	r25, 0x04	; 4
 280:	29 e1       	ldi	r18, 0x19	; 25
 282:	fc 01       	movw	r30, r24
 284:	24 8b       	std	Z+20, r18	; 0x14
 286:	df 91       	pop	r29
 288:	cf 91       	pop	r28
 28a:	08 95       	ret

0000028c <lcd_init>:
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	cd b7       	in	r28, 0x3d	; 61
 292:	de b7       	in	r29, 0x3e	; 62
 294:	2c 97       	sbiw	r28, 0x0c	; 12
 296:	cd bf       	out	0x3d, r28	; 61
 298:	de bf       	out	0x3e, r29	; 62
 29a:	0e 94 97 01 	call	0x32e	; 0x32e <wait_busy>
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	90 e5       	ldi	r25, 0x50	; 80
 2a2:	a9 e3       	ldi	r26, 0x39	; 57
 2a4:	b0 e0       	ldi	r27, 0x00	; 0
 2a6:	89 83       	std	Y+1, r24	; 0x01
 2a8:	9a 83       	std	Y+2, r25	; 0x02
 2aa:	ab 83       	std	Y+3, r26	; 0x03
 2ac:	bc 83       	std	Y+4, r27	; 0x04
 2ae:	89 81       	ldd	r24, Y+1	; 0x01
 2b0:	9a 81       	ldd	r25, Y+2	; 0x02
 2b2:	ab 81       	ldd	r26, Y+3	; 0x03
 2b4:	bc 81       	ldd	r27, Y+4	; 0x04
 2b6:	28 e3       	ldi	r18, 0x38	; 56
 2b8:	0b b6       	in	r0, 0x3b	; 59
 2ba:	ab bf       	out	0x3b, r26	; 59
 2bc:	fc 01       	movw	r30, r24
 2be:	20 83       	st	Z, r18
 2c0:	0b be       	out	0x3b, r0	; 59
 2c2:	00 00       	nop
 2c4:	00 00       	nop
 2c6:	0e 94 97 01 	call	0x32e	; 0x32e <wait_busy>
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	90 e5       	ldi	r25, 0x50	; 80
 2ce:	a9 e3       	ldi	r26, 0x39	; 57
 2d0:	b0 e0       	ldi	r27, 0x00	; 0
 2d2:	8d 83       	std	Y+5, r24	; 0x05
 2d4:	9e 83       	std	Y+6, r25	; 0x06
 2d6:	af 83       	std	Y+7, r26	; 0x07
 2d8:	b8 87       	std	Y+8, r27	; 0x08
 2da:	8d 81       	ldd	r24, Y+5	; 0x05
 2dc:	9e 81       	ldd	r25, Y+6	; 0x06
 2de:	af 81       	ldd	r26, Y+7	; 0x07
 2e0:	b8 85       	ldd	r27, Y+8	; 0x08
 2e2:	2f e0       	ldi	r18, 0x0F	; 15
 2e4:	0b b6       	in	r0, 0x3b	; 59
 2e6:	ab bf       	out	0x3b, r26	; 59
 2e8:	fc 01       	movw	r30, r24
 2ea:	20 83       	st	Z, r18
 2ec:	0b be       	out	0x3b, r0	; 59
 2ee:	00 00       	nop
 2f0:	00 00       	nop
 2f2:	0e 94 97 01 	call	0x32e	; 0x32e <wait_busy>
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	90 e5       	ldi	r25, 0x50	; 80
 2fa:	a9 e3       	ldi	r26, 0x39	; 57
 2fc:	b0 e0       	ldi	r27, 0x00	; 0
 2fe:	89 87       	std	Y+9, r24	; 0x09
 300:	9a 87       	std	Y+10, r25	; 0x0a
 302:	ab 87       	std	Y+11, r26	; 0x0b
 304:	bc 87       	std	Y+12, r27	; 0x0c
 306:	89 85       	ldd	r24, Y+9	; 0x09
 308:	9a 85       	ldd	r25, Y+10	; 0x0a
 30a:	ab 85       	ldd	r26, Y+11	; 0x0b
 30c:	bc 85       	ldd	r27, Y+12	; 0x0c
 30e:	21 e0       	ldi	r18, 0x01	; 1
 310:	0b b6       	in	r0, 0x3b	; 59
 312:	ab bf       	out	0x3b, r26	; 59
 314:	fc 01       	movw	r30, r24
 316:	20 83       	st	Z, r18
 318:	0b be       	out	0x3b, r0	; 59
 31a:	00 00       	nop
 31c:	00 00       	nop
 31e:	0e 94 97 01 	call	0x32e	; 0x32e <wait_busy>
 322:	2c 96       	adiw	r28, 0x0c	; 12
 324:	cd bf       	out	0x3d, r28	; 61
 326:	de bf       	out	0x3e, r29	; 62
 328:	df 91       	pop	r29
 32a:	cf 91       	pop	r28
 32c:	08 95       	ret

0000032e <wait_busy>:
 32e:	cf 93       	push	r28
 330:	df 93       	push	r29
 332:	00 d0       	rcall	.+0      	; 0x334 <wait_busy+0x6>
 334:	00 d0       	rcall	.+0      	; 0x336 <wait_busy+0x8>
 336:	cd b7       	in	r28, 0x3d	; 61
 338:	de b7       	in	r29, 0x3e	; 62
 33a:	19 82       	std	Y+1, r1	; 0x01
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	90 e5       	ldi	r25, 0x50	; 80
 340:	a9 e3       	ldi	r26, 0x39	; 57
 342:	b0 e0       	ldi	r27, 0x00	; 0
 344:	8a 83       	std	Y+2, r24	; 0x02
 346:	9b 83       	std	Y+3, r25	; 0x03
 348:	ac 83       	std	Y+4, r26	; 0x04
 34a:	bd 83       	std	Y+5, r27	; 0x05
 34c:	8a 81       	ldd	r24, Y+2	; 0x02
 34e:	9b 81       	ldd	r25, Y+3	; 0x03
 350:	ac 81       	ldd	r26, Y+4	; 0x04
 352:	bd 81       	ldd	r27, Y+5	; 0x05
 354:	0b b6       	in	r0, 0x3b	; 59
 356:	ab bf       	out	0x3b, r26	; 59
 358:	fc 01       	movw	r30, r24
 35a:	80 81       	ld	r24, Z
 35c:	0b be       	out	0x3b, r0	; 59
 35e:	8e 83       	std	Y+6, r24	; 0x06
 360:	8e 81       	ldd	r24, Y+6	; 0x06
 362:	89 83       	std	Y+1, r24	; 0x01
 364:	89 81       	ldd	r24, Y+1	; 0x01
 366:	88 23       	and	r24, r24
 368:	4c f3       	brlt	.-46     	; 0x33c <wait_busy+0xe>
 36a:	26 96       	adiw	r28, 0x06	; 6
 36c:	cd bf       	out	0x3d, r28	; 61
 36e:	de bf       	out	0x3e, r29	; 62
 370:	df 91       	pop	r29
 372:	cf 91       	pop	r28
 374:	08 95       	ret

00000376 <OUT_CHAR>:
 376:	cf 93       	push	r28
 378:	df 93       	push	r29
 37a:	cd b7       	in	r28, 0x3d	; 61
 37c:	de b7       	in	r29, 0x3e	; 62
 37e:	25 97       	sbiw	r28, 0x05	; 5
 380:	cd bf       	out	0x3d, r28	; 61
 382:	de bf       	out	0x3e, r29	; 62
 384:	8d 83       	std	Y+5, r24	; 0x05
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	90 e5       	ldi	r25, 0x50	; 80
 38a:	a9 e3       	ldi	r26, 0x39	; 57
 38c:	b0 e0       	ldi	r27, 0x00	; 0
 38e:	89 83       	std	Y+1, r24	; 0x01
 390:	9a 83       	std	Y+2, r25	; 0x02
 392:	ab 83       	std	Y+3, r26	; 0x03
 394:	bc 83       	std	Y+4, r27	; 0x04
 396:	89 81       	ldd	r24, Y+1	; 0x01
 398:	9a 81       	ldd	r25, Y+2	; 0x02
 39a:	ab 81       	ldd	r26, Y+3	; 0x03
 39c:	bc 81       	ldd	r27, Y+4	; 0x04
 39e:	2d 81       	ldd	r18, Y+5	; 0x05
 3a0:	0b b6       	in	r0, 0x3b	; 59
 3a2:	ab bf       	out	0x3b, r26	; 59
 3a4:	fc 01       	movw	r30, r24
 3a6:	20 83       	st	Z, r18
 3a8:	0b be       	out	0x3b, r0	; 59
 3aa:	00 00       	nop
 3ac:	00 00       	nop
 3ae:	0e 94 97 01 	call	0x32e	; 0x32e <wait_busy>
 3b2:	25 96       	adiw	r28, 0x05	; 5
 3b4:	cd bf       	out	0x3d, r28	; 61
 3b6:	de bf       	out	0x3e, r29	; 62
 3b8:	df 91       	pop	r29
 3ba:	cf 91       	pop	r28
 3bc:	08 95       	ret

000003be <OUT_STRING>:
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	1f 92       	push	r1
 3c4:	1f 92       	push	r1
 3c6:	cd b7       	in	r28, 0x3d	; 61
 3c8:	de b7       	in	r29, 0x3e	; 62
 3ca:	89 83       	std	Y+1, r24	; 0x01
 3cc:	9a 83       	std	Y+2, r25	; 0x02
 3ce:	0b c0       	rjmp	.+22     	; 0x3e6 <OUT_STRING+0x28>
 3d0:	89 81       	ldd	r24, Y+1	; 0x01
 3d2:	9a 81       	ldd	r25, Y+2	; 0x02
 3d4:	fc 01       	movw	r30, r24
 3d6:	80 81       	ld	r24, Z
 3d8:	0e 94 bb 01 	call	0x376	; 0x376 <OUT_CHAR>
 3dc:	89 81       	ldd	r24, Y+1	; 0x01
 3de:	9a 81       	ldd	r25, Y+2	; 0x02
 3e0:	01 96       	adiw	r24, 0x01	; 1
 3e2:	89 83       	std	Y+1, r24	; 0x01
 3e4:	9a 83       	std	Y+2, r25	; 0x02
 3e6:	89 81       	ldd	r24, Y+1	; 0x01
 3e8:	9a 81       	ldd	r25, Y+2	; 0x02
 3ea:	fc 01       	movw	r30, r24
 3ec:	80 81       	ld	r24, Z
 3ee:	88 23       	and	r24, r24
 3f0:	79 f7       	brne	.-34     	; 0x3d0 <OUT_STRING+0x12>
 3f2:	0f 90       	pop	r0
 3f4:	0f 90       	pop	r0
 3f6:	df 91       	pop	r29
 3f8:	cf 91       	pop	r28
 3fa:	08 95       	ret

000003fc <CLEAR_SCREEN>:

void CLEAR_SCREEN(void)
{
 3fc:	cf 93       	push	r28
 3fe:	df 93       	push	r29
 400:	00 d0       	rcall	.+0      	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
 402:	1f 92       	push	r1
 404:	cd b7       	in	r28, 0x3d	; 61
 406:	de b7       	in	r29, 0x3e	; 62
	__far_mem_write(LCD_BASEADDR, 0x01);
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	90 e5       	ldi	r25, 0x50	; 80
 40c:	a9 e3       	ldi	r26, 0x39	; 57
 40e:	b0 e0       	ldi	r27, 0x00	; 0
 410:	89 83       	std	Y+1, r24	; 0x01
 412:	9a 83       	std	Y+2, r25	; 0x02
 414:	ab 83       	std	Y+3, r26	; 0x03
 416:	bc 83       	std	Y+4, r27	; 0x04
 418:	89 81       	ldd	r24, Y+1	; 0x01
 41a:	9a 81       	ldd	r25, Y+2	; 0x02
 41c:	ab 81       	ldd	r26, Y+3	; 0x03
 41e:	bc 81       	ldd	r27, Y+4	; 0x04
 420:	21 e0       	ldi	r18, 0x01	; 1
 422:	0b b6       	in	r0, 0x3b	; 59
 424:	ab bf       	out	0x3b, r26	; 59
 426:	fc 01       	movw	r30, r24
 428:	20 83       	st	Z, r18
 42a:	0b be       	out	0x3b, r0	; 59
	asm volatile ("nop");
 42c:	00 00       	nop
	asm volatile ("nop");
 42e:	00 00       	nop
	wait_busy();
 430:	0e 94 97 01 	call	0x32e	; 0x32e <wait_busy>
 434:	24 96       	adiw	r28, 0x04	; 4
 436:	cd bf       	out	0x3d, r28	; 61
 438:	de bf       	out	0x3e, r29	; 62
 43a:	df 91       	pop	r29
 43c:	cf 91       	pop	r28
 43e:	08 95       	ret

00000440 <main>:
void lcd_voltage(uint16_t volt);
uint8_t conv_nibble(uint8_t nib);

///////////////////////////////////MAIN FUNCTION/////////////////////////////////////
int main(void)
{
 440:	cf 93       	push	r28
 442:	df 93       	push	r29
 444:	cd b7       	in	r28, 0x3d	; 61
 446:	de b7       	in	r29, 0x3e	; 62
	ebi_init();
 448:	0e 94 10 01 	call	0x220	; 0x220 <ebi_init>
	lcd_init();
 44c:	0e 94 46 01 	call	0x28c	; 0x28c <lcd_init>
	adc_init();
 450:	0e 94 2f 02 	call	0x45e	; 0x45e <adc_init>
	while (1)
	{
		lcd_voltage(adc_pot());
 454:	0e 94 5d 02 	call	0x4ba	; 0x4ba <adc_pot>
 458:	0e 94 75 02 	call	0x4ea	; 0x4ea <lcd_voltage>
	}
 45c:	fb cf       	rjmp	.-10     	; 0x454 <main+0x14>

0000045e <adc_init>:
}

/////////////////////////////////////FUNCTIONS///////////////////////////////////////
void adc_init()
{
 45e:	cf 93       	push	r28
 460:	df 93       	push	r29
 462:	cd b7       	in	r28, 0x3d	; 61
 464:	de b7       	in	r29, 0x3e	; 62
	// General ADC Configuration
	ADCB.CTRLB = ADC_CONMODE_bm | ADC_FREERUN_bm;		// High Z, No Limit, Signed, Free Run, 12 Bit
 466:	80 e4       	ldi	r24, 0x40	; 64
 468:	92 e0       	ldi	r25, 0x02	; 2
 46a:	28 e1       	ldi	r18, 0x18	; 24
 46c:	fc 01       	movw	r30, r24
 46e:	21 83       	std	Z+1, r18	; 0x01
	ADCB.REFCTRL = ADC_REFSEL_AREFB_gc;					// Ext. Ref. from AREFB
 470:	80 e4       	ldi	r24, 0x40	; 64
 472:	92 e0       	ldi	r25, 0x02	; 2
 474:	20 e3       	ldi	r18, 0x30	; 48
 476:	fc 01       	movw	r30, r24
 478:	22 83       	std	Z+2, r18	; 0x02
	ADCB.PRESCALER = ADC_PRESCALER_DIV4_gc;
 47a:	80 e4       	ldi	r24, 0x40	; 64
 47c:	92 e0       	ldi	r25, 0x02	; 2
 47e:	fc 01       	movw	r30, r24
 480:	14 82       	std	Z+4, r1	; 0x04
	
	// ADC Channel Configuration
	ADCB.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN4_gc;			// Pin 4
 482:	80 e4       	ldi	r24, 0x40	; 64
 484:	92 e0       	ldi	r25, 0x02	; 2
 486:	20 e2       	ldi	r18, 0x20	; 32
 488:	fc 01       	movw	r30, r24
 48a:	21 a3       	std	Z+33, r18	; 0x21
	ADCB.CH0.INTCTRL = ADC_CH_INTLVL_LO_gc;				// Enable low-level interrupts
 48c:	80 e4       	ldi	r24, 0x40	; 64
 48e:	92 e0       	ldi	r25, 0x02	; 2
 490:	21 e0       	ldi	r18, 0x01	; 1
 492:	fc 01       	movw	r30, r24
 494:	22 a3       	std	Z+34, r18	; 0x22
	ADCB.CH0.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;	// Single-ended
 496:	80 e4       	ldi	r24, 0x40	; 64
 498:	92 e0       	ldi	r25, 0x02	; 2
 49a:	21 e0       	ldi	r18, 0x01	; 1
 49c:	fc 01       	movw	r30, r24
 49e:	20 a3       	std	Z+32, r18	; 0x20
	
	// Begin Conversions
	ADCB.CTRLA = ADC_CH0START_bm | ADC_ENABLE_bm;		// Start Conversion on channel 0, Enable ADC
 4a0:	80 e4       	ldi	r24, 0x40	; 64
 4a2:	92 e0       	ldi	r25, 0x02	; 2
 4a4:	25 e0       	ldi	r18, 0x05	; 5
 4a6:	fc 01       	movw	r30, r24
 4a8:	20 83       	st	Z, r18
	
	PORTB.DIRCLR = 0x13;
 4aa:	80 e2       	ldi	r24, 0x20	; 32
 4ac:	96 e0       	ldi	r25, 0x06	; 6
 4ae:	23 e1       	ldi	r18, 0x13	; 19
 4b0:	fc 01       	movw	r30, r24
 4b2:	22 83       	std	Z+2, r18	; 0x02
}
 4b4:	df 91       	pop	r29
 4b6:	cf 91       	pop	r28
 4b8:	08 95       	ret

000004ba <adc_pot>:

uint16_t adc_pot(void) 
{
 4ba:	cf 93       	push	r28
 4bc:	df 93       	push	r29
 4be:	cd b7       	in	r28, 0x3d	; 61
 4c0:	de b7       	in	r29, 0x3e	; 62
	while (!ADCB.CH0.INTFLAGS);
 4c2:	00 00       	nop
 4c4:	80 e4       	ldi	r24, 0x40	; 64
 4c6:	92 e0       	ldi	r25, 0x02	; 2
 4c8:	fc 01       	movw	r30, r24
 4ca:	83 a1       	ldd	r24, Z+35	; 0x23
 4cc:	88 23       	and	r24, r24
 4ce:	d1 f3       	breq	.-12     	; 0x4c4 <adc_pot+0xa>
	ADCB.CH0.INTFLAGS = 0x01;
 4d0:	80 e4       	ldi	r24, 0x40	; 64
 4d2:	92 e0       	ldi	r25, 0x02	; 2
 4d4:	21 e0       	ldi	r18, 0x01	; 1
 4d6:	fc 01       	movw	r30, r24
 4d8:	23 a3       	std	Z+35, r18	; 0x23
	return ADCB.CH0.RES;
 4da:	80 e4       	ldi	r24, 0x40	; 64
 4dc:	92 e0       	ldi	r25, 0x02	; 2
 4de:	fc 01       	movw	r30, r24
 4e0:	84 a1       	ldd	r24, Z+36	; 0x24
 4e2:	95 a1       	ldd	r25, Z+37	; 0x25
}
 4e4:	df 91       	pop	r29
 4e6:	cf 91       	pop	r28
 4e8:	08 95       	ret

000004ea <lcd_voltage>:

void lcd_voltage(uint16_t volt)
{
 4ea:	cf 93       	push	r28
 4ec:	df 93       	push	r29
 4ee:	cd b7       	in	r28, 0x3d	; 61
 4f0:	de b7       	in	r29, 0x3e	; 62
 4f2:	a6 97       	sbiw	r28, 0x26	; 38
 4f4:	cd bf       	out	0x3d, r28	; 61
 4f6:	de bf       	out	0x3e, r29	; 62
 4f8:	8d a3       	std	Y+37, r24	; 0x25
 4fa:	9e a3       	std	Y+38, r25	; 0x26
	CLEAR_SCREEN();
 4fc:	0e 94 fe 01 	call	0x3fc	; 0x3fc <CLEAR_SCREEN>
	
	// Convert ADC value to Decimal Voltage
	volt = volt & 0x07FF;					// We can assume positive, so ignore sign bit.
 500:	8d a1       	ldd	r24, Y+37	; 0x25
 502:	9e a1       	ldd	r25, Y+38	; 0x26
 504:	97 70       	andi	r25, 0x07	; 7
 506:	8d a3       	std	Y+37, r24	; 0x25
 508:	9e a3       	std	Y+38, r25	; 0x26
	volt *= 2;
 50a:	8d a1       	ldd	r24, Y+37	; 0x25
 50c:	9e a1       	ldd	r25, Y+38	; 0x26
 50e:	88 0f       	add	r24, r24
 510:	99 1f       	adc	r25, r25
 512:	8d a3       	std	Y+37, r24	; 0x25
 514:	9e a3       	std	Y+38, r25	; 0x26
	float dec_volt = ADC_RATIO*volt;		// Apply formula. 
 516:	8d a1       	ldd	r24, Y+37	; 0x25
 518:	9e a1       	ldd	r25, Y+38	; 0x26
 51a:	cc 01       	movw	r24, r24
 51c:	a0 e0       	ldi	r26, 0x00	; 0
 51e:	b0 e0       	ldi	r27, 0x00	; 0
 520:	bc 01       	movw	r22, r24
 522:	cd 01       	movw	r24, r26
 524:	0e 94 02 04 	call	0x804	; 0x804 <__floatunsisf>
 528:	dc 01       	movw	r26, r24
 52a:	cb 01       	movw	r24, r22
 52c:	26 ef       	ldi	r18, 0xF6	; 246
 52e:	39 e0       	ldi	r19, 0x09	; 9
 530:	40 ea       	ldi	r20, 0xA0	; 160
 532:	5a e3       	ldi	r21, 0x3A	; 58
 534:	bc 01       	movw	r22, r24
 536:	cd 01       	movw	r24, r26
 538:	0e 94 90 04 	call	0x920	; 0x920 <__mulsf3>
 53c:	dc 01       	movw	r26, r24
 53e:	cb 01       	movw	r24, r22
 540:	89 83       	std	Y+1, r24	; 0x01
 542:	9a 83       	std	Y+2, r25	; 0x02
 544:	ab 83       	std	Y+3, r26	; 0x03
 546:	bc 83       	std	Y+4, r27	; 0x04
	
	uint8_t int1, int2, int3, h1, h2, h3;
	char d1, d2, d3;
	float volt2, volt3;
	
	int1 = (uint8_t) dec_volt;				// Determine Decimal representation
 548:	69 81       	ldd	r22, Y+1	; 0x01
 54a:	7a 81       	ldd	r23, Y+2	; 0x02
 54c:	8b 81       	ldd	r24, Y+3	; 0x03
 54e:	9c 81       	ldd	r25, Y+4	; 0x04
 550:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <__fixunssfsi>
 554:	dc 01       	movw	r26, r24
 556:	cb 01       	movw	r24, r22
 558:	8d 83       	std	Y+5, r24	; 0x05
	d1 = (char) (int1 + '0');
 55a:	8d 81       	ldd	r24, Y+5	; 0x05
 55c:	80 5d       	subi	r24, 0xD0	; 208
 55e:	8e 83       	std	Y+6, r24	; 0x06
	volt2 = 10*(dec_volt - int1);
 560:	8d 81       	ldd	r24, Y+5	; 0x05
 562:	88 2f       	mov	r24, r24
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	09 2e       	mov	r0, r25
 568:	00 0c       	add	r0, r0
 56a:	aa 0b       	sbc	r26, r26
 56c:	bb 0b       	sbc	r27, r27
 56e:	bc 01       	movw	r22, r24
 570:	cd 01       	movw	r24, r26
 572:	0e 94 04 04 	call	0x808	; 0x808 <__floatsisf>
 576:	dc 01       	movw	r26, r24
 578:	cb 01       	movw	r24, r22
 57a:	9c 01       	movw	r18, r24
 57c:	ad 01       	movw	r20, r26
 57e:	69 81       	ldd	r22, Y+1	; 0x01
 580:	7a 81       	ldd	r23, Y+2	; 0x02
 582:	8b 81       	ldd	r24, Y+3	; 0x03
 584:	9c 81       	ldd	r25, Y+4	; 0x04
 586:	0e 94 66 03 	call	0x6cc	; 0x6cc <__subsf3>
 58a:	dc 01       	movw	r26, r24
 58c:	cb 01       	movw	r24, r22
 58e:	20 e0       	ldi	r18, 0x00	; 0
 590:	30 e0       	ldi	r19, 0x00	; 0
 592:	40 e2       	ldi	r20, 0x20	; 32
 594:	51 e4       	ldi	r21, 0x41	; 65
 596:	bc 01       	movw	r22, r24
 598:	cd 01       	movw	r24, r26
 59a:	0e 94 90 04 	call	0x920	; 0x920 <__mulsf3>
 59e:	dc 01       	movw	r26, r24
 5a0:	cb 01       	movw	r24, r22
 5a2:	8f 83       	std	Y+7, r24	; 0x07
 5a4:	98 87       	std	Y+8, r25	; 0x08
 5a6:	a9 87       	std	Y+9, r26	; 0x09
 5a8:	ba 87       	std	Y+10, r27	; 0x0a
	int2 = (uint8_t) volt2;
 5aa:	6f 81       	ldd	r22, Y+7	; 0x07
 5ac:	78 85       	ldd	r23, Y+8	; 0x08
 5ae:	89 85       	ldd	r24, Y+9	; 0x09
 5b0:	9a 85       	ldd	r25, Y+10	; 0x0a
 5b2:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <__fixunssfsi>
 5b6:	dc 01       	movw	r26, r24
 5b8:	cb 01       	movw	r24, r22
 5ba:	8b 87       	std	Y+11, r24	; 0x0b
	d2 = (char) (int2 + '0');
 5bc:	8b 85       	ldd	r24, Y+11	; 0x0b
 5be:	80 5d       	subi	r24, 0xD0	; 208
 5c0:	8c 87       	std	Y+12, r24	; 0x0c
	volt3 = 10*(volt2 - int2);
 5c2:	8b 85       	ldd	r24, Y+11	; 0x0b
 5c4:	88 2f       	mov	r24, r24
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	09 2e       	mov	r0, r25
 5ca:	00 0c       	add	r0, r0
 5cc:	aa 0b       	sbc	r26, r26
 5ce:	bb 0b       	sbc	r27, r27
 5d0:	bc 01       	movw	r22, r24
 5d2:	cd 01       	movw	r24, r26
 5d4:	0e 94 04 04 	call	0x808	; 0x808 <__floatsisf>
 5d8:	dc 01       	movw	r26, r24
 5da:	cb 01       	movw	r24, r22
 5dc:	9c 01       	movw	r18, r24
 5de:	ad 01       	movw	r20, r26
 5e0:	6f 81       	ldd	r22, Y+7	; 0x07
 5e2:	78 85       	ldd	r23, Y+8	; 0x08
 5e4:	89 85       	ldd	r24, Y+9	; 0x09
 5e6:	9a 85       	ldd	r25, Y+10	; 0x0a
 5e8:	0e 94 66 03 	call	0x6cc	; 0x6cc <__subsf3>
 5ec:	dc 01       	movw	r26, r24
 5ee:	cb 01       	movw	r24, r22
 5f0:	20 e0       	ldi	r18, 0x00	; 0
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	40 e2       	ldi	r20, 0x20	; 32
 5f6:	51 e4       	ldi	r21, 0x41	; 65
 5f8:	bc 01       	movw	r22, r24
 5fa:	cd 01       	movw	r24, r26
 5fc:	0e 94 90 04 	call	0x920	; 0x920 <__mulsf3>
 600:	dc 01       	movw	r26, r24
 602:	cb 01       	movw	r24, r22
 604:	8d 87       	std	Y+13, r24	; 0x0d
 606:	9e 87       	std	Y+14, r25	; 0x0e
 608:	af 87       	std	Y+15, r26	; 0x0f
 60a:	b8 8b       	std	Y+16, r27	; 0x10
	int3 = (uint8_t) volt3;
 60c:	6d 85       	ldd	r22, Y+13	; 0x0d
 60e:	7e 85       	ldd	r23, Y+14	; 0x0e
 610:	8f 85       	ldd	r24, Y+15	; 0x0f
 612:	98 89       	ldd	r25, Y+16	; 0x10
 614:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <__fixunssfsi>
 618:	dc 01       	movw	r26, r24
 61a:	cb 01       	movw	r24, r22
 61c:	89 8b       	std	Y+17, r24	; 0x11
	d3 = (char) (int3 + '0');
 61e:	89 89       	ldd	r24, Y+17	; 0x11
 620:	80 5d       	subi	r24, 0xD0	; 208
 622:	8a 8b       	std	Y+18, r24	; 0x12
	
	h1 = conv_nibble(volt>>8);				// Obtain ASCII for Hex representation
 624:	8d a1       	ldd	r24, Y+37	; 0x25
 626:	9e a1       	ldd	r25, Y+38	; 0x26
 628:	89 2f       	mov	r24, r25
 62a:	99 27       	eor	r25, r25
 62c:	0e 94 51 03 	call	0x6a2	; 0x6a2 <conv_nibble>
 630:	8b 8b       	std	Y+19, r24	; 0x13
	h2 = conv_nibble(volt>>4 & 0x0F);
 632:	8d a1       	ldd	r24, Y+37	; 0x25
 634:	9e a1       	ldd	r25, Y+38	; 0x26
 636:	92 95       	swap	r25
 638:	82 95       	swap	r24
 63a:	8f 70       	andi	r24, 0x0F	; 15
 63c:	89 27       	eor	r24, r25
 63e:	9f 70       	andi	r25, 0x0F	; 15
 640:	89 27       	eor	r24, r25
 642:	8f 70       	andi	r24, 0x0F	; 15
 644:	0e 94 51 03 	call	0x6a2	; 0x6a2 <conv_nibble>
 648:	8c 8b       	std	Y+20, r24	; 0x14
	h3 = conv_nibble(volt & 0x0F);
 64a:	8d a1       	ldd	r24, Y+37	; 0x25
 64c:	8f 70       	andi	r24, 0x0F	; 15
 64e:	0e 94 51 03 	call	0x6a2	; 0x6a2 <conv_nibble>
 652:	8d 8b       	std	Y+21, r24	; 0x15
	
	char string[] = {d1, '.', d2, d3, ' ', 'V', ' ', '(', '0', 'x', h1, h2, h3, ')', '\0'};
 654:	8e 81       	ldd	r24, Y+6	; 0x06
 656:	8e 8b       	std	Y+22, r24	; 0x16
 658:	8e e2       	ldi	r24, 0x2E	; 46
 65a:	8f 8b       	std	Y+23, r24	; 0x17
 65c:	8c 85       	ldd	r24, Y+12	; 0x0c
 65e:	88 8f       	std	Y+24, r24	; 0x18
 660:	8a 89       	ldd	r24, Y+18	; 0x12
 662:	89 8f       	std	Y+25, r24	; 0x19
 664:	80 e2       	ldi	r24, 0x20	; 32
 666:	8a 8f       	std	Y+26, r24	; 0x1a
 668:	86 e5       	ldi	r24, 0x56	; 86
 66a:	8b 8f       	std	Y+27, r24	; 0x1b
 66c:	80 e2       	ldi	r24, 0x20	; 32
 66e:	8c 8f       	std	Y+28, r24	; 0x1c
 670:	88 e2       	ldi	r24, 0x28	; 40
 672:	8d 8f       	std	Y+29, r24	; 0x1d
 674:	80 e3       	ldi	r24, 0x30	; 48
 676:	8e 8f       	std	Y+30, r24	; 0x1e
 678:	88 e7       	ldi	r24, 0x78	; 120
 67a:	8f 8f       	std	Y+31, r24	; 0x1f
 67c:	8b 89       	ldd	r24, Y+19	; 0x13
 67e:	88 a3       	std	Y+32, r24	; 0x20
 680:	8c 89       	ldd	r24, Y+20	; 0x14
 682:	89 a3       	std	Y+33, r24	; 0x21
 684:	8d 89       	ldd	r24, Y+21	; 0x15
 686:	8a a3       	std	Y+34, r24	; 0x22
 688:	89 e2       	ldi	r24, 0x29	; 41
 68a:	8b a3       	std	Y+35, r24	; 0x23
 68c:	1c a2       	std	Y+36, r1	; 0x24
	OUT_STRING(string);						// Output Voltmeter reading
 68e:	ce 01       	movw	r24, r28
 690:	46 96       	adiw	r24, 0x16	; 22
 692:	0e 94 df 01 	call	0x3be	; 0x3be <OUT_STRING>
}
 696:	a6 96       	adiw	r28, 0x26	; 38
 698:	cd bf       	out	0x3d, r28	; 61
 69a:	de bf       	out	0x3e, r29	; 62
 69c:	df 91       	pop	r29
 69e:	cf 91       	pop	r28
 6a0:	08 95       	ret

000006a2 <conv_nibble>:

uint8_t conv_nibble(uint8_t nib)
{
 6a2:	cf 93       	push	r28
 6a4:	df 93       	push	r29
 6a6:	1f 92       	push	r1
 6a8:	cd b7       	in	r28, 0x3d	; 61
 6aa:	de b7       	in	r29, 0x3e	; 62
 6ac:	89 83       	std	Y+1, r24	; 0x01
	if (nib < 0xA)
 6ae:	89 81       	ldd	r24, Y+1	; 0x01
 6b0:	8a 30       	cpi	r24, 0x0A	; 10
 6b2:	20 f4       	brcc	.+8      	; 0x6bc <conv_nibble+0x1a>
	{
		nib += '0';							// Offset by ASCII '0'
 6b4:	89 81       	ldd	r24, Y+1	; 0x01
 6b6:	80 5d       	subi	r24, 0xD0	; 208
 6b8:	89 83       	std	Y+1, r24	; 0x01
 6ba:	03 c0       	rjmp	.+6      	; 0x6c2 <conv_nibble+0x20>
	} else
	{
		nib += 'A' - 0xA;					// Subtract out 0xA so that 0xA => 0, 0xB => 1, etc., then offset by ASCII 'A'
 6bc:	89 81       	ldd	r24, Y+1	; 0x01
 6be:	89 5c       	subi	r24, 0xC9	; 201
 6c0:	89 83       	std	Y+1, r24	; 0x01
	}
	return nib;
 6c2:	89 81       	ldd	r24, Y+1	; 0x01
 6c4:	0f 90       	pop	r0
 6c6:	df 91       	pop	r29
 6c8:	cf 91       	pop	r28
 6ca:	08 95       	ret

000006cc <__subsf3>:
 6cc:	50 58       	subi	r21, 0x80	; 128

000006ce <__addsf3>:
 6ce:	bb 27       	eor	r27, r27
 6d0:	aa 27       	eor	r26, r26
 6d2:	0e 94 7e 03 	call	0x6fc	; 0x6fc <__addsf3x>
 6d6:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__fp_round>
 6da:	0e 94 48 04 	call	0x890	; 0x890 <__fp_pscA>
 6de:	38 f0       	brcs	.+14     	; 0x6ee <__addsf3+0x20>
 6e0:	0e 94 4f 04 	call	0x89e	; 0x89e <__fp_pscB>
 6e4:	20 f0       	brcs	.+8      	; 0x6ee <__addsf3+0x20>
 6e6:	39 f4       	brne	.+14     	; 0x6f6 <__addsf3+0x28>
 6e8:	9f 3f       	cpi	r25, 0xFF	; 255
 6ea:	19 f4       	brne	.+6      	; 0x6f2 <__addsf3+0x24>
 6ec:	26 f4       	brtc	.+8      	; 0x6f6 <__addsf3+0x28>
 6ee:	0c 94 45 04 	jmp	0x88a	; 0x88a <__fp_nan>
 6f2:	0e f4       	brtc	.+2      	; 0x6f6 <__addsf3+0x28>
 6f4:	e0 95       	com	r30
 6f6:	e7 fb       	bst	r30, 7
 6f8:	0c 94 3f 04 	jmp	0x87e	; 0x87e <__fp_inf>

000006fc <__addsf3x>:
 6fc:	e9 2f       	mov	r30, r25
 6fe:	0e 94 67 04 	call	0x8ce	; 0x8ce <__fp_split3>
 702:	58 f3       	brcs	.-42     	; 0x6da <__addsf3+0xc>
 704:	ba 17       	cp	r27, r26
 706:	62 07       	cpc	r22, r18
 708:	73 07       	cpc	r23, r19
 70a:	84 07       	cpc	r24, r20
 70c:	95 07       	cpc	r25, r21
 70e:	20 f0       	brcs	.+8      	; 0x718 <__addsf3x+0x1c>
 710:	79 f4       	brne	.+30     	; 0x730 <__addsf3x+0x34>
 712:	a6 f5       	brtc	.+104    	; 0x77c <__addsf3x+0x80>
 714:	0c 94 89 04 	jmp	0x912	; 0x912 <__fp_zero>
 718:	0e f4       	brtc	.+2      	; 0x71c <__addsf3x+0x20>
 71a:	e0 95       	com	r30
 71c:	0b 2e       	mov	r0, r27
 71e:	ba 2f       	mov	r27, r26
 720:	a0 2d       	mov	r26, r0
 722:	0b 01       	movw	r0, r22
 724:	b9 01       	movw	r22, r18
 726:	90 01       	movw	r18, r0
 728:	0c 01       	movw	r0, r24
 72a:	ca 01       	movw	r24, r20
 72c:	a0 01       	movw	r20, r0
 72e:	11 24       	eor	r1, r1
 730:	ff 27       	eor	r31, r31
 732:	59 1b       	sub	r21, r25
 734:	99 f0       	breq	.+38     	; 0x75c <__addsf3x+0x60>
 736:	59 3f       	cpi	r21, 0xF9	; 249
 738:	50 f4       	brcc	.+20     	; 0x74e <__addsf3x+0x52>
 73a:	50 3e       	cpi	r21, 0xE0	; 224
 73c:	68 f1       	brcs	.+90     	; 0x798 <__addsf3x+0x9c>
 73e:	1a 16       	cp	r1, r26
 740:	f0 40       	sbci	r31, 0x00	; 0
 742:	a2 2f       	mov	r26, r18
 744:	23 2f       	mov	r18, r19
 746:	34 2f       	mov	r19, r20
 748:	44 27       	eor	r20, r20
 74a:	58 5f       	subi	r21, 0xF8	; 248
 74c:	f3 cf       	rjmp	.-26     	; 0x734 <__addsf3x+0x38>
 74e:	46 95       	lsr	r20
 750:	37 95       	ror	r19
 752:	27 95       	ror	r18
 754:	a7 95       	ror	r26
 756:	f0 40       	sbci	r31, 0x00	; 0
 758:	53 95       	inc	r21
 75a:	c9 f7       	brne	.-14     	; 0x74e <__addsf3x+0x52>
 75c:	7e f4       	brtc	.+30     	; 0x77c <__addsf3x+0x80>
 75e:	1f 16       	cp	r1, r31
 760:	ba 0b       	sbc	r27, r26
 762:	62 0b       	sbc	r22, r18
 764:	73 0b       	sbc	r23, r19
 766:	84 0b       	sbc	r24, r20
 768:	ba f0       	brmi	.+46     	; 0x798 <__addsf3x+0x9c>
 76a:	91 50       	subi	r25, 0x01	; 1
 76c:	a1 f0       	breq	.+40     	; 0x796 <__addsf3x+0x9a>
 76e:	ff 0f       	add	r31, r31
 770:	bb 1f       	adc	r27, r27
 772:	66 1f       	adc	r22, r22
 774:	77 1f       	adc	r23, r23
 776:	88 1f       	adc	r24, r24
 778:	c2 f7       	brpl	.-16     	; 0x76a <__addsf3x+0x6e>
 77a:	0e c0       	rjmp	.+28     	; 0x798 <__addsf3x+0x9c>
 77c:	ba 0f       	add	r27, r26
 77e:	62 1f       	adc	r22, r18
 780:	73 1f       	adc	r23, r19
 782:	84 1f       	adc	r24, r20
 784:	48 f4       	brcc	.+18     	; 0x798 <__addsf3x+0x9c>
 786:	87 95       	ror	r24
 788:	77 95       	ror	r23
 78a:	67 95       	ror	r22
 78c:	b7 95       	ror	r27
 78e:	f7 95       	ror	r31
 790:	9e 3f       	cpi	r25, 0xFE	; 254
 792:	08 f0       	brcs	.+2      	; 0x796 <__addsf3x+0x9a>
 794:	b0 cf       	rjmp	.-160    	; 0x6f6 <__addsf3+0x28>
 796:	93 95       	inc	r25
 798:	88 0f       	add	r24, r24
 79a:	08 f0       	brcs	.+2      	; 0x79e <__addsf3x+0xa2>
 79c:	99 27       	eor	r25, r25
 79e:	ee 0f       	add	r30, r30
 7a0:	97 95       	ror	r25
 7a2:	87 95       	ror	r24
 7a4:	08 95       	ret

000007a6 <__fixunssfsi>:
 7a6:	0e 94 6f 04 	call	0x8de	; 0x8de <__fp_splitA>
 7aa:	88 f0       	brcs	.+34     	; 0x7ce <__fixunssfsi+0x28>
 7ac:	9f 57       	subi	r25, 0x7F	; 127
 7ae:	98 f0       	brcs	.+38     	; 0x7d6 <__fixunssfsi+0x30>
 7b0:	b9 2f       	mov	r27, r25
 7b2:	99 27       	eor	r25, r25
 7b4:	b7 51       	subi	r27, 0x17	; 23
 7b6:	b0 f0       	brcs	.+44     	; 0x7e4 <__fixunssfsi+0x3e>
 7b8:	e1 f0       	breq	.+56     	; 0x7f2 <__fixunssfsi+0x4c>
 7ba:	66 0f       	add	r22, r22
 7bc:	77 1f       	adc	r23, r23
 7be:	88 1f       	adc	r24, r24
 7c0:	99 1f       	adc	r25, r25
 7c2:	1a f0       	brmi	.+6      	; 0x7ca <__fixunssfsi+0x24>
 7c4:	ba 95       	dec	r27
 7c6:	c9 f7       	brne	.-14     	; 0x7ba <__fixunssfsi+0x14>
 7c8:	14 c0       	rjmp	.+40     	; 0x7f2 <__fixunssfsi+0x4c>
 7ca:	b1 30       	cpi	r27, 0x01	; 1
 7cc:	91 f0       	breq	.+36     	; 0x7f2 <__fixunssfsi+0x4c>
 7ce:	0e 94 89 04 	call	0x912	; 0x912 <__fp_zero>
 7d2:	b1 e0       	ldi	r27, 0x01	; 1
 7d4:	08 95       	ret
 7d6:	0c 94 89 04 	jmp	0x912	; 0x912 <__fp_zero>
 7da:	67 2f       	mov	r22, r23
 7dc:	78 2f       	mov	r23, r24
 7de:	88 27       	eor	r24, r24
 7e0:	b8 5f       	subi	r27, 0xF8	; 248
 7e2:	39 f0       	breq	.+14     	; 0x7f2 <__fixunssfsi+0x4c>
 7e4:	b9 3f       	cpi	r27, 0xF9	; 249
 7e6:	cc f3       	brlt	.-14     	; 0x7da <__fixunssfsi+0x34>
 7e8:	86 95       	lsr	r24
 7ea:	77 95       	ror	r23
 7ec:	67 95       	ror	r22
 7ee:	b3 95       	inc	r27
 7f0:	d9 f7       	brne	.-10     	; 0x7e8 <__fixunssfsi+0x42>
 7f2:	3e f4       	brtc	.+14     	; 0x802 <__fixunssfsi+0x5c>
 7f4:	90 95       	com	r25
 7f6:	80 95       	com	r24
 7f8:	70 95       	com	r23
 7fa:	61 95       	neg	r22
 7fc:	7f 4f       	sbci	r23, 0xFF	; 255
 7fe:	8f 4f       	sbci	r24, 0xFF	; 255
 800:	9f 4f       	sbci	r25, 0xFF	; 255
 802:	08 95       	ret

00000804 <__floatunsisf>:
 804:	e8 94       	clt
 806:	09 c0       	rjmp	.+18     	; 0x81a <__floatsisf+0x12>

00000808 <__floatsisf>:
 808:	97 fb       	bst	r25, 7
 80a:	3e f4       	brtc	.+14     	; 0x81a <__floatsisf+0x12>
 80c:	90 95       	com	r25
 80e:	80 95       	com	r24
 810:	70 95       	com	r23
 812:	61 95       	neg	r22
 814:	7f 4f       	sbci	r23, 0xFF	; 255
 816:	8f 4f       	sbci	r24, 0xFF	; 255
 818:	9f 4f       	sbci	r25, 0xFF	; 255
 81a:	99 23       	and	r25, r25
 81c:	a9 f0       	breq	.+42     	; 0x848 <__floatsisf+0x40>
 81e:	f9 2f       	mov	r31, r25
 820:	96 e9       	ldi	r25, 0x96	; 150
 822:	bb 27       	eor	r27, r27
 824:	93 95       	inc	r25
 826:	f6 95       	lsr	r31
 828:	87 95       	ror	r24
 82a:	77 95       	ror	r23
 82c:	67 95       	ror	r22
 82e:	b7 95       	ror	r27
 830:	f1 11       	cpse	r31, r1
 832:	f8 cf       	rjmp	.-16     	; 0x824 <__floatsisf+0x1c>
 834:	fa f4       	brpl	.+62     	; 0x874 <__floatsisf+0x6c>
 836:	bb 0f       	add	r27, r27
 838:	11 f4       	brne	.+4      	; 0x83e <__floatsisf+0x36>
 83a:	60 ff       	sbrs	r22, 0
 83c:	1b c0       	rjmp	.+54     	; 0x874 <__floatsisf+0x6c>
 83e:	6f 5f       	subi	r22, 0xFF	; 255
 840:	7f 4f       	sbci	r23, 0xFF	; 255
 842:	8f 4f       	sbci	r24, 0xFF	; 255
 844:	9f 4f       	sbci	r25, 0xFF	; 255
 846:	16 c0       	rjmp	.+44     	; 0x874 <__floatsisf+0x6c>
 848:	88 23       	and	r24, r24
 84a:	11 f0       	breq	.+4      	; 0x850 <__floatsisf+0x48>
 84c:	96 e9       	ldi	r25, 0x96	; 150
 84e:	11 c0       	rjmp	.+34     	; 0x872 <__floatsisf+0x6a>
 850:	77 23       	and	r23, r23
 852:	21 f0       	breq	.+8      	; 0x85c <__floatsisf+0x54>
 854:	9e e8       	ldi	r25, 0x8E	; 142
 856:	87 2f       	mov	r24, r23
 858:	76 2f       	mov	r23, r22
 85a:	05 c0       	rjmp	.+10     	; 0x866 <__floatsisf+0x5e>
 85c:	66 23       	and	r22, r22
 85e:	71 f0       	breq	.+28     	; 0x87c <__floatsisf+0x74>
 860:	96 e8       	ldi	r25, 0x86	; 134
 862:	86 2f       	mov	r24, r22
 864:	70 e0       	ldi	r23, 0x00	; 0
 866:	60 e0       	ldi	r22, 0x00	; 0
 868:	2a f0       	brmi	.+10     	; 0x874 <__floatsisf+0x6c>
 86a:	9a 95       	dec	r25
 86c:	66 0f       	add	r22, r22
 86e:	77 1f       	adc	r23, r23
 870:	88 1f       	adc	r24, r24
 872:	da f7       	brpl	.-10     	; 0x86a <__floatsisf+0x62>
 874:	88 0f       	add	r24, r24
 876:	96 95       	lsr	r25
 878:	87 95       	ror	r24
 87a:	97 f9       	bld	r25, 7
 87c:	08 95       	ret

0000087e <__fp_inf>:
 87e:	97 f9       	bld	r25, 7
 880:	9f 67       	ori	r25, 0x7F	; 127
 882:	80 e8       	ldi	r24, 0x80	; 128
 884:	70 e0       	ldi	r23, 0x00	; 0
 886:	60 e0       	ldi	r22, 0x00	; 0
 888:	08 95       	ret

0000088a <__fp_nan>:
 88a:	9f ef       	ldi	r25, 0xFF	; 255
 88c:	80 ec       	ldi	r24, 0xC0	; 192
 88e:	08 95       	ret

00000890 <__fp_pscA>:
 890:	00 24       	eor	r0, r0
 892:	0a 94       	dec	r0
 894:	16 16       	cp	r1, r22
 896:	17 06       	cpc	r1, r23
 898:	18 06       	cpc	r1, r24
 89a:	09 06       	cpc	r0, r25
 89c:	08 95       	ret

0000089e <__fp_pscB>:
 89e:	00 24       	eor	r0, r0
 8a0:	0a 94       	dec	r0
 8a2:	12 16       	cp	r1, r18
 8a4:	13 06       	cpc	r1, r19
 8a6:	14 06       	cpc	r1, r20
 8a8:	05 06       	cpc	r0, r21
 8aa:	08 95       	ret

000008ac <__fp_round>:
 8ac:	09 2e       	mov	r0, r25
 8ae:	03 94       	inc	r0
 8b0:	00 0c       	add	r0, r0
 8b2:	11 f4       	brne	.+4      	; 0x8b8 <__fp_round+0xc>
 8b4:	88 23       	and	r24, r24
 8b6:	52 f0       	brmi	.+20     	; 0x8cc <__fp_round+0x20>
 8b8:	bb 0f       	add	r27, r27
 8ba:	40 f4       	brcc	.+16     	; 0x8cc <__fp_round+0x20>
 8bc:	bf 2b       	or	r27, r31
 8be:	11 f4       	brne	.+4      	; 0x8c4 <__fp_round+0x18>
 8c0:	60 ff       	sbrs	r22, 0
 8c2:	04 c0       	rjmp	.+8      	; 0x8cc <__fp_round+0x20>
 8c4:	6f 5f       	subi	r22, 0xFF	; 255
 8c6:	7f 4f       	sbci	r23, 0xFF	; 255
 8c8:	8f 4f       	sbci	r24, 0xFF	; 255
 8ca:	9f 4f       	sbci	r25, 0xFF	; 255
 8cc:	08 95       	ret

000008ce <__fp_split3>:
 8ce:	57 fd       	sbrc	r21, 7
 8d0:	90 58       	subi	r25, 0x80	; 128
 8d2:	44 0f       	add	r20, r20
 8d4:	55 1f       	adc	r21, r21
 8d6:	59 f0       	breq	.+22     	; 0x8ee <__fp_splitA+0x10>
 8d8:	5f 3f       	cpi	r21, 0xFF	; 255
 8da:	71 f0       	breq	.+28     	; 0x8f8 <__fp_splitA+0x1a>
 8dc:	47 95       	ror	r20

000008de <__fp_splitA>:
 8de:	88 0f       	add	r24, r24
 8e0:	97 fb       	bst	r25, 7
 8e2:	99 1f       	adc	r25, r25
 8e4:	61 f0       	breq	.+24     	; 0x8fe <__fp_splitA+0x20>
 8e6:	9f 3f       	cpi	r25, 0xFF	; 255
 8e8:	79 f0       	breq	.+30     	; 0x908 <__fp_splitA+0x2a>
 8ea:	87 95       	ror	r24
 8ec:	08 95       	ret
 8ee:	12 16       	cp	r1, r18
 8f0:	13 06       	cpc	r1, r19
 8f2:	14 06       	cpc	r1, r20
 8f4:	55 1f       	adc	r21, r21
 8f6:	f2 cf       	rjmp	.-28     	; 0x8dc <__fp_split3+0xe>
 8f8:	46 95       	lsr	r20
 8fa:	f1 df       	rcall	.-30     	; 0x8de <__fp_splitA>
 8fc:	08 c0       	rjmp	.+16     	; 0x90e <__fp_splitA+0x30>
 8fe:	16 16       	cp	r1, r22
 900:	17 06       	cpc	r1, r23
 902:	18 06       	cpc	r1, r24
 904:	99 1f       	adc	r25, r25
 906:	f1 cf       	rjmp	.-30     	; 0x8ea <__fp_splitA+0xc>
 908:	86 95       	lsr	r24
 90a:	71 05       	cpc	r23, r1
 90c:	61 05       	cpc	r22, r1
 90e:	08 94       	sec
 910:	08 95       	ret

00000912 <__fp_zero>:
 912:	e8 94       	clt

00000914 <__fp_szero>:
 914:	bb 27       	eor	r27, r27
 916:	66 27       	eor	r22, r22
 918:	77 27       	eor	r23, r23
 91a:	cb 01       	movw	r24, r22
 91c:	97 f9       	bld	r25, 7
 91e:	08 95       	ret

00000920 <__mulsf3>:
 920:	0e 94 a3 04 	call	0x946	; 0x946 <__mulsf3x>
 924:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__fp_round>
 928:	0e 94 48 04 	call	0x890	; 0x890 <__fp_pscA>
 92c:	38 f0       	brcs	.+14     	; 0x93c <__mulsf3+0x1c>
 92e:	0e 94 4f 04 	call	0x89e	; 0x89e <__fp_pscB>
 932:	20 f0       	brcs	.+8      	; 0x93c <__mulsf3+0x1c>
 934:	95 23       	and	r25, r21
 936:	11 f0       	breq	.+4      	; 0x93c <__mulsf3+0x1c>
 938:	0c 94 3f 04 	jmp	0x87e	; 0x87e <__fp_inf>
 93c:	0c 94 45 04 	jmp	0x88a	; 0x88a <__fp_nan>
 940:	11 24       	eor	r1, r1
 942:	0c 94 8a 04 	jmp	0x914	; 0x914 <__fp_szero>

00000946 <__mulsf3x>:
 946:	0e 94 67 04 	call	0x8ce	; 0x8ce <__fp_split3>
 94a:	70 f3       	brcs	.-36     	; 0x928 <__mulsf3+0x8>

0000094c <__mulsf3_pse>:
 94c:	95 9f       	mul	r25, r21
 94e:	c1 f3       	breq	.-16     	; 0x940 <__mulsf3+0x20>
 950:	95 0f       	add	r25, r21
 952:	50 e0       	ldi	r21, 0x00	; 0
 954:	55 1f       	adc	r21, r21
 956:	62 9f       	mul	r22, r18
 958:	f0 01       	movw	r30, r0
 95a:	72 9f       	mul	r23, r18
 95c:	bb 27       	eor	r27, r27
 95e:	f0 0d       	add	r31, r0
 960:	b1 1d       	adc	r27, r1
 962:	63 9f       	mul	r22, r19
 964:	aa 27       	eor	r26, r26
 966:	f0 0d       	add	r31, r0
 968:	b1 1d       	adc	r27, r1
 96a:	aa 1f       	adc	r26, r26
 96c:	64 9f       	mul	r22, r20
 96e:	66 27       	eor	r22, r22
 970:	b0 0d       	add	r27, r0
 972:	a1 1d       	adc	r26, r1
 974:	66 1f       	adc	r22, r22
 976:	82 9f       	mul	r24, r18
 978:	22 27       	eor	r18, r18
 97a:	b0 0d       	add	r27, r0
 97c:	a1 1d       	adc	r26, r1
 97e:	62 1f       	adc	r22, r18
 980:	73 9f       	mul	r23, r19
 982:	b0 0d       	add	r27, r0
 984:	a1 1d       	adc	r26, r1
 986:	62 1f       	adc	r22, r18
 988:	83 9f       	mul	r24, r19
 98a:	a0 0d       	add	r26, r0
 98c:	61 1d       	adc	r22, r1
 98e:	22 1f       	adc	r18, r18
 990:	74 9f       	mul	r23, r20
 992:	33 27       	eor	r19, r19
 994:	a0 0d       	add	r26, r0
 996:	61 1d       	adc	r22, r1
 998:	23 1f       	adc	r18, r19
 99a:	84 9f       	mul	r24, r20
 99c:	60 0d       	add	r22, r0
 99e:	21 1d       	adc	r18, r1
 9a0:	82 2f       	mov	r24, r18
 9a2:	76 2f       	mov	r23, r22
 9a4:	6a 2f       	mov	r22, r26
 9a6:	11 24       	eor	r1, r1
 9a8:	9f 57       	subi	r25, 0x7F	; 127
 9aa:	50 40       	sbci	r21, 0x00	; 0
 9ac:	9a f0       	brmi	.+38     	; 0x9d4 <__mulsf3_pse+0x88>
 9ae:	f1 f0       	breq	.+60     	; 0x9ec <__mulsf3_pse+0xa0>
 9b0:	88 23       	and	r24, r24
 9b2:	4a f0       	brmi	.+18     	; 0x9c6 <__mulsf3_pse+0x7a>
 9b4:	ee 0f       	add	r30, r30
 9b6:	ff 1f       	adc	r31, r31
 9b8:	bb 1f       	adc	r27, r27
 9ba:	66 1f       	adc	r22, r22
 9bc:	77 1f       	adc	r23, r23
 9be:	88 1f       	adc	r24, r24
 9c0:	91 50       	subi	r25, 0x01	; 1
 9c2:	50 40       	sbci	r21, 0x00	; 0
 9c4:	a9 f7       	brne	.-22     	; 0x9b0 <__mulsf3_pse+0x64>
 9c6:	9e 3f       	cpi	r25, 0xFE	; 254
 9c8:	51 05       	cpc	r21, r1
 9ca:	80 f0       	brcs	.+32     	; 0x9ec <__mulsf3_pse+0xa0>
 9cc:	0c 94 3f 04 	jmp	0x87e	; 0x87e <__fp_inf>
 9d0:	0c 94 8a 04 	jmp	0x914	; 0x914 <__fp_szero>
 9d4:	5f 3f       	cpi	r21, 0xFF	; 255
 9d6:	e4 f3       	brlt	.-8      	; 0x9d0 <__mulsf3_pse+0x84>
 9d8:	98 3e       	cpi	r25, 0xE8	; 232
 9da:	d4 f3       	brlt	.-12     	; 0x9d0 <__mulsf3_pse+0x84>
 9dc:	86 95       	lsr	r24
 9de:	77 95       	ror	r23
 9e0:	67 95       	ror	r22
 9e2:	b7 95       	ror	r27
 9e4:	f7 95       	ror	r31
 9e6:	e7 95       	ror	r30
 9e8:	9f 5f       	subi	r25, 0xFF	; 255
 9ea:	c1 f7       	brne	.-16     	; 0x9dc <__mulsf3_pse+0x90>
 9ec:	fe 2b       	or	r31, r30
 9ee:	88 0f       	add	r24, r24
 9f0:	91 1d       	adc	r25, r1
 9f2:	96 95       	lsr	r25
 9f4:	87 95       	ror	r24
 9f6:	97 f9       	bld	r25, 7
 9f8:	08 95       	ret

000009fa <_exit>:
 9fa:	f8 94       	cli

000009fc <__stop_program>:
 9fc:	ff cf       	rjmp	.-2      	; 0x9fc <__stop_program>
