
Lab5_lcd_quiz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000102c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d4  00802000  0000102c  000010c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008020d4  008020d4  00001194  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001194  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00001204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019d7  00000000  00000000  000012dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000331  00000000  00000000  00002cb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b0c  00000000  00000000  00002fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b0  00000000  00000000  00003af0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d45  00000000  00000000  00003da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ece  00000000  00000000  00004ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  000059b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
       4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
       8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
       c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      10:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      14:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      18:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      1c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      20:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      24:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      28:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      2c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      30:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      34:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      38:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      3c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      40:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      44:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      48:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      4c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      50:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      54:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      58:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      5c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      60:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      64:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      68:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      6c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      70:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      74:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      78:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      7c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      80:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      84:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      88:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      8c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      90:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      94:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      98:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      9c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
      fc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     100:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     104:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     108:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     10c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     110:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     114:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     118:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     11c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     120:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     124:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     128:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     12c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     130:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     134:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     138:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     13c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     140:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     144:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     148:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     14c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     150:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     154:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     158:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     15c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     160:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     164:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     168:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     16c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     170:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     174:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     178:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     17c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     180:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     184:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     188:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     18c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     190:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     194:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     198:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     19c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
     1f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e3       	ldi	r29, 0x3F	; 63
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60
     20c:	18 be       	out	0x38, r1	; 56
     20e:	19 be       	out	0x39, r1	; 57
     210:	1a be       	out	0x3a, r1	; 58
     212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
     214:	10 e2       	ldi	r17, 0x20	; 32
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	ec e2       	ldi	r30, 0x2C	; 44
     21c:	f0 e1       	ldi	r31, 0x10	; 16
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	a4 3d       	cpi	r26, 0xD4	; 212
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
     22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
     230:	20 e2       	ldi	r18, 0x20	; 32
     232:	a4 ed       	ldi	r26, 0xD4	; 212
     234:	b0 e2       	ldi	r27, 0x20	; 32
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
     23a:	a8 3d       	cpi	r26, 0xD8	; 216
     23c:	b2 07       	cpc	r27, r18
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
     240:	0e 94 1d 05 	call	0xa3a	; 0xa3a <main>
     244:	0c 94 14 08 	jmp	0x1028	; 0x1028 <_exit>

00000248 <__bad_interrupt>:
     248:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024c <time>:
     24c:	fc 01       	movw	r30, r24
     24e:	0f b6       	in	r0, 0x3f	; 63
     250:	f8 94       	cli
     252:	60 91 d4 20 	lds	r22, 0x20D4	; 0x8020d4 <__data_end>
     256:	70 91 d5 20 	lds	r23, 0x20D5	; 0x8020d5 <__data_end+0x1>
     25a:	80 91 d6 20 	lds	r24, 0x20D6	; 0x8020d6 <__data_end+0x2>
     25e:	90 91 d7 20 	lds	r25, 0x20D7	; 0x8020d7 <__data_end+0x3>
     262:	0f be       	out	0x3f, r0	; 63
     264:	30 97       	sbiw	r30, 0x00	; 0
     266:	21 f0       	breq	.+8      	; 0x270 <time+0x24>
     268:	60 83       	st	Z, r22
     26a:	71 83       	std	Z+1, r23	; 0x01
     26c:	82 83       	std	Z+2, r24	; 0x02
     26e:	93 83       	std	Z+3, r25	; 0x03
     270:	08 95       	ret

00000272 <ebi_init>:
void ebi_init();

/////////////////////////////////////FUNCTIONS///////////////////////////////////////
void ebi_init()
{
	PORTH.DIR = 0x37;
     272:	e0 ee       	ldi	r30, 0xE0	; 224
     274:	f6 e0       	ldi	r31, 0x06	; 6
     276:	87 e3       	ldi	r24, 0x37	; 55
     278:	80 83       	st	Z, r24
	PORTH.OUT = 0x33;
     27a:	83 e3       	ldi	r24, 0x33	; 51
     27c:	84 83       	std	Z+4, r24	; 0x04
	PORTK.DIR = 0xFF;
     27e:	8f ef       	ldi	r24, 0xFF	; 255
     280:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <__TEXT_REGION_LENGTH__+0x700720>
	
	EBI.CTRL = EBI_SRMODE_ALE1_gc | EBI_IFMODE_3PORT_gc;
     284:	e0 e4       	ldi	r30, 0x40	; 64
     286:	f4 e0       	ldi	r31, 0x04	; 4
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	80 83       	st	Z, r24
	
	EBI.CS0.BASEADDRH = (uint8_t) (CS0_Start>>16) & 0xFF;
     28c:	88 e2       	ldi	r24, 0x28	; 40
     28e:	83 8b       	std	Z+19, r24	; 0x13
	EBI.CS0.BASEADDRL = (uint8_t) (CS0_Start>>8) & 0xFF;
     290:	80 e8       	ldi	r24, 0x80	; 128
     292:	82 8b       	std	Z+18, r24	; 0x12
	EBI.CS0.CTRLA = EBI_CS_MODE_SRAM_gc | EBI_CS_ASPACE_8KB_gc;
     294:	85 e1       	ldi	r24, 0x15	; 21
     296:	80 8b       	std	Z+16, r24	; 0x10
	
	EBI.CS1.BASEADDR = (uint16_t) (CS1_Start>>8) & 0xFFFF;
     298:	80 e4       	ldi	r24, 0x40	; 64
     29a:	99 e3       	ldi	r25, 0x39	; 57
     29c:	86 8b       	std	Z+22, r24	; 0x16
     29e:	97 8b       	std	Z+23, r25	; 0x17
	EBI.CS1.CTRLA = EBI_CS_MODE_SRAM_gc | EBI_CS_ASPACE_16KB_gc;
     2a0:	89 e1       	ldi	r24, 0x19	; 25
     2a2:	84 8b       	std	Z+20, r24	; 0x14
     2a4:	08 95       	ret

000002a6 <wait_busy>:
void wait_busy()
{
	uint8_t result = 0;
	do 
	{
		result = __far_mem_read(LCD_BASEADDR);
     2a6:	40 e0       	ldi	r20, 0x00	; 0
     2a8:	50 e5       	ldi	r21, 0x50	; 80
     2aa:	69 e3       	ldi	r22, 0x39	; 57
     2ac:	70 e0       	ldi	r23, 0x00	; 0
     2ae:	0b b6       	in	r0, 0x3b	; 59
     2b0:	6b bf       	out	0x3b, r22	; 59
     2b2:	fa 01       	movw	r30, r20
     2b4:	80 81       	ld	r24, Z
     2b6:	0b be       	out	0x3b, r0	; 59
	} while (result & 0x80);				// Poll the BF of the LCD
     2b8:	88 23       	and	r24, r24
     2ba:	cc f3       	brlt	.-14     	; 0x2ae <wait_busy+0x8>
}
     2bc:	08 95       	ret

000002be <lcd_init>:
uint8_t lcd_disp = 0x07;

/////////////////////////////////////FUNCTIONS///////////////////////////////////////
void lcd_init()
{
	wait_busy();
     2be:	0e 94 53 01 	call	0x2a6	; 0x2a6 <wait_busy>
	__far_mem_write(LCD_BASEADDR, 0x38);	// Two lines
     2c2:	28 e3       	ldi	r18, 0x38	; 56
     2c4:	80 e0       	ldi	r24, 0x00	; 0
     2c6:	90 e5       	ldi	r25, 0x50	; 80
     2c8:	a9 e3       	ldi	r26, 0x39	; 57
     2ca:	b0 e0       	ldi	r27, 0x00	; 0
     2cc:	0b b6       	in	r0, 0x3b	; 59
     2ce:	ab bf       	out	0x3b, r26	; 59
     2d0:	fc 01       	movw	r30, r24
     2d2:	20 83       	st	Z, r18
     2d4:	0b be       	out	0x3b, r0	; 59
	asm volatile ("nop");
     2d6:	00 00       	nop
	asm volatile ("nop");
     2d8:	00 00       	nop
	wait_busy();
     2da:	0e 94 53 01 	call	0x2a6	; 0x2a6 <wait_busy>
	
	__far_mem_write(LCD_BASEADDR, 0x0F);	// Display on; Cursor on; Blink on
     2de:	2f e0       	ldi	r18, 0x0F	; 15
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	90 e5       	ldi	r25, 0x50	; 80
     2e4:	a9 e3       	ldi	r26, 0x39	; 57
     2e6:	b0 e0       	ldi	r27, 0x00	; 0
     2e8:	0b b6       	in	r0, 0x3b	; 59
     2ea:	ab bf       	out	0x3b, r26	; 59
     2ec:	fc 01       	movw	r30, r24
     2ee:	20 83       	st	Z, r18
     2f0:	0b be       	out	0x3b, r0	; 59
	asm volatile ("nop");
     2f2:	00 00       	nop
	asm volatile ("nop");
     2f4:	00 00       	nop
	wait_busy();
     2f6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <wait_busy>
	
	__far_mem_write(LCD_BASEADDR, 0x01);	// Clear screen; Cursor home
     2fa:	21 e0       	ldi	r18, 0x01	; 1
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	90 e5       	ldi	r25, 0x50	; 80
     300:	a9 e3       	ldi	r26, 0x39	; 57
     302:	b0 e0       	ldi	r27, 0x00	; 0
     304:	0b b6       	in	r0, 0x3b	; 59
     306:	ab bf       	out	0x3b, r26	; 59
     308:	fc 01       	movw	r30, r24
     30a:	20 83       	st	Z, r18
     30c:	0b be       	out	0x3b, r0	; 59
	asm volatile ("nop");
     30e:	00 00       	nop
	asm volatile ("nop");
     310:	00 00       	nop
	wait_busy();
     312:	0e 94 53 01 	call	0x2a6	; 0x2a6 <wait_busy>
     316:	08 95       	ret

00000318 <OUT_CHAR>:
		result = __far_mem_read(LCD_BASEADDR);
	} while (result & 0x80);				// Poll the BF of the LCD
}

void OUT_CHAR(char character)
{
     318:	cf 93       	push	r28
     31a:	c8 2f       	mov	r28, r24
	wait_busy();
     31c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <wait_busy>
	__far_mem_write(LCD_BASEADDR+1, character);
     320:	41 e0       	ldi	r20, 0x01	; 1
     322:	50 e5       	ldi	r21, 0x50	; 80
     324:	69 e3       	ldi	r22, 0x39	; 57
     326:	70 e0       	ldi	r23, 0x00	; 0
     328:	0b b6       	in	r0, 0x3b	; 59
     32a:	6b bf       	out	0x3b, r22	; 59
     32c:	fa 01       	movw	r30, r20
     32e:	c0 83       	st	Z, r28
     330:	0b be       	out	0x3b, r0	; 59
	asm volatile ("nop");
     332:	00 00       	nop
	asm volatile ("nop");
     334:	00 00       	nop
	wait_busy();
     336:	0e 94 53 01 	call	0x2a6	; 0x2a6 <wait_busy>
}
     33a:	cf 91       	pop	r28
     33c:	08 95       	ret

0000033e <OUT_STRING>:

void OUT_STRING(char *string)
{
     33e:	cf 93       	push	r28
     340:	df 93       	push	r29
     342:	ec 01       	movw	r28, r24
	while (*string != '\0')					// Loop until null character is encountered
     344:	88 81       	ld	r24, Y
     346:	88 23       	and	r24, r24
     348:	31 f0       	breq	.+12     	; 0x356 <OUT_STRING+0x18>
     34a:	21 96       	adiw	r28, 0x01	; 1
	{
		OUT_CHAR(*string);
     34c:	0e 94 8c 01 	call	0x318	; 0x318 <OUT_CHAR>
	wait_busy();
}

void OUT_STRING(char *string)
{
	while (*string != '\0')					// Loop until null character is encountered
     350:	89 91       	ld	r24, Y+
     352:	81 11       	cpse	r24, r1
     354:	fb cf       	rjmp	.-10     	; 0x34c <OUT_STRING+0xe>
	{
		OUT_CHAR(*string);
		string++;
	}
}
     356:	df 91       	pop	r29
     358:	cf 91       	pop	r28
     35a:	08 95       	ret

0000035c <OUT_COMMAND>:

void OUT_COMMAND(char command)
{
     35c:	cf 93       	push	r28
     35e:	c8 2f       	mov	r28, r24
	wait_busy();
     360:	0e 94 53 01 	call	0x2a6	; 0x2a6 <wait_busy>
	__far_mem_write(LCD_BASEADDR, command);
     364:	40 e0       	ldi	r20, 0x00	; 0
     366:	50 e5       	ldi	r21, 0x50	; 80
     368:	69 e3       	ldi	r22, 0x39	; 57
     36a:	70 e0       	ldi	r23, 0x00	; 0
     36c:	0b b6       	in	r0, 0x3b	; 59
     36e:	6b bf       	out	0x3b, r22	; 59
     370:	fa 01       	movw	r30, r20
     372:	c0 83       	st	Z, r28
     374:	0b be       	out	0x3b, r0	; 59
	asm volatile ("nop");
     376:	00 00       	nop
	asm volatile ("nop");
     378:	00 00       	nop
	wait_busy();
     37a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <wait_busy>
}
     37e:	cf 91       	pop	r28
     380:	08 95       	ret

00000382 <CLEAR_SCREEN>:

void CLEAR_SCREEN(void)
{
	wait_busy();
     382:	0e 94 53 01 	call	0x2a6	; 0x2a6 <wait_busy>
	__far_mem_write(LCD_BASEADDR, 0x01);
     386:	21 e0       	ldi	r18, 0x01	; 1
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	90 e5       	ldi	r25, 0x50	; 80
     38c:	a9 e3       	ldi	r26, 0x39	; 57
     38e:	b0 e0       	ldi	r27, 0x00	; 0
     390:	0b b6       	in	r0, 0x3b	; 59
     392:	ab bf       	out	0x3b, r26	; 59
     394:	fc 01       	movw	r30, r24
     396:	20 83       	st	Z, r18
     398:	0b be       	out	0x3b, r0	; 59
	asm volatile ("nop");
     39a:	00 00       	nop
	asm volatile ("nop");
     39c:	00 00       	nop
	wait_busy();
     39e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <wait_busy>
     3a2:	08 95       	ret

000003a4 <lcd_toggle>:
}

void lcd_toggle(void)
{
     3a4:	cf 93       	push	r28
	lcd_disp = lcd_disp ^ 0x07;
     3a6:	c0 91 1a 20 	lds	r28, 0x201A	; 0x80201a <lcd_disp>
     3aa:	87 e0       	ldi	r24, 0x07	; 7
     3ac:	c8 27       	eor	r28, r24
     3ae:	c0 93 1a 20 	sts	0x201A, r28	; 0x80201a <lcd_disp>
	uint8_t disp_comm = 0x08 | lcd_disp;
	
	wait_busy();
     3b2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <wait_busy>
	OUT_COMMAND(disp_comm);
     3b6:	8c 2f       	mov	r24, r28
     3b8:	88 60       	ori	r24, 0x08	; 8
     3ba:	0e 94 ae 01 	call	0x35c	; 0x35c <OUT_COMMAND>
     3be:	cf 91       	pop	r28
     3c0:	08 95       	ret

000003c2 <adc_init>:

/////////////////////////////////////FUNCTIONS///////////////////////////////////////
void adc_init()
{
	// General ADC Configuration
	ADCB.CTRLB = ADC_CONMODE_bm | ADC_FREERUN_bm;		// High Z, No Limit, Signed, Free Run, 12 Bit
     3c2:	e0 e4       	ldi	r30, 0x40	; 64
     3c4:	f2 e0       	ldi	r31, 0x02	; 2
     3c6:	88 e1       	ldi	r24, 0x18	; 24
     3c8:	81 83       	std	Z+1, r24	; 0x01
	ADCB.REFCTRL = ADC_REFSEL_AREFB_gc;					// Ext. Ref. from AREFB
     3ca:	80 e3       	ldi	r24, 0x30	; 48
     3cc:	82 83       	std	Z+2, r24	; 0x02
	ADCB.PRESCALER = ADC_PRESCALER_DIV4_gc;
     3ce:	14 82       	std	Z+4, r1	; 0x04
	ADCB.EVCTRL = ADC_SWEEP0_bm | ADC_EVACT1_bm;
     3d0:	82 e4       	ldi	r24, 0x42	; 66
     3d2:	83 83       	std	Z+3, r24	; 0x03
	
	// ADC Channel Configuration
	ADCB.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN4_gc;			// Pin 4
     3d4:	80 e2       	ldi	r24, 0x20	; 32
     3d6:	81 a3       	std	Z+33, r24	; 0x21
	ADCB.CH0.INTCTRL = ADC_CH_INTLVL_LO_gc;				// Enable low-level interrupts
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	82 a3       	std	Z+34, r24	; 0x22
	ADCB.CH0.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;	// Single-ended
     3dc:	80 a3       	std	Z+32, r24	; 0x20
	
	ADCB.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc;			// Pin 5
     3de:	98 e2       	ldi	r25, 0x28	; 40
     3e0:	91 a7       	std	Z+41, r25	; 0x29
	ADCB.CH1.INTCTRL = ADC_CH_INTLVL_LO_gc;				// Enable low-level interrupts
     3e2:	82 a7       	std	Z+42, r24	; 0x2a
	ADCB.CH1.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;	// Single-ended
     3e4:	80 a7       	std	Z+40, r24	; 0x28
	
	// Begin Conversions
	ADCB.CTRLA = ADC_CH0START_bm | ADC_CH1START_bm | ADC_ENABLE_bm;		// Start Conversion on channel 0 and 1, Enable ADC
     3e6:	8d e0       	ldi	r24, 0x0D	; 13
     3e8:	80 83       	st	Z, r24
	
	PORTB.DIRCLR = 0x33;
     3ea:	83 e3       	ldi	r24, 0x33	; 51
     3ec:	80 93 22 06 	sts	0x0622, r24	; 0x800622 <__TEXT_REGION_LENGTH__+0x700622>
     3f0:	08 95       	ret

000003f2 <adc_pot>:
uint8_t conv_nibble(uint8_t nib);

/////////////////////////////////////FUNCTIONS///////////////////////////////////////
uint16_t adc_pot(void) 
{
	while (!ADCB.CH0.INTFLAGS);
     3f2:	e0 e4       	ldi	r30, 0x40	; 64
     3f4:	f2 e0       	ldi	r31, 0x02	; 2
     3f6:	83 a1       	ldd	r24, Z+35	; 0x23
     3f8:	88 23       	and	r24, r24
     3fa:	e9 f3       	breq	.-6      	; 0x3f6 <adc_pot+0x4>
	ADCB.CH0.INTFLAGS = 0x01;
     3fc:	e0 e4       	ldi	r30, 0x40	; 64
     3fe:	f2 e0       	ldi	r31, 0x02	; 2
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	83 a3       	std	Z+35, r24	; 0x23
	return ADCB.CH0.RES;
     404:	84 a1       	ldd	r24, Z+36	; 0x24
     406:	95 a1       	ldd	r25, Z+37	; 0x25
}
     408:	08 95       	ret

0000040a <conv_nibble>:
	OUT_STRING(string);						// Output Voltmeter reading
}

uint8_t conv_nibble(uint8_t nib)
{
	if (nib < 0xA)
     40a:	8a 30       	cpi	r24, 0x0A	; 10
     40c:	10 f4       	brcc	.+4      	; 0x412 <conv_nibble+0x8>
	{
		nib += '0';							// Offset by ASCII '0'
     40e:	80 5d       	subi	r24, 0xD0	; 208
     410:	08 95       	ret
	} else
	{
		nib += 'A' - 0xA;					// Subtract out 0xA so that 0xA => 0, 0xB => 1, etc., then offset by ASCII 'A'
     412:	89 5c       	subi	r24, 0xC9	; 201
	}
	return nib;
     414:	08 95       	ret

00000416 <lcd_voltage>:
	ADCB.CH0.INTFLAGS = 0x01;
	return ADCB.CH0.RES;
}

void lcd_voltage(uint16_t volt)
{
     416:	8f 92       	push	r8
     418:	9f 92       	push	r9
     41a:	af 92       	push	r10
     41c:	bf 92       	push	r11
     41e:	df 92       	push	r13
     420:	ef 92       	push	r14
     422:	ff 92       	push	r15
     424:	0f 93       	push	r16
     426:	1f 93       	push	r17
     428:	cf 93       	push	r28
     42a:	df 93       	push	r29
     42c:	cd b7       	in	r28, 0x3d	; 61
     42e:	de b7       	in	r29, 0x3e	; 62
     430:	2f 97       	sbiw	r28, 0x0f	; 15
     432:	cd bf       	out	0x3d, r28	; 61
     434:	de bf       	out	0x3e, r29	; 62
     436:	8c 01       	movw	r16, r24
	CLEAR_SCREEN();
     438:	0e 94 c1 01 	call	0x382	; 0x382 <CLEAR_SCREEN>
	
	// Convert ADC value to Decimal Voltage
	volt = volt & 0x07FF;					// We can assume positive, so ignore sign bit.
     43c:	17 70       	andi	r17, 0x07	; 7
	volt *= 2;								// Multiply by 2 to account for ADC /2
     43e:	00 0f       	add	r16, r16
     440:	11 1f       	adc	r17, r17
	float dec_volt = ADC_RATIO*volt;		// Apply formula. 
     442:	b8 01       	movw	r22, r16
     444:	80 e0       	ldi	r24, 0x00	; 0
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	0e 94 34 06 	call	0xc68	; 0xc68 <__floatunsisf>
     44c:	26 ef       	ldi	r18, 0xF6	; 246
     44e:	39 e0       	ldi	r19, 0x09	; 9
     450:	40 ea       	ldi	r20, 0xA0	; 160
     452:	5a e3       	ldi	r21, 0x3A	; 58
     454:	0e 94 c2 06 	call	0xd84	; 0xd84 <__mulsf3>
     458:	4b 01       	movw	r8, r22
     45a:	5c 01       	movw	r10, r24
	
	uint8_t int1, int2, int3, h1, h2, h3;
	char d1, d2, d3;
	float volt2, volt3;
	
	int1 = (uint8_t) dec_volt;				// Determine Decimal representation
     45c:	0e 94 05 06 	call	0xc0a	; 0xc0a <__fixunssfsi>
     460:	e6 2e       	mov	r14, r22
	d1 = (char) (int1 + '0');
	volt2 = 10*(dec_volt - int1);
     462:	70 e0       	ldi	r23, 0x00	; 0
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	0e 94 36 06 	call	0xc6c	; 0xc6c <__floatsisf>
     46c:	9b 01       	movw	r18, r22
     46e:	ac 01       	movw	r20, r24
     470:	c5 01       	movw	r24, r10
     472:	b4 01       	movw	r22, r8
     474:	0e 94 98 05 	call	0xb30	; 0xb30 <__subsf3>
     478:	20 e0       	ldi	r18, 0x00	; 0
     47a:	30 e0       	ldi	r19, 0x00	; 0
     47c:	40 e2       	ldi	r20, 0x20	; 32
     47e:	51 e4       	ldi	r21, 0x41	; 65
     480:	0e 94 c2 06 	call	0xd84	; 0xd84 <__mulsf3>
     484:	4b 01       	movw	r8, r22
     486:	5c 01       	movw	r10, r24
	int2 = (uint8_t) volt2;
     488:	0e 94 05 06 	call	0xc0a	; 0xc0a <__fixunssfsi>
     48c:	f6 2e       	mov	r15, r22
	d2 = (char) (int2 + '0');
	volt3 = 10*(volt2 - int2);
	int3 = (uint8_t) volt3;
	d3 = (char) (int3 + '0');
	
	h1 = conv_nibble(volt>>8);				// Obtain ASCII for Hex representation
     48e:	81 2f       	mov	r24, r17
     490:	0e 94 05 02 	call	0x40a	; 0x40a <conv_nibble>
     494:	d8 2e       	mov	r13, r24
	h2 = conv_nibble(volt>>4 & 0x0F);
     496:	c8 01       	movw	r24, r16
     498:	92 95       	swap	r25
     49a:	82 95       	swap	r24
     49c:	8f 70       	andi	r24, 0x0F	; 15
     49e:	89 27       	eor	r24, r25
     4a0:	9f 70       	andi	r25, 0x0F	; 15
     4a2:	89 27       	eor	r24, r25
     4a4:	8f 70       	andi	r24, 0x0F	; 15
     4a6:	0e 94 05 02 	call	0x40a	; 0x40a <conv_nibble>
     4aa:	18 2f       	mov	r17, r24
	h3 = conv_nibble(volt & 0x0F);
     4ac:	80 2f       	mov	r24, r16
     4ae:	8f 70       	andi	r24, 0x0F	; 15
     4b0:	0e 94 05 02 	call	0x40a	; 0x40a <conv_nibble>
     4b4:	08 2f       	mov	r16, r24
	uint8_t int1, int2, int3, h1, h2, h3;
	char d1, d2, d3;
	float volt2, volt3;
	
	int1 = (uint8_t) dec_volt;				// Determine Decimal representation
	d1 = (char) (int1 + '0');
     4b6:	90 e3       	ldi	r25, 0x30	; 48
     4b8:	9e 0d       	add	r25, r14
	
	h1 = conv_nibble(volt>>8);				// Obtain ASCII for Hex representation
	h2 = conv_nibble(volt>>4 & 0x0F);
	h3 = conv_nibble(volt & 0x0F);
	
	char string[] = {d1, '.', d2, d3, ' ', 'V', ' ', '(', '0', 'x', h1, h2, h3, ')', '\0'};
     4ba:	99 83       	std	Y+1, r25	; 0x01
     4bc:	8e e2       	ldi	r24, 0x2E	; 46
     4be:	8a 83       	std	Y+2, r24	; 0x02
	
	int1 = (uint8_t) dec_volt;				// Determine Decimal representation
	d1 = (char) (int1 + '0');
	volt2 = 10*(dec_volt - int1);
	int2 = (uint8_t) volt2;
	d2 = (char) (int2 + '0');
     4c0:	80 e3       	ldi	r24, 0x30	; 48
     4c2:	8f 0d       	add	r24, r15
	
	h1 = conv_nibble(volt>>8);				// Obtain ASCII for Hex representation
	h2 = conv_nibble(volt>>4 & 0x0F);
	h3 = conv_nibble(volt & 0x0F);
	
	char string[] = {d1, '.', d2, d3, ' ', 'V', ' ', '(', '0', 'x', h1, h2, h3, ')', '\0'};
     4c4:	8b 83       	std	Y+3, r24	; 0x03
	int1 = (uint8_t) dec_volt;				// Determine Decimal representation
	d1 = (char) (int1 + '0');
	volt2 = 10*(dec_volt - int1);
	int2 = (uint8_t) volt2;
	d2 = (char) (int2 + '0');
	volt3 = 10*(volt2 - int2);
     4c6:	6f 2d       	mov	r22, r15
     4c8:	70 e0       	ldi	r23, 0x00	; 0
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	0e 94 36 06 	call	0xc6c	; 0xc6c <__floatsisf>
     4d2:	9b 01       	movw	r18, r22
     4d4:	ac 01       	movw	r20, r24
     4d6:	c5 01       	movw	r24, r10
     4d8:	b4 01       	movw	r22, r8
     4da:	0e 94 98 05 	call	0xb30	; 0xb30 <__subsf3>
     4de:	20 e0       	ldi	r18, 0x00	; 0
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	40 e2       	ldi	r20, 0x20	; 32
     4e4:	51 e4       	ldi	r21, 0x41	; 65
     4e6:	0e 94 c2 06 	call	0xd84	; 0xd84 <__mulsf3>
	int3 = (uint8_t) volt3;
     4ea:	0e 94 05 06 	call	0xc0a	; 0xc0a <__fixunssfsi>
	d3 = (char) (int3 + '0');
     4ee:	60 5d       	subi	r22, 0xD0	; 208
	
	h1 = conv_nibble(volt>>8);				// Obtain ASCII for Hex representation
	h2 = conv_nibble(volt>>4 & 0x0F);
	h3 = conv_nibble(volt & 0x0F);
	
	char string[] = {d1, '.', d2, d3, ' ', 'V', ' ', '(', '0', 'x', h1, h2, h3, ')', '\0'};
     4f0:	6c 83       	std	Y+4, r22	; 0x04
     4f2:	80 e2       	ldi	r24, 0x20	; 32
     4f4:	8d 83       	std	Y+5, r24	; 0x05
     4f6:	96 e5       	ldi	r25, 0x56	; 86
     4f8:	9e 83       	std	Y+6, r25	; 0x06
     4fa:	8f 83       	std	Y+7, r24	; 0x07
     4fc:	88 e2       	ldi	r24, 0x28	; 40
     4fe:	88 87       	std	Y+8, r24	; 0x08
     500:	80 e3       	ldi	r24, 0x30	; 48
     502:	89 87       	std	Y+9, r24	; 0x09
     504:	88 e7       	ldi	r24, 0x78	; 120
     506:	8a 87       	std	Y+10, r24	; 0x0a
     508:	db 86       	std	Y+11, r13	; 0x0b
     50a:	1c 87       	std	Y+12, r17	; 0x0c
     50c:	0d 87       	std	Y+13, r16	; 0x0d
     50e:	89 e2       	ldi	r24, 0x29	; 41
     510:	8e 87       	std	Y+14, r24	; 0x0e
     512:	1f 86       	std	Y+15, r1	; 0x0f
	OUT_STRING(string);						// Output Voltmeter reading
     514:	ce 01       	movw	r24, r28
     516:	01 96       	adiw	r24, 0x01	; 1
     518:	0e 94 9f 01 	call	0x33e	; 0x33e <OUT_STRING>
}
     51c:	2f 96       	adiw	r28, 0x0f	; 15
     51e:	cd bf       	out	0x3d, r28	; 61
     520:	de bf       	out	0x3e, r29	; 62
     522:	df 91       	pop	r29
     524:	cf 91       	pop	r28
     526:	1f 91       	pop	r17
     528:	0f 91       	pop	r16
     52a:	ff 90       	pop	r15
     52c:	ef 90       	pop	r14
     52e:	df 90       	pop	r13
     530:	bf 90       	pop	r11
     532:	af 90       	pop	r10
     534:	9f 90       	pop	r9
     536:	8f 90       	pop	r8
     538:	08 95       	ret

0000053a <cds>:
uint16_t cds(void);

/////////////////////////////////////FUNCTIONS///////////////////////////////////////
uint16_t cds(void)
{
	while (!ADCB.CH1.INTFLAGS);
     53a:	e0 e4       	ldi	r30, 0x40	; 64
     53c:	f2 e0       	ldi	r31, 0x02	; 2
     53e:	83 a5       	ldd	r24, Z+43	; 0x2b
     540:	88 23       	and	r24, r24
     542:	e9 f3       	breq	.-6      	; 0x53e <cds+0x4>
	ADCB.CH1.INTFLAGS = 0x01;
     544:	e0 e4       	ldi	r30, 0x40	; 64
     546:	f2 e0       	ldi	r31, 0x02	; 2
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	83 a7       	std	Z+43, r24	; 0x2b
	return ADCB.CH1.RES;
     54c:	84 a5       	ldd	r24, Z+44	; 0x2c
     54e:	95 a5       	ldd	r25, Z+45	; 0x2d
     550:	08 95       	ret

00000552 <keypad_init>:
void keyhold(void);

/////////////////////////////////////FUNCTIONS///////////////////////////////////////
void keypad_init(void)
{
	PORTF.PIN7CTRL = PORT_OPC_PULLUP_gc;		// Set OPC to Pull-Up for all Keypad pins
     552:	e0 ea       	ldi	r30, 0xA0	; 160
     554:	f6 e0       	ldi	r31, 0x06	; 6
     556:	88 e1       	ldi	r24, 0x18	; 24
     558:	87 8b       	std	Z+23, r24	; 0x17
	PORTF.PIN6CTRL = PORT_OPC_PULLUP_gc;
     55a:	86 8b       	std	Z+22, r24	; 0x16
	PORTF.PIN5CTRL = PORT_OPC_PULLUP_gc;
     55c:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN4CTRL = PORT_OPC_PULLUP_gc;
     55e:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN3CTRL = PORT_OPC_PULLUP_gc;
     560:	83 8b       	std	Z+19, r24	; 0x13
	PORTF.PIN2CTRL = PORT_OPC_PULLUP_gc;
     562:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.PIN1CTRL = PORT_OPC_PULLUP_gc;
     564:	81 8b       	std	Z+17, r24	; 0x11
	PORTF.PIN0CTRL = PORT_OPC_PULLUP_gc;
     566:	80 8b       	std	Z+16, r24	; 0x10
	
	PORTF.DIRSET = 0x0F;			// Set LSNibble of PortF as Output
     568:	8f e0       	ldi	r24, 0x0F	; 15
     56a:	81 83       	std	Z+1, r24	; 0x01
     56c:	08 95       	ret

0000056e <keyscan>:
{
	uint8_t input, index, line, key = 0xFF, i = 0;
	for (i = 0; i < 4; i++)	// Iterate columns
	{
		line = ~(0x01 << i) & 0x0F;		// Iterate shift 0x08 by i and not to hit each col
		PORTF.OUT = line;			// Output value for col
     56e:	e0 ea       	ldi	r30, 0xA0	; 160
     570:	f6 e0       	ldi	r31, 0x06	; 6
     572:	8e e0       	ldi	r24, 0x0E	; 14
     574:	84 83       	std	Z+4, r24	; 0x04
		asm volatile ("nop");
     576:	00 00       	nop
		input = PORTF.IN & 0xF0;	// Read Input and bitmask off Output bits
     578:	80 85       	ldd	r24, Z+8	; 0x08
     57a:	80 7f       	andi	r24, 0xF0	; 240
		
		if (input < 0xF0)
     57c:	80 3f       	cpi	r24, 0xF0	; 240
     57e:	a8 f0       	brcs	.+42     	; 0x5aa <keyscan+0x3c>
     580:	21 e0       	ldi	r18, 0x01	; 1
     582:	30 e0       	ldi	r19, 0x00	; 0
uint8_t keyscan(void)
{
	uint8_t input, index, line, key = 0xFF, i = 0;
	for (i = 0; i < 4; i++)	// Iterate columns
	{
		line = ~(0x01 << i) & 0x0F;		// Iterate shift 0x08 by i and not to hit each col
     584:	61 e0       	ldi	r22, 0x01	; 1
     586:	70 e0       	ldi	r23, 0x00	; 0
     588:	a9 01       	movw	r20, r18
     58a:	cb 01       	movw	r24, r22
     58c:	02 2e       	mov	r0, r18
     58e:	02 c0       	rjmp	.+4      	; 0x594 <keyscan+0x26>
     590:	88 0f       	add	r24, r24
     592:	99 1f       	adc	r25, r25
     594:	0a 94       	dec	r0
     596:	e2 f7       	brpl	.-8      	; 0x590 <keyscan+0x22>
     598:	80 95       	com	r24
     59a:	8f 70       	andi	r24, 0x0F	; 15
		PORTF.OUT = line;			// Output value for col
     59c:	84 83       	std	Z+4, r24	; 0x04
		asm volatile ("nop");
     59e:	00 00       	nop
		input = PORTF.IN & 0xF0;	// Read Input and bitmask off Output bits
     5a0:	80 85       	ldd	r24, Z+8	; 0x08
     5a2:	80 7f       	andi	r24, 0xF0	; 240
		
		if (input < 0xF0)
     5a4:	80 3f       	cpi	r24, 0xF0	; 240
     5a6:	f8 f4       	brcc	.+62     	; 0x5e6 <keyscan+0x78>
     5a8:	02 c0       	rjmp	.+4      	; 0x5ae <keyscan+0x40>
uint8_t keyscan(void)
{
	uint8_t input, index, line, key = 0xFF, i = 0;
	for (i = 0; i < 4; i++)	// Iterate columns
	{
		line = ~(0x01 << i) & 0x0F;		// Iterate shift 0x08 by i and not to hit each col
     5aa:	40 e0       	ldi	r20, 0x00	; 0
     5ac:	50 e0       	ldi	r21, 0x00	; 0
		asm volatile ("nop");
		input = PORTF.IN & 0xF0;	// Read Input and bitmask off Output bits
		
		if (input < 0xF0)
		{
			switch (input)
     5ae:	80 3b       	cpi	r24, 0xB0	; 176
     5b0:	61 f0       	breq	.+24     	; 0x5ca <keyscan+0x5c>
     5b2:	18 f4       	brcc	.+6      	; 0x5ba <keyscan+0x4c>
     5b4:	80 37       	cpi	r24, 0x70	; 112
     5b6:	59 f0       	breq	.+22     	; 0x5ce <keyscan+0x60>
     5b8:	0b c0       	rjmp	.+22     	; 0x5d0 <keyscan+0x62>
     5ba:	80 3d       	cpi	r24, 0xD0	; 208
     5bc:	21 f0       	breq	.+8      	; 0x5c6 <keyscan+0x58>
     5be:	80 3e       	cpi	r24, 0xE0	; 224
     5c0:	39 f4       	brne	.+14     	; 0x5d0 <keyscan+0x62>
			{
				case 0xE0:
					index = 0x00;
     5c2:	a0 e0       	ldi	r26, 0x00	; 0
     5c4:	05 c0       	rjmp	.+10     	; 0x5d0 <keyscan+0x62>
					break;
				case 0xD0:
					index = 0x01;
     5c6:	a1 e0       	ldi	r26, 0x01	; 1
					break;
     5c8:	03 c0       	rjmp	.+6      	; 0x5d0 <keyscan+0x62>
				case 0xB0:
					index = 0x02;
     5ca:	a2 e0       	ldi	r26, 0x02	; 2
					break;
     5cc:	01 c0       	rjmp	.+2      	; 0x5d0 <keyscan+0x62>
				case 0x70:
					index = 0x03;
     5ce:	a3 e0       	ldi	r26, 0x03	; 3
					break;
			}
			key = keys[index+4*i];
     5d0:	fa 01       	movw	r30, r20
     5d2:	ee 0f       	add	r30, r30
     5d4:	ff 1f       	adc	r31, r31
     5d6:	ee 0f       	add	r30, r30
     5d8:	ff 1f       	adc	r31, r31
     5da:	ea 0f       	add	r30, r26
     5dc:	f1 1d       	adc	r31, r1
     5de:	e6 5f       	subi	r30, 0xF6	; 246
     5e0:	ff 4d       	sbci	r31, 0xDF	; 223
     5e2:	80 81       	ld	r24, Z
			return key;
     5e4:	08 95       	ret
     5e6:	2f 5f       	subi	r18, 0xFF	; 255
     5e8:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint8_t keyscan(void)
{
	uint8_t input, index, line, key = 0xFF, i = 0;
	for (i = 0; i < 4; i++)	// Iterate columns
     5ea:	24 30       	cpi	r18, 0x04	; 4
     5ec:	31 05       	cpc	r19, r1
     5ee:	61 f6       	brne	.-104    	; 0x588 <keyscan+0x1a>
			}
			key = keys[index+4*i];
			return key;
		}
	}
	return key;
     5f0:	8f ef       	ldi	r24, 0xFF	; 255
}
     5f2:	08 95       	ret

000005f4 <keyhold>:

void keyhold(void) 
{
	while ((PORTF.IN & 0xF0) < 0xF0);
     5f4:	e0 ea       	ldi	r30, 0xA0	; 160
     5f6:	f6 e0       	ldi	r31, 0x06	; 6
     5f8:	80 85       	ldd	r24, Z+8	; 0x08
     5fa:	80 7f       	andi	r24, 0xF0	; 240
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	80 3f       	cpi	r24, 0xF0	; 240
     600:	91 05       	cpc	r25, r1
     602:	d4 f3       	brlt	.-12     	; 0x5f8 <keyhold+0x4>
     604:	08 95       	ret

00000606 <rough_delay>:
	}
}

/////////////////////////////////////FUNCTIONS///////////////////////////////////////
void rough_delay(void)
{
     606:	88 e9       	ldi	r24, 0x98	; 152
     608:	9a e3       	ldi	r25, 0x3A	; 58
	for (int i = 0; i < 15000; i++)
	{
		asm volatile ("nop");
     60a:	00 00       	nop
     60c:	01 97       	sbiw	r24, 0x01	; 1
}

/////////////////////////////////////FUNCTIONS///////////////////////////////////////
void rough_delay(void)
{
	for (int i = 0; i < 15000; i++)
     60e:	e9 f7       	brne	.-6      	; 0x60a <rough_delay+0x4>
	{
		asm volatile ("nop");
	}
}
     610:	08 95       	ret

00000612 <long_delay>:

void long_delay(void)
{
     612:	24 e1       	ldi	r18, 0x14	; 20
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	58 e9       	ldi	r21, 0x98	; 152
     618:	4a e3       	ldi	r20, 0x3A	; 58
     61a:	06 c0       	rjmp	.+12     	; 0x628 <long_delay+0x16>
	for (int i = 0; i < 20; i++)
	{
		for (int j = 0; j < 15000; j++)
		{
			asm volatile ("nop");
     61c:	00 00       	nop
     61e:	01 97       	sbiw	r24, 0x01	; 1

void long_delay(void)
{
	for (int i = 0; i < 20; i++)
	{
		for (int j = 0; j < 15000; j++)
     620:	e9 f7       	brne	.-6      	; 0x61c <long_delay+0xa>
     622:	21 50       	subi	r18, 0x01	; 1
     624:	31 09       	sbc	r19, r1
	}
}

void long_delay(void)
{
	for (int i = 0; i < 20; i++)
     626:	19 f0       	breq	.+6      	; 0x62e <long_delay+0x1c>
		asm volatile ("nop");
	}
}

void long_delay(void)
{
     628:	85 2f       	mov	r24, r21
     62a:	94 2f       	mov	r25, r20
     62c:	f7 cf       	rjmp	.-18     	; 0x61c <long_delay+0xa>
     62e:	08 95       	ret

00000630 <gen_seq>:
	}
	CLEAR_SCREEN();
}

void gen_seq(uint8_t diff, char *says)
{
     630:	8f 92       	push	r8
     632:	9f 92       	push	r9
     634:	bf 92       	push	r11
     636:	cf 92       	push	r12
     638:	df 92       	push	r13
     63a:	ef 92       	push	r14
     63c:	ff 92       	push	r15
     63e:	0f 93       	push	r16
     640:	1f 93       	push	r17
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
     646:	8b 01       	movw	r16, r22
	for (int i = 0; i < diff; i++)
     648:	88 2e       	mov	r8, r24
     64a:	91 2c       	mov	r9, r1
     64c:	18 14       	cp	r1, r8
     64e:	19 04       	cpc	r1, r9
     650:	9c f4       	brge	.+38     	; 0x678 <gen_seq+0x48>
     652:	eb 01       	movw	r28, r22
     654:	6b 01       	movw	r12, r22
     656:	c8 0e       	add	r12, r24
     658:	d1 1c       	adc	r13, r1
	{
		says[i] = (rand() % 4) + 'A';
     65a:	0e 94 a2 07 	call	0xf44	; 0xf44 <rand>
     65e:	83 70       	andi	r24, 0x03	; 3
     660:	90 78       	andi	r25, 0x80	; 128
     662:	99 23       	and	r25, r25
     664:	24 f4       	brge	.+8      	; 0x66e <gen_seq+0x3e>
     666:	01 97       	sbiw	r24, 0x01	; 1
     668:	8c 6f       	ori	r24, 0xFC	; 252
     66a:	9f 6f       	ori	r25, 0xFF	; 255
     66c:	01 96       	adiw	r24, 0x01	; 1
     66e:	8f 5b       	subi	r24, 0xBF	; 191
     670:	89 93       	st	Y+, r24
	CLEAR_SCREEN();
}

void gen_seq(uint8_t diff, char *says)
{
	for (int i = 0; i < diff; i++)
     672:	cc 15       	cp	r28, r12
     674:	dd 05       	cpc	r29, r13
     676:	89 f7       	brne	.-30     	; 0x65a <gen_seq+0x2a>
	{
		says[i] = (rand() % 4) + 'A';
	}
	int nulls = rand() % diff;
     678:	0e 94 a2 07 	call	0xf44	; 0xf44 <rand>
     67c:	b4 01       	movw	r22, r8
     67e:	0e 94 2f 07 	call	0xe5e	; 0xe5e <__divmodhi4>
     682:	7c 01       	movw	r14, r24
	for (int i = 0; i < nulls; i++)
     684:	18 16       	cp	r1, r24
     686:	19 06       	cpc	r1, r25
     688:	ac f4       	brge	.+42     	; 0x6b4 <gen_seq+0x84>
     68a:	c1 2c       	mov	r12, r1
     68c:	d1 2c       	mov	r13, r1
	{
		says[rand() % diff] = '0';
     68e:	0f 2e       	mov	r0, r31
     690:	f0 e3       	ldi	r31, 0x30	; 48
     692:	bf 2e       	mov	r11, r31
     694:	f0 2d       	mov	r31, r0
     696:	0e 94 a2 07 	call	0xf44	; 0xf44 <rand>
     69a:	b4 01       	movw	r22, r8
     69c:	0e 94 2f 07 	call	0xe5e	; 0xe5e <__divmodhi4>
     6a0:	f8 01       	movw	r30, r16
     6a2:	e8 0f       	add	r30, r24
     6a4:	f9 1f       	adc	r31, r25
     6a6:	b0 82       	st	Z, r11
	for (int i = 0; i < diff; i++)
	{
		says[i] = (rand() % 4) + 'A';
	}
	int nulls = rand() % diff;
	for (int i = 0; i < nulls; i++)
     6a8:	8f ef       	ldi	r24, 0xFF	; 255
     6aa:	c8 1a       	sub	r12, r24
     6ac:	d8 0a       	sbc	r13, r24
     6ae:	ce 14       	cp	r12, r14
     6b0:	df 04       	cpc	r13, r15
     6b2:	89 f7       	brne	.-30     	; 0x696 <gen_seq+0x66>
	{
		says[rand() % diff] = '0';
	}
	asm volatile ("nop");
     6b4:	00 00       	nop
}
     6b6:	df 91       	pop	r29
     6b8:	cf 91       	pop	r28
     6ba:	1f 91       	pop	r17
     6bc:	0f 91       	pop	r16
     6be:	ff 90       	pop	r15
     6c0:	ef 90       	pop	r14
     6c2:	df 90       	pop	r13
     6c4:	cf 90       	pop	r12
     6c6:	bf 90       	pop	r11
     6c8:	9f 90       	pop	r9
     6ca:	8f 90       	pop	r8
     6cc:	08 95       	ret

000006ce <wait_key>:

void wait_key(void)
{
	rough_delay();
     6ce:	0e 94 03 03 	call	0x606	; 0x606 <rough_delay>
	OUT_COMMAND(0xC0);			// Break line first
     6d2:	80 ec       	ldi	r24, 0xC0	; 192
     6d4:	0e 94 ae 01 	call	0x35c	; 0x35c <OUT_COMMAND>
	OUT_STRING(start);			// Output 'start' string
     6d8:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <start>
     6dc:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <start+0x1>
     6e0:	0e 94 9f 01 	call	0x33e	; 0x33e <OUT_STRING>
	uint8_t key;			
	do
	{							// Wait for a key press
		key = keyscan();
     6e4:	0e 94 b7 02 	call	0x56e	; 0x56e <keyscan>
	} while (key == 0xFF);
     6e8:	8f 3f       	cpi	r24, 0xFF	; 255
     6ea:	e1 f3       	breq	.-8      	; 0x6e4 <wait_key+0x16>
	keyhold();
     6ec:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <keyhold>
     6f0:	08 95       	ret

000006f2 <simon_says>:
}

uint8_t simon_says(uint8_t diff, uint8_t speed, char *says)
{
     6f2:	4f 92       	push	r4
     6f4:	5f 92       	push	r5
     6f6:	6f 92       	push	r6
     6f8:	7f 92       	push	r7
     6fa:	8f 92       	push	r8
     6fc:	9f 92       	push	r9
     6fe:	af 92       	push	r10
     700:	bf 92       	push	r11
     702:	cf 92       	push	r12
     704:	df 92       	push	r13
     706:	ef 92       	push	r14
     708:	ff 92       	push	r15
     70a:	0f 93       	push	r16
     70c:	1f 93       	push	r17
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
	uint8_t key = 0xFF, score = 0;		// Initialize variables
	for (uint8_t i = 0; i < diff; i++)	// 'diff'iculty determines length of Round
     712:	88 23       	and	r24, r24
     714:	09 f4       	brne	.+2      	; 0x718 <simon_says+0x26>
     716:	a1 c0       	rjmp	.+322    	; 0x85a <simon_says+0x168>
     718:	5a 01       	movw	r10, r20
     71a:	81 50       	subi	r24, 0x01	; 1
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	01 96       	adiw	r24, 0x01	; 1
     720:	3a 01       	movw	r6, r20
     722:	68 0e       	add	r6, r24
     724:	79 1e       	adc	r7, r25
     726:	81 2c       	mov	r8, r1
     728:	cf ef       	ldi	r28, 0xFF	; 255
		{											// Simon DID NOT say
			char c = (rand() % 4) + 'A';
			OUT_STRING("Press this: ");
			OUT_CHAR(c);
			keyhold();
			for (int i = 0; i < speed; i++)			// Speed determines how long player
     72a:	c6 2e       	mov	r12, r22
     72c:	d1 2c       	mov	r13, r1
		if (says[i] >= 'A' && says[i] <= 'D')					// Simon said
		{
			OUT_STRING("Simon says: ");
			OUT_CHAR(says[i]);
			keyhold();
			for (int i = 0; i < speed; i++)			// Speed determines how long player
     72e:	0f 2e       	mov	r0, r31
     730:	f8 ee       	ldi	r31, 0xE8	; 232
     732:	9f 2e       	mov	r9, r31
     734:	f0 2d       	mov	r31, r0
     736:	d3 e0       	ldi	r29, 0x03	; 3
     738:	25 01       	movw	r4, r10
uint8_t simon_says(uint8_t diff, uint8_t speed, char *says)
{
	uint8_t key = 0xFF, score = 0;		// Initialize variables
	for (uint8_t i = 0; i < diff; i++)	// 'diff'iculty determines length of Round
	{
		if (says[i] >= 'A' && says[i] <= 'D')					// Simon said
     73a:	f5 01       	movw	r30, r10
     73c:	80 81       	ld	r24, Z
     73e:	81 54       	subi	r24, 0x41	; 65
     740:	84 30       	cpi	r24, 0x04	; 4
     742:	08 f0       	brcs	.+2      	; 0x746 <simon_says+0x54>
     744:	3f c0       	rjmp	.+126    	; 0x7c4 <simon_says+0xd2>
		{
			OUT_STRING("Simon says: ");
     746:	8b e1       	ldi	r24, 0x1B	; 27
     748:	90 e2       	ldi	r25, 0x20	; 32
     74a:	0e 94 9f 01 	call	0x33e	; 0x33e <OUT_STRING>
			OUT_CHAR(says[i]);
     74e:	f5 01       	movw	r30, r10
     750:	80 81       	ld	r24, Z
     752:	0e 94 8c 01 	call	0x318	; 0x318 <OUT_CHAR>
			keyhold();
     756:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <keyhold>
			for (int i = 0; i < speed; i++)			// Speed determines how long player
     75a:	1c 14       	cp	r1, r12
     75c:	1d 04       	cpc	r1, r13
     75e:	84 f0       	brlt	.+32     	; 0x780 <simon_says+0x8e>
     760:	14 c0       	rjmp	.+40     	; 0x78a <simon_says+0x98>
			{										//	has to enter a key
				for (int j = 0; j < 1000; j++)
				{
					key = keyscan();
     762:	0e 94 b7 02 	call	0x56e	; 0x56e <keyscan>
     766:	c8 2f       	mov	r28, r24
					if (key != 0xFF) break;
     768:	8f 3f       	cpi	r24, 0xFF	; 255
     76a:	19 f4       	brne	.+6      	; 0x772 <simon_says+0x80>
     76c:	01 50       	subi	r16, 0x01	; 1
     76e:	11 09       	sbc	r17, r1
			OUT_STRING("Simon says: ");
			OUT_CHAR(says[i]);
			keyhold();
			for (int i = 0; i < speed; i++)			// Speed determines how long player
			{										//	has to enter a key
				for (int j = 0; j < 1000; j++)
     770:	c1 f7       	brne	.-16     	; 0x762 <simon_says+0x70>
		if (says[i] >= 'A' && says[i] <= 'D')					// Simon said
		{
			OUT_STRING("Simon says: ");
			OUT_CHAR(says[i]);
			keyhold();
			for (int i = 0; i < speed; i++)			// Speed determines how long player
     772:	ff ef       	ldi	r31, 0xFF	; 255
     774:	ef 1a       	sub	r14, r31
     776:	ff 0a       	sbc	r15, r31
     778:	ec 14       	cp	r14, r12
     77a:	fd 04       	cpc	r15, r13
     77c:	19 f4       	brne	.+6      	; 0x784 <simon_says+0x92>
     77e:	05 c0       	rjmp	.+10     	; 0x78a <simon_says+0x98>
     780:	e1 2c       	mov	r14, r1
     782:	f1 2c       	mov	r15, r1
}

uint8_t simon_says(uint8_t diff, uint8_t speed, char *says)
{
	uint8_t key = 0xFF, score = 0;		// Initialize variables
	for (uint8_t i = 0; i < diff; i++)	// 'diff'iculty determines length of Round
     784:	09 2d       	mov	r16, r9
     786:	1d 2f       	mov	r17, r29
     788:	ec cf       	rjmp	.-40     	; 0x762 <simon_says+0x70>
				{
					key = keyscan();
					if (key != 0xFF) break;
				}
			}
			if (conv_nibble(key & 0x0F) == says[i])	// Check if correct action
     78a:	8c 2f       	mov	r24, r28
     78c:	8f 70       	andi	r24, 0x0F	; 15
     78e:	0e 94 05 02 	call	0x40a	; 0x40a <conv_nibble>
     792:	f2 01       	movw	r30, r4
     794:	90 81       	ld	r25, Z
     796:	89 13       	cpse	r24, r25
     798:	09 c0       	rjmp	.+18     	; 0x7ac <simon_says+0xba>
			{
				OUT_COMMAND(0xC0);
     79a:	80 ec       	ldi	r24, 0xC0	; 192
     79c:	0e 94 ae 01 	call	0x35c	; 0x35c <OUT_COMMAND>
				OUT_STRING("CORRECT! :-)");
     7a0:	88 e2       	ldi	r24, 0x28	; 40
     7a2:	90 e2       	ldi	r25, 0x20	; 32
     7a4:	0e 94 9f 01 	call	0x33e	; 0x33e <OUT_STRING>
				score += 1;
     7a8:	83 94       	inc	r8
     7aa:	07 c0       	rjmp	.+14     	; 0x7ba <simon_says+0xc8>
			}
			else
			{
				OUT_COMMAND(0xC0);
     7ac:	80 ec       	ldi	r24, 0xC0	; 192
     7ae:	0e 94 ae 01 	call	0x35c	; 0x35c <OUT_COMMAND>
				OUT_STRING("WRONG! :-(");
     7b2:	85 e3       	ldi	r24, 0x35	; 53
     7b4:	90 e2       	ldi	r25, 0x20	; 32
     7b6:	0e 94 9f 01 	call	0x33e	; 0x33e <OUT_STRING>
			}
			long_delay();							// Wait before moving to next letter
     7ba:	0e 94 09 03 	call	0x612	; 0x612 <long_delay>
			CLEAR_SCREEN();
     7be:	0e 94 c1 01 	call	0x382	; 0x382 <CLEAR_SCREEN>
     7c2:	43 c0       	rjmp	.+134    	; 0x84a <simon_says+0x158>
		}
		else
		{											// Simon DID NOT say
			char c = (rand() % 4) + 'A';
     7c4:	0e 94 a2 07 	call	0xf44	; 0xf44 <rand>
     7c8:	8c 01       	movw	r16, r24
			OUT_STRING("Press this: ");
     7ca:	80 e4       	ldi	r24, 0x40	; 64
     7cc:	90 e2       	ldi	r25, 0x20	; 32
     7ce:	0e 94 9f 01 	call	0x33e	; 0x33e <OUT_STRING>
			long_delay();							// Wait before moving to next letter
			CLEAR_SCREEN();
		}
		else
		{											// Simon DID NOT say
			char c = (rand() % 4) + 'A';
     7d2:	c8 01       	movw	r24, r16
     7d4:	83 70       	andi	r24, 0x03	; 3
     7d6:	90 78       	andi	r25, 0x80	; 128
     7d8:	99 23       	and	r25, r25
     7da:	24 f4       	brge	.+8      	; 0x7e4 <simon_says+0xf2>
     7dc:	01 97       	sbiw	r24, 0x01	; 1
     7de:	8c 6f       	ori	r24, 0xFC	; 252
     7e0:	9f 6f       	ori	r25, 0xFF	; 255
     7e2:	01 96       	adiw	r24, 0x01	; 1
			OUT_STRING("Press this: ");
			OUT_CHAR(c);
     7e4:	8f 5b       	subi	r24, 0xBF	; 191
     7e6:	0e 94 8c 01 	call	0x318	; 0x318 <OUT_CHAR>
			keyhold();
     7ea:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <keyhold>
			for (int i = 0; i < speed; i++)			// Speed determines how long player
     7ee:	1c 14       	cp	r1, r12
     7f0:	1d 04       	cpc	r1, r13
     7f2:	84 f0       	brlt	.+32     	; 0x814 <simon_says+0x122>
     7f4:	14 c0       	rjmp	.+40     	; 0x81e <simon_says+0x12c>
			{										//	has to enter a key
				for (int j = 0; j < 1000; j++)
				{
					key = keyscan();
     7f6:	0e 94 b7 02 	call	0x56e	; 0x56e <keyscan>
     7fa:	c8 2f       	mov	r28, r24
					if (key != 0xFF) break;
     7fc:	8f 3f       	cpi	r24, 0xFF	; 255
     7fe:	19 f4       	brne	.+6      	; 0x806 <simon_says+0x114>
     800:	01 50       	subi	r16, 0x01	; 1
     802:	11 09       	sbc	r17, r1
			OUT_STRING("Press this: ");
			OUT_CHAR(c);
			keyhold();
			for (int i = 0; i < speed; i++)			// Speed determines how long player
			{										//	has to enter a key
				for (int j = 0; j < 1000; j++)
     804:	c1 f7       	brne	.-16     	; 0x7f6 <simon_says+0x104>
		{											// Simon DID NOT say
			char c = (rand() % 4) + 'A';
			OUT_STRING("Press this: ");
			OUT_CHAR(c);
			keyhold();
			for (int i = 0; i < speed; i++)			// Speed determines how long player
     806:	ff ef       	ldi	r31, 0xFF	; 255
     808:	ef 1a       	sub	r14, r31
     80a:	ff 0a       	sbc	r15, r31
     80c:	ec 14       	cp	r14, r12
     80e:	fd 04       	cpc	r15, r13
     810:	19 f4       	brne	.+6      	; 0x818 <simon_says+0x126>
     812:	05 c0       	rjmp	.+10     	; 0x81e <simon_says+0x12c>
     814:	e1 2c       	mov	r14, r1
     816:	f1 2c       	mov	r15, r1
		if (says[i] >= 'A' && says[i] <= 'D')					// Simon said
		{
			OUT_STRING("Simon says: ");
			OUT_CHAR(says[i]);
			keyhold();
			for (int i = 0; i < speed; i++)			// Speed determines how long player
     818:	09 2d       	mov	r16, r9
     81a:	1d 2f       	mov	r17, r29
     81c:	ec cf       	rjmp	.-40     	; 0x7f6 <simon_says+0x104>
				{
					key = keyscan();
					if (key != 0xFF) break;
				}
			}
			if (key == 0xFF)						// Check if correct action
     81e:	cf 3f       	cpi	r28, 0xFF	; 255
     820:	49 f4       	brne	.+18     	; 0x834 <simon_says+0x142>
			{
				OUT_COMMAND(0xC0);
     822:	80 ec       	ldi	r24, 0xC0	; 192
     824:	0e 94 ae 01 	call	0x35c	; 0x35c <OUT_COMMAND>
				OUT_STRING("Good Job!");
     828:	8d e4       	ldi	r24, 0x4D	; 77
     82a:	90 e2       	ldi	r25, 0x20	; 32
     82c:	0e 94 9f 01 	call	0x33e	; 0x33e <OUT_STRING>
				score += 1;
     830:	83 94       	inc	r8
     832:	07 c0       	rjmp	.+14     	; 0x842 <simon_says+0x150>
			}
			else
			{
				OUT_COMMAND(0xC0);
     834:	80 ec       	ldi	r24, 0xC0	; 192
     836:	0e 94 ae 01 	call	0x35c	; 0x35c <OUT_COMMAND>
				OUT_STRING("Simon didn't say");
     83a:	87 e5       	ldi	r24, 0x57	; 87
     83c:	90 e2       	ldi	r25, 0x20	; 32
     83e:	0e 94 9f 01 	call	0x33e	; 0x33e <OUT_STRING>
			}
			long_delay();							// Wait before moving to next letter
     842:	0e 94 09 03 	call	0x612	; 0x612 <long_delay>
			CLEAR_SCREEN();
     846:	0e 94 c1 01 	call	0x382	; 0x382 <CLEAR_SCREEN>
     84a:	8f ef       	ldi	r24, 0xFF	; 255
     84c:	a8 1a       	sub	r10, r24
     84e:	b8 0a       	sbc	r11, r24
}

uint8_t simon_says(uint8_t diff, uint8_t speed, char *says)
{
	uint8_t key = 0xFF, score = 0;		// Initialize variables
	for (uint8_t i = 0; i < diff; i++)	// 'diff'iculty determines length of Round
     850:	a6 14       	cp	r10, r6
     852:	b7 04       	cpc	r11, r7
     854:	09 f0       	breq	.+2      	; 0x858 <simon_says+0x166>
     856:	70 cf       	rjmp	.-288    	; 0x738 <simon_says+0x46>
     858:	01 c0       	rjmp	.+2      	; 0x85c <simon_says+0x16a>
	keyhold();
}

uint8_t simon_says(uint8_t diff, uint8_t speed, char *says)
{
	uint8_t key = 0xFF, score = 0;		// Initialize variables
     85a:	81 2c       	mov	r8, r1
			}
			long_delay();							// Wait before moving to next letter
			CLEAR_SCREEN();
		}
	}
	OUT_STRING("Score: ");							// Output Round score
     85c:	83 e8       	ldi	r24, 0x83	; 131
     85e:	90 e2       	ldi	r25, 0x20	; 32
     860:	0e 94 9f 01 	call	0x33e	; 0x33e <OUT_STRING>
	OUT_CHAR((char) score + '0');
     864:	80 e3       	ldi	r24, 0x30	; 48
     866:	88 0d       	add	r24, r8
     868:	0e 94 8c 01 	call	0x318	; 0x318 <OUT_CHAR>
	OUT_COMMAND(0xC0);
     86c:	80 ec       	ldi	r24, 0xC0	; 192
     86e:	0e 94 ae 01 	call	0x35c	; 0x35c <OUT_COMMAND>
	wait_key();										// Wait for player input before continuing
     872:	0e 94 67 03 	call	0x6ce	; 0x6ce <wait_key>
	return score;
}
     876:	88 2d       	mov	r24, r8
     878:	df 91       	pop	r29
     87a:	cf 91       	pop	r28
     87c:	1f 91       	pop	r17
     87e:	0f 91       	pop	r16
     880:	ff 90       	pop	r15
     882:	ef 90       	pop	r14
     884:	df 90       	pop	r13
     886:	cf 90       	pop	r12
     888:	bf 90       	pop	r11
     88a:	af 90       	pop	r10
     88c:	9f 90       	pop	r9
     88e:	8f 90       	pop	r8
     890:	7f 90       	pop	r7
     892:	6f 90       	pop	r6
     894:	5f 90       	pop	r5
     896:	4f 90       	pop	r4
     898:	08 95       	ret

0000089a <fun_func>:
		}
	}
}

void fun_func(void)
{
     89a:	ff 92       	push	r15
     89c:	0f 93       	push	r16
     89e:	1f 93       	push	r17
     8a0:	cf 93       	push	r28
     8a2:	df 93       	push	r29
	keyhold();
     8a4:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <keyhold>
	OUT_STRING(prompt);
     8a8:	80 91 08 20 	lds	r24, 0x2008	; 0x802008 <prompt>
     8ac:	90 91 09 20 	lds	r25, 0x2009	; 0x802009 <prompt+0x1>
     8b0:	0e 94 9f 01 	call	0x33e	; 0x33e <OUT_STRING>
	wait_key();
     8b4:	0e 94 67 03 	call	0x6ce	; 0x6ce <wait_key>
	
	CLEAR_SCREEN();
     8b8:	0e 94 c1 01 	call	0x382	; 0x382 <CLEAR_SCREEN>
	
	uint8_t key = 0xFF, diff = 5;
	
	OUT_STRING(quit);
     8bc:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <quit>
     8c0:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <quit+0x1>
     8c4:	0e 94 9f 01 	call	0x33e	; 0x33e <OUT_STRING>
	OUT_COMMAND(0xC0);
     8c8:	80 ec       	ldi	r24, 0xC0	; 192
     8ca:	0e 94 ae 01 	call	0x35c	; 0x35c <OUT_COMMAND>
	OUT_STRING("Press any key");
     8ce:	88 e6       	ldi	r24, 0x68	; 104
     8d0:	90 e2       	ldi	r25, 0x20	; 32
     8d2:	0e 94 9f 01 	call	0x33e	; 0x33e <OUT_STRING>
	do 
	{
		key = keyscan();
     8d6:	0e 94 b7 02 	call	0x56e	; 0x56e <keyscan>
	} while (key == 0xFF);
     8da:	8f 3f       	cpi	r24, 0xFF	; 255
     8dc:	e1 f3       	breq	.-8      	; 0x8d6 <fun_func+0x3c>
     8de:	6a c0       	rjmp	.+212    	; 0x9b4 <fun_func+0x11a>
			OUT_CHAR(conv_nibble(d1));
			OUT_CHAR(conv_nibble(d2));
		}
		else if (total_score > 9 && total_score < 20)
		{
			uint8_t d1 = total_score/10;
     8e0:	0f 2e       	mov	r0, r31
     8e2:	fd ec       	ldi	r31, 0xCD	; 205
     8e4:	ff 2e       	mov	r15, r31
     8e6:	f0 2d       	mov	r31, r0
	//wait_key();
	key == 0xFF;
	
	while (key != 0x0E)
	{	
		CLEAR_SCREEN();
     8e8:	0e 94 c1 01 	call	0x382	; 0x382 <CLEAR_SCREEN>
     8ec:	0e e1       	ldi	r16, 0x1E	; 30
     8ee:	d5 e0       	ldi	r29, 0x05	; 5
     8f0:	c1 e3       	ldi	r28, 0x31	; 49
		
		uint8_t total_score = 0;			// Initialize the total score
     8f2:	10 e0       	ldi	r17, 0x00	; 0
		char *says = 0;
		
		for (int i = 0; i < 3; i++)			// Play 3 rounds
		{
			OUT_STRING("Round ");
     8f4:	86 e7       	ldi	r24, 0x76	; 118
     8f6:	90 e2       	ldi	r25, 0x20	; 32
     8f8:	0e 94 9f 01 	call	0x33e	; 0x33e <OUT_STRING>
			OUT_CHAR((char) (i+1) + '0');
     8fc:	8c 2f       	mov	r24, r28
     8fe:	0e 94 8c 01 	call	0x318	; 0x318 <OUT_CHAR>
			gen_seq(diff + i*2, says);
     902:	60 e0       	ldi	r22, 0x00	; 0
     904:	70 e0       	ldi	r23, 0x00	; 0
     906:	8d 2f       	mov	r24, r29
     908:	0e 94 18 03 	call	0x630	; 0x630 <gen_seq>
			wait_key();
     90c:	0e 94 67 03 	call	0x6ce	; 0x6ce <wait_key>
			CLEAR_SCREEN();
     910:	0e 94 c1 01 	call	0x382	; 0x382 <CLEAR_SCREEN>
			total_score += simon_says(diff + i*2, 30-i*3, says);	// Play game & sum scores
     914:	40 e0       	ldi	r20, 0x00	; 0
     916:	50 e0       	ldi	r21, 0x00	; 0
     918:	60 2f       	mov	r22, r16
     91a:	8d 2f       	mov	r24, r29
     91c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <simon_says>
     920:	18 0f       	add	r17, r24
			keyhold();						// Wait for key press to continue to next round
     922:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <keyhold>
			CLEAR_SCREEN();
     926:	0e 94 c1 01 	call	0x382	; 0x382 <CLEAR_SCREEN>
     92a:	cf 5f       	subi	r28, 0xFF	; 255
     92c:	de 5f       	subi	r29, 0xFE	; 254
     92e:	03 50       	subi	r16, 0x03	; 3
		CLEAR_SCREEN();
		
		uint8_t total_score = 0;			// Initialize the total score
		char *says = 0;
		
		for (int i = 0; i < 3; i++)			// Play 3 rounds
     930:	c4 33       	cpi	r28, 0x34	; 52
     932:	01 f7       	brne	.-64     	; 0x8f4 <fun_func+0x5a>
			total_score += simon_says(diff + i*2, 30-i*3, says);	// Play game & sum scores
			keyhold();						// Wait for key press to continue to next round
			CLEAR_SCREEN();
		}
		
		OUT_STRING("Total Score: ");		// Output total score
     934:	8d e7       	ldi	r24, 0x7D	; 125
     936:	90 e2       	ldi	r25, 0x20	; 32
     938:	0e 94 9f 01 	call	0x33e	; 0x33e <OUT_STRING>
		if (total_score >= 20)				// Handles various ranges of numbers
     93c:	14 31       	cpi	r17, 0x14	; 20
     93e:	88 f0       	brcs	.+34     	; 0x962 <fun_func+0xc8>
		{
			uint8_t d1 = total_score/10;
     940:	1f 9d       	mul	r17, r15
     942:	81 2d       	mov	r24, r1
     944:	11 24       	eor	r1, r1
			uint8_t d2 = total_score - 20;
			OUT_CHAR(conv_nibble(d1));
     946:	86 95       	lsr	r24
     948:	86 95       	lsr	r24
     94a:	86 95       	lsr	r24
     94c:	0e 94 05 02 	call	0x40a	; 0x40a <conv_nibble>
     950:	0e 94 8c 01 	call	0x318	; 0x318 <OUT_CHAR>
			OUT_CHAR(conv_nibble(d2));
     954:	8c ee       	ldi	r24, 0xEC	; 236
     956:	81 0f       	add	r24, r17
     958:	0e 94 05 02 	call	0x40a	; 0x40a <conv_nibble>
     95c:	0e 94 8c 01 	call	0x318	; 0x318 <OUT_CHAR>
     960:	18 c0       	rjmp	.+48     	; 0x992 <fun_func+0xf8>
		}
		else if (total_score > 9 && total_score < 20)
     962:	c6 ef       	ldi	r28, 0xF6	; 246
     964:	c1 0f       	add	r28, r17
     966:	ca 30       	cpi	r28, 0x0A	; 10
     968:	80 f4       	brcc	.+32     	; 0x98a <fun_func+0xf0>
		{
			uint8_t d1 = total_score/10;
     96a:	1f 9d       	mul	r17, r15
     96c:	81 2d       	mov	r24, r1
     96e:	11 24       	eor	r1, r1
			uint8_t d2 = total_score - 10;
			OUT_CHAR(conv_nibble(d1));
     970:	86 95       	lsr	r24
     972:	86 95       	lsr	r24
     974:	86 95       	lsr	r24
     976:	0e 94 05 02 	call	0x40a	; 0x40a <conv_nibble>
     97a:	0e 94 8c 01 	call	0x318	; 0x318 <OUT_CHAR>
			OUT_CHAR(conv_nibble(d2));
     97e:	8c 2f       	mov	r24, r28
     980:	0e 94 05 02 	call	0x40a	; 0x40a <conv_nibble>
     984:	0e 94 8c 01 	call	0x318	; 0x318 <OUT_CHAR>
     988:	04 c0       	rjmp	.+8      	; 0x992 <fun_func+0xf8>
		} else
		{
			OUT_CHAR((char) total_score + '0');
     98a:	80 e3       	ldi	r24, 0x30	; 48
     98c:	81 0f       	add	r24, r17
     98e:	0e 94 8c 01 	call	0x318	; 0x318 <OUT_CHAR>
		}
		long_delay();						// Wait before moving on to options
     992:	0e 94 09 03 	call	0x612	; 0x612 <long_delay>
		
		CLEAR_SCREEN();
     996:	0e 94 c1 01 	call	0x382	; 0x382 <CLEAR_SCREEN>
		OUT_STRING(quit);
     99a:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <quit>
     99e:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <quit+0x1>
     9a2:	0e 94 9f 01 	call	0x33e	; 0x33e <OUT_STRING>
		wait_key();
     9a6:	0e 94 67 03 	call	0x6ce	; 0x6ce <wait_key>
		
		do 
		{									// Scan for keys
			key = keyscan();
     9aa:	0e 94 b7 02 	call	0x56e	; 0x56e <keyscan>
		} while (key == 0xFF);
     9ae:	8f 3f       	cpi	r24, 0xFF	; 255
     9b0:	e1 f3       	breq	.-8      	; 0x9aa <fun_func+0x110>
     9b2:	04 c0       	rjmp	.+8      	; 0x9bc <fun_func+0x122>
		key = keyscan();
	} while (key == 0xFF);
	//wait_key();
	key == 0xFF;
	
	while (key != 0x0E)
     9b4:	8e 30       	cpi	r24, 0x0E	; 14
     9b6:	09 f0       	breq	.+2      	; 0x9ba <fun_func+0x120>
     9b8:	93 cf       	rjmp	.-218    	; 0x8e0 <fun_func+0x46>
     9ba:	03 c0       	rjmp	.+6      	; 0x9c2 <fun_func+0x128>
     9bc:	8e 30       	cpi	r24, 0x0E	; 14
     9be:	09 f0       	breq	.+2      	; 0x9c2 <fun_func+0x128>
     9c0:	93 cf       	rjmp	.-218    	; 0x8e8 <fun_func+0x4e>
		do 
		{									// Scan for keys
			key = keyscan();
		} while (key == 0xFF);
	}
	CLEAR_SCREEN();
     9c2:	0e 94 c1 01 	call	0x382	; 0x382 <CLEAR_SCREEN>
}
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	1f 91       	pop	r17
     9cc:	0f 91       	pop	r16
     9ce:	ff 90       	pop	r15
     9d0:	08 95       	ret

000009d2 <quiz>:
	wait_key();										// Wait for player input before continuing
	return score;
}

uint8_t quiz(void)
{
     9d2:	0f 93       	push	r16
     9d4:	1f 93       	push	r17
     9d6:	cf 93       	push	r28
     9d8:	df 93       	push	r29
	CLEAR_SCREEN();
     9da:	0e 94 c1 01 	call	0x382	; 0x382 <CLEAR_SCREEN>
	
	uint8_t head = 0x80, tail = 0x80;
     9de:	c0 e8       	ldi	r28, 0x80	; 128
	for (int i = 0; i < 5; i++)
	{
		OUT_CHAR(0xFF);
     9e0:	8f ef       	ldi	r24, 0xFF	; 255
     9e2:	0e 94 8c 01 	call	0x318	; 0x318 <OUT_CHAR>
		rough_delay();
     9e6:	0e 94 03 03 	call	0x606	; 0x606 <rough_delay>
		head++;
     9ea:	cf 5f       	subi	r28, 0xFF	; 255
uint8_t quiz(void)
{
	CLEAR_SCREEN();
	
	uint8_t head = 0x80, tail = 0x80;
	for (int i = 0; i < 5; i++)
     9ec:	c5 38       	cpi	r28, 0x85	; 133
     9ee:	c1 f7       	brne	.-16     	; 0x9e0 <quiz+0xe>
     9f0:	d0 e8       	ldi	r29, 0x80	; 128
		rough_delay();
		head++;
		tail++;
		if (head >= 0x94)
		{
			head = 0x80;
     9f2:	00 e8       	ldi	r16, 0x80	; 128
		head++;
	}
	uint8_t key = 0xFF;
	do 
	{
		key = keyscan();
     9f4:	0e 94 b7 02 	call	0x56e	; 0x56e <keyscan>
     9f8:	18 2f       	mov	r17, r24
		OUT_COMMAND(tail);
     9fa:	8d 2f       	mov	r24, r29
     9fc:	0e 94 ae 01 	call	0x35c	; 0x35c <OUT_COMMAND>
		OUT_CHAR(0x20);
     a00:	80 e2       	ldi	r24, 0x20	; 32
     a02:	0e 94 8c 01 	call	0x318	; 0x318 <OUT_CHAR>
		rough_delay();
     a06:	0e 94 03 03 	call	0x606	; 0x606 <rough_delay>
		OUT_COMMAND(head);
     a0a:	8c 2f       	mov	r24, r28
     a0c:	0e 94 ae 01 	call	0x35c	; 0x35c <OUT_COMMAND>
		OUT_CHAR(0xFF);
     a10:	8f ef       	ldi	r24, 0xFF	; 255
     a12:	0e 94 8c 01 	call	0x318	; 0x318 <OUT_CHAR>
		rough_delay();
     a16:	0e 94 03 03 	call	0x606	; 0x606 <rough_delay>
		head++;
     a1a:	cf 5f       	subi	r28, 0xFF	; 255
		tail++;
     a1c:	df 5f       	subi	r29, 0xFF	; 255
		if (head >= 0x94)
     a1e:	c4 39       	cpi	r28, 0x94	; 148
     a20:	08 f0       	brcs	.+2      	; 0xa24 <quiz+0x52>
		{
			head = 0x80;
     a22:	c0 2f       	mov	r28, r16
		}
		if (tail >= 0x94)
     a24:	d4 39       	cpi	r29, 0x94	; 148
     a26:	08 f0       	brcs	.+2      	; 0xa2a <quiz+0x58>
		{
			tail = 0x80;
     a28:	d0 2f       	mov	r29, r16
		}
	} while (key == 0xFF);
     a2a:	1f 3f       	cpi	r17, 0xFF	; 255
     a2c:	19 f3       	breq	.-58     	; 0x9f4 <quiz+0x22>
	return key;
     a2e:	81 2f       	mov	r24, r17
     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	1f 91       	pop	r17
     a36:	0f 91       	pop	r16
     a38:	08 95       	ret

00000a3a <main>:
char *quit = "Press * to quit.";

///////////////////////////////////MAIN FUNCTION/////////////////////////////////////
int main(void)
{
	ebi_init();
     a3a:	0e 94 39 01 	call	0x272	; 0x272 <ebi_init>
	lcd_init();
     a3e:	0e 94 5f 01 	call	0x2be	; 0x2be <lcd_init>
	adc_init();
     a42:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <adc_init>
	keypad_init();
     a46:	0e 94 a9 02 	call	0x552	; 0x552 <keypad_init>
	srand(time(NULL));
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	0e 94 26 01 	call	0x24c	; 0x24c <time>
     a52:	cb 01       	movw	r24, r22
     a54:	0e 94 a6 07 	call	0xf4c	; 0xf4c <srand>
	
	
	uint8_t key, loop_key = 0xFF;
     a58:	cf ef       	ldi	r28, 0xFF	; 255
			loop_key = quiz();
		}
		else
		{										// Perform a custom operation
			CLEAR_SCREEN();
			fun_func();
     a5a:	df ef       	ldi	r29, 0xFF	; 255
			if (cds_volt < 256)
			{
				__far_mem_write(CS0_Start, 0x01);
			} else
			{
				__far_mem_write(CS0_Start, 0x00);
     a5c:	0f 2e       	mov	r0, r31
     a5e:	c1 2c       	mov	r12, r1
     a60:	f0 e8       	ldi	r31, 0x80	; 128
     a62:	df 2e       	mov	r13, r31
     a64:	f8 e2       	ldi	r31, 0x28	; 40
     a66:	ef 2e       	mov	r14, r31
     a68:	f1 2c       	mov	r15, r1
     a6a:	f0 2d       	mov	r31, r0
     a6c:	00 e0       	ldi	r16, 0x00	; 0
		{
			CLEAR_SCREEN();
			uint16_t cds_volt = cds();
			if (cds_volt < 256)
			{
				__far_mem_write(CS0_Start, 0x01);
     a6e:	11 e0       	ldi	r17, 0x01	; 1
	
	
	uint8_t key, loop_key = 0xFF;
	while (1)
	{
		if (loop_key == 0xFF)					// If no loop key, scan for key
     a70:	cf 3f       	cpi	r28, 0xFF	; 255
     a72:	29 f4       	brne	.+10     	; 0xa7e <main+0x44>
		{
			do 
			{
				key = keyscan();
     a74:	0e 94 b7 02 	call	0x56e	; 0x56e <keyscan>
     a78:	c8 2f       	mov	r28, r24
			} while (key == 0xFF);
     a7a:	8f 3f       	cpi	r24, 0xFF	; 255
     a7c:	d9 f3       	breq	.-10     	; 0xa74 <main+0x3a>
		{										// Else a loop key has been read, use it
			key = loop_key;
			loop_key = 0xFF;
		}
		
		if (key <= 0x01)						// Toggle LCD On/Off
     a7e:	c2 30       	cpi	r28, 0x02	; 2
     a80:	20 f4       	brcc	.+8      	; 0xa8a <main+0x50>
		{
			lcd_toggle();
     a82:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <lcd_toggle>
     a86:	cd 2f       	mov	r28, r29
     a88:	50 c0       	rjmp	.+160    	; 0xb2a <main+0xf0>
		} 
		else if (key <= 0x03)					// Display ADC Voltage reading from Potentiometer
     a8a:	c4 30       	cpi	r28, 0x04	; 4
     a8c:	70 f4       	brcc	.+28     	; 0xaaa <main+0x70>
		{
			CLEAR_SCREEN();
     a8e:	0e 94 c1 01 	call	0x382	; 0x382 <CLEAR_SCREEN>
			do 
			{
				lcd_voltage(adc_pot());
     a92:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <adc_pot>
     a96:	0e 94 0b 02 	call	0x416	; 0x416 <lcd_voltage>
				rough_delay();
     a9a:	0e 94 03 03 	call	0x606	; 0x606 <rough_delay>
				loop_key = keyscan();
     a9e:	0e 94 b7 02 	call	0x56e	; 0x56e <keyscan>
     aa2:	c8 2f       	mov	r28, r24
			} while (loop_key == 0xFF);
     aa4:	8f 3f       	cpi	r24, 0xFF	; 255
     aa6:	a9 f3       	breq	.-22     	; 0xa92 <main+0x58>
     aa8:	40 c0       	rjmp	.+128    	; 0xb2a <main+0xf0>
		}
		else if (key <= 0x05)					// Send "Nick Imamshah" to LCD Screen
     aaa:	c6 30       	cpi	r28, 0x06	; 6
     aac:	40 f4       	brcc	.+16     	; 0xabe <main+0x84>
		{
			CLEAR_SCREEN();
     aae:	0e 94 c1 01 	call	0x382	; 0x382 <CLEAR_SCREEN>
			OUT_STRING("Nick Imamshah");
     ab2:	8b e8       	ldi	r24, 0x8B	; 139
     ab4:	90 e2       	ldi	r25, 0x20	; 32
     ab6:	0e 94 9f 01 	call	0x33e	; 0x33e <OUT_STRING>
     aba:	cd 2f       	mov	r28, r29
     abc:	36 c0       	rjmp	.+108    	; 0xb2a <main+0xf0>
		}
		else if (key <= 0x07)					// Send phrase to LCD Screen on both lines
     abe:	c8 30       	cpi	r28, 0x08	; 8
     ac0:	78 f4       	brcc	.+30     	; 0xae0 <main+0xa6>
		{
			CLEAR_SCREEN();
     ac2:	0e 94 c1 01 	call	0x382	; 0x382 <CLEAR_SCREEN>
			OUT_STRING("May the Schwartz");
     ac6:	89 e9       	ldi	r24, 0x99	; 153
     ac8:	90 e2       	ldi	r25, 0x20	; 32
     aca:	0e 94 9f 01 	call	0x33e	; 0x33e <OUT_STRING>
			OUT_COMMAND(0xC0);
     ace:	80 ec       	ldi	r24, 0xC0	; 192
     ad0:	0e 94 ae 01 	call	0x35c	; 0x35c <OUT_COMMAND>
			OUT_STRING("be with you!");
     ad4:	8a ea       	ldi	r24, 0xAA	; 170
     ad6:	90 e2       	ldi	r25, 0x20	; 32
     ad8:	0e 94 9f 01 	call	0x33e	; 0x33e <OUT_STRING>
     adc:	cd 2f       	mov	r28, r29
     ade:	25 c0       	rjmp	.+74     	; 0xb2a <main+0xf0>
		}
		else if (key >= 0x0E && key < 0xFF)		// Clear the LCD Screen and control LED with CdS ADC reading
     ae0:	82 ef       	ldi	r24, 0xF2	; 242
     ae2:	8c 0f       	add	r24, r28
     ae4:	81 3f       	cpi	r24, 0xF1	; 241
     ae6:	b0 f4       	brcc	.+44     	; 0xb14 <main+0xda>
		{
			CLEAR_SCREEN();
     ae8:	0e 94 c1 01 	call	0x382	; 0x382 <CLEAR_SCREEN>
			uint16_t cds_volt = cds();
     aec:	0e 94 9d 02 	call	0x53a	; 0x53a <cds>
			if (cds_volt < 256)
     af0:	8f 3f       	cpi	r24, 0xFF	; 255
     af2:	91 05       	cpc	r25, r1
     af4:	09 f0       	breq	.+2      	; 0xaf8 <main+0xbe>
     af6:	38 f4       	brcc	.+14     	; 0xb06 <main+0xcc>
			{
				__far_mem_write(CS0_Start, 0x01);
     af8:	0b b6       	in	r0, 0x3b	; 59
     afa:	eb be       	out	0x3b, r14	; 59
     afc:	f6 01       	movw	r30, r12
     afe:	10 83       	st	Z, r17
     b00:	0b be       	out	0x3b, r0	; 59
     b02:	cd 2f       	mov	r28, r29
     b04:	12 c0       	rjmp	.+36     	; 0xb2a <main+0xf0>
			} else
			{
				__far_mem_write(CS0_Start, 0x00);
     b06:	0b b6       	in	r0, 0x3b	; 59
     b08:	eb be       	out	0x3b, r14	; 59
     b0a:	f6 01       	movw	r30, r12
     b0c:	00 83       	st	Z, r16
     b0e:	0b be       	out	0x3b, r0	; 59
     b10:	cd 2f       	mov	r28, r29
     b12:	0b c0       	rjmp	.+22     	; 0xb2a <main+0xf0>
			}
		}
		else if (key == 0x0C)
     b14:	cc 30       	cpi	r28, 0x0C	; 12
     b16:	21 f4       	brne	.+8      	; 0xb20 <main+0xe6>
		{
			loop_key = quiz();
     b18:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <quiz>
     b1c:	c8 2f       	mov	r28, r24
     b1e:	05 c0       	rjmp	.+10     	; 0xb2a <main+0xf0>
		}
		else
		{										// Perform a custom operation
			CLEAR_SCREEN();
     b20:	0e 94 c1 01 	call	0x382	; 0x382 <CLEAR_SCREEN>
			fun_func();
     b24:	0e 94 4d 04 	call	0x89a	; 0x89a <fun_func>
     b28:	cd 2f       	mov	r28, r29
		}
		
		keyhold();
     b2a:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <keyhold>
	}
     b2e:	a0 cf       	rjmp	.-192    	; 0xa70 <main+0x36>

00000b30 <__subsf3>:
     b30:	50 58       	subi	r21, 0x80	; 128

00000b32 <__addsf3>:
     b32:	bb 27       	eor	r27, r27
     b34:	aa 27       	eor	r26, r26
     b36:	0e 94 b0 05 	call	0xb60	; 0xb60 <__addsf3x>
     b3a:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__fp_round>
     b3e:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <__fp_pscA>
     b42:	38 f0       	brcs	.+14     	; 0xb52 <__addsf3+0x20>
     b44:	0e 94 81 06 	call	0xd02	; 0xd02 <__fp_pscB>
     b48:	20 f0       	brcs	.+8      	; 0xb52 <__addsf3+0x20>
     b4a:	39 f4       	brne	.+14     	; 0xb5a <__addsf3+0x28>
     b4c:	9f 3f       	cpi	r25, 0xFF	; 255
     b4e:	19 f4       	brne	.+6      	; 0xb56 <__addsf3+0x24>
     b50:	26 f4       	brtc	.+8      	; 0xb5a <__addsf3+0x28>
     b52:	0c 94 77 06 	jmp	0xcee	; 0xcee <__fp_nan>
     b56:	0e f4       	brtc	.+2      	; 0xb5a <__addsf3+0x28>
     b58:	e0 95       	com	r30
     b5a:	e7 fb       	bst	r30, 7
     b5c:	0c 94 71 06 	jmp	0xce2	; 0xce2 <__fp_inf>

00000b60 <__addsf3x>:
     b60:	e9 2f       	mov	r30, r25
     b62:	0e 94 99 06 	call	0xd32	; 0xd32 <__fp_split3>
     b66:	58 f3       	brcs	.-42     	; 0xb3e <__addsf3+0xc>
     b68:	ba 17       	cp	r27, r26
     b6a:	62 07       	cpc	r22, r18
     b6c:	73 07       	cpc	r23, r19
     b6e:	84 07       	cpc	r24, r20
     b70:	95 07       	cpc	r25, r21
     b72:	20 f0       	brcs	.+8      	; 0xb7c <__addsf3x+0x1c>
     b74:	79 f4       	brne	.+30     	; 0xb94 <__addsf3x+0x34>
     b76:	a6 f5       	brtc	.+104    	; 0xbe0 <__addsf3x+0x80>
     b78:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <__fp_zero>
     b7c:	0e f4       	brtc	.+2      	; 0xb80 <__addsf3x+0x20>
     b7e:	e0 95       	com	r30
     b80:	0b 2e       	mov	r0, r27
     b82:	ba 2f       	mov	r27, r26
     b84:	a0 2d       	mov	r26, r0
     b86:	0b 01       	movw	r0, r22
     b88:	b9 01       	movw	r22, r18
     b8a:	90 01       	movw	r18, r0
     b8c:	0c 01       	movw	r0, r24
     b8e:	ca 01       	movw	r24, r20
     b90:	a0 01       	movw	r20, r0
     b92:	11 24       	eor	r1, r1
     b94:	ff 27       	eor	r31, r31
     b96:	59 1b       	sub	r21, r25
     b98:	99 f0       	breq	.+38     	; 0xbc0 <__addsf3x+0x60>
     b9a:	59 3f       	cpi	r21, 0xF9	; 249
     b9c:	50 f4       	brcc	.+20     	; 0xbb2 <__addsf3x+0x52>
     b9e:	50 3e       	cpi	r21, 0xE0	; 224
     ba0:	68 f1       	brcs	.+90     	; 0xbfc <__addsf3x+0x9c>
     ba2:	1a 16       	cp	r1, r26
     ba4:	f0 40       	sbci	r31, 0x00	; 0
     ba6:	a2 2f       	mov	r26, r18
     ba8:	23 2f       	mov	r18, r19
     baa:	34 2f       	mov	r19, r20
     bac:	44 27       	eor	r20, r20
     bae:	58 5f       	subi	r21, 0xF8	; 248
     bb0:	f3 cf       	rjmp	.-26     	; 0xb98 <__addsf3x+0x38>
     bb2:	46 95       	lsr	r20
     bb4:	37 95       	ror	r19
     bb6:	27 95       	ror	r18
     bb8:	a7 95       	ror	r26
     bba:	f0 40       	sbci	r31, 0x00	; 0
     bbc:	53 95       	inc	r21
     bbe:	c9 f7       	brne	.-14     	; 0xbb2 <__addsf3x+0x52>
     bc0:	7e f4       	brtc	.+30     	; 0xbe0 <__addsf3x+0x80>
     bc2:	1f 16       	cp	r1, r31
     bc4:	ba 0b       	sbc	r27, r26
     bc6:	62 0b       	sbc	r22, r18
     bc8:	73 0b       	sbc	r23, r19
     bca:	84 0b       	sbc	r24, r20
     bcc:	ba f0       	brmi	.+46     	; 0xbfc <__addsf3x+0x9c>
     bce:	91 50       	subi	r25, 0x01	; 1
     bd0:	a1 f0       	breq	.+40     	; 0xbfa <__addsf3x+0x9a>
     bd2:	ff 0f       	add	r31, r31
     bd4:	bb 1f       	adc	r27, r27
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	88 1f       	adc	r24, r24
     bdc:	c2 f7       	brpl	.-16     	; 0xbce <__addsf3x+0x6e>
     bde:	0e c0       	rjmp	.+28     	; 0xbfc <__addsf3x+0x9c>
     be0:	ba 0f       	add	r27, r26
     be2:	62 1f       	adc	r22, r18
     be4:	73 1f       	adc	r23, r19
     be6:	84 1f       	adc	r24, r20
     be8:	48 f4       	brcc	.+18     	; 0xbfc <__addsf3x+0x9c>
     bea:	87 95       	ror	r24
     bec:	77 95       	ror	r23
     bee:	67 95       	ror	r22
     bf0:	b7 95       	ror	r27
     bf2:	f7 95       	ror	r31
     bf4:	9e 3f       	cpi	r25, 0xFE	; 254
     bf6:	08 f0       	brcs	.+2      	; 0xbfa <__addsf3x+0x9a>
     bf8:	b0 cf       	rjmp	.-160    	; 0xb5a <__addsf3+0x28>
     bfa:	93 95       	inc	r25
     bfc:	88 0f       	add	r24, r24
     bfe:	08 f0       	brcs	.+2      	; 0xc02 <__addsf3x+0xa2>
     c00:	99 27       	eor	r25, r25
     c02:	ee 0f       	add	r30, r30
     c04:	97 95       	ror	r25
     c06:	87 95       	ror	r24
     c08:	08 95       	ret

00000c0a <__fixunssfsi>:
     c0a:	0e 94 a1 06 	call	0xd42	; 0xd42 <__fp_splitA>
     c0e:	88 f0       	brcs	.+34     	; 0xc32 <__fixunssfsi+0x28>
     c10:	9f 57       	subi	r25, 0x7F	; 127
     c12:	98 f0       	brcs	.+38     	; 0xc3a <__fixunssfsi+0x30>
     c14:	b9 2f       	mov	r27, r25
     c16:	99 27       	eor	r25, r25
     c18:	b7 51       	subi	r27, 0x17	; 23
     c1a:	b0 f0       	brcs	.+44     	; 0xc48 <__fixunssfsi+0x3e>
     c1c:	e1 f0       	breq	.+56     	; 0xc56 <__fixunssfsi+0x4c>
     c1e:	66 0f       	add	r22, r22
     c20:	77 1f       	adc	r23, r23
     c22:	88 1f       	adc	r24, r24
     c24:	99 1f       	adc	r25, r25
     c26:	1a f0       	brmi	.+6      	; 0xc2e <__fixunssfsi+0x24>
     c28:	ba 95       	dec	r27
     c2a:	c9 f7       	brne	.-14     	; 0xc1e <__fixunssfsi+0x14>
     c2c:	14 c0       	rjmp	.+40     	; 0xc56 <__fixunssfsi+0x4c>
     c2e:	b1 30       	cpi	r27, 0x01	; 1
     c30:	91 f0       	breq	.+36     	; 0xc56 <__fixunssfsi+0x4c>
     c32:	0e 94 bb 06 	call	0xd76	; 0xd76 <__fp_zero>
     c36:	b1 e0       	ldi	r27, 0x01	; 1
     c38:	08 95       	ret
     c3a:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <__fp_zero>
     c3e:	67 2f       	mov	r22, r23
     c40:	78 2f       	mov	r23, r24
     c42:	88 27       	eor	r24, r24
     c44:	b8 5f       	subi	r27, 0xF8	; 248
     c46:	39 f0       	breq	.+14     	; 0xc56 <__fixunssfsi+0x4c>
     c48:	b9 3f       	cpi	r27, 0xF9	; 249
     c4a:	cc f3       	brlt	.-14     	; 0xc3e <__fixunssfsi+0x34>
     c4c:	86 95       	lsr	r24
     c4e:	77 95       	ror	r23
     c50:	67 95       	ror	r22
     c52:	b3 95       	inc	r27
     c54:	d9 f7       	brne	.-10     	; 0xc4c <__fixunssfsi+0x42>
     c56:	3e f4       	brtc	.+14     	; 0xc66 <__fixunssfsi+0x5c>
     c58:	90 95       	com	r25
     c5a:	80 95       	com	r24
     c5c:	70 95       	com	r23
     c5e:	61 95       	neg	r22
     c60:	7f 4f       	sbci	r23, 0xFF	; 255
     c62:	8f 4f       	sbci	r24, 0xFF	; 255
     c64:	9f 4f       	sbci	r25, 0xFF	; 255
     c66:	08 95       	ret

00000c68 <__floatunsisf>:
     c68:	e8 94       	clt
     c6a:	09 c0       	rjmp	.+18     	; 0xc7e <__floatsisf+0x12>

00000c6c <__floatsisf>:
     c6c:	97 fb       	bst	r25, 7
     c6e:	3e f4       	brtc	.+14     	; 0xc7e <__floatsisf+0x12>
     c70:	90 95       	com	r25
     c72:	80 95       	com	r24
     c74:	70 95       	com	r23
     c76:	61 95       	neg	r22
     c78:	7f 4f       	sbci	r23, 0xFF	; 255
     c7a:	8f 4f       	sbci	r24, 0xFF	; 255
     c7c:	9f 4f       	sbci	r25, 0xFF	; 255
     c7e:	99 23       	and	r25, r25
     c80:	a9 f0       	breq	.+42     	; 0xcac <__floatsisf+0x40>
     c82:	f9 2f       	mov	r31, r25
     c84:	96 e9       	ldi	r25, 0x96	; 150
     c86:	bb 27       	eor	r27, r27
     c88:	93 95       	inc	r25
     c8a:	f6 95       	lsr	r31
     c8c:	87 95       	ror	r24
     c8e:	77 95       	ror	r23
     c90:	67 95       	ror	r22
     c92:	b7 95       	ror	r27
     c94:	f1 11       	cpse	r31, r1
     c96:	f8 cf       	rjmp	.-16     	; 0xc88 <__floatsisf+0x1c>
     c98:	fa f4       	brpl	.+62     	; 0xcd8 <__floatsisf+0x6c>
     c9a:	bb 0f       	add	r27, r27
     c9c:	11 f4       	brne	.+4      	; 0xca2 <__floatsisf+0x36>
     c9e:	60 ff       	sbrs	r22, 0
     ca0:	1b c0       	rjmp	.+54     	; 0xcd8 <__floatsisf+0x6c>
     ca2:	6f 5f       	subi	r22, 0xFF	; 255
     ca4:	7f 4f       	sbci	r23, 0xFF	; 255
     ca6:	8f 4f       	sbci	r24, 0xFF	; 255
     ca8:	9f 4f       	sbci	r25, 0xFF	; 255
     caa:	16 c0       	rjmp	.+44     	; 0xcd8 <__floatsisf+0x6c>
     cac:	88 23       	and	r24, r24
     cae:	11 f0       	breq	.+4      	; 0xcb4 <__floatsisf+0x48>
     cb0:	96 e9       	ldi	r25, 0x96	; 150
     cb2:	11 c0       	rjmp	.+34     	; 0xcd6 <__floatsisf+0x6a>
     cb4:	77 23       	and	r23, r23
     cb6:	21 f0       	breq	.+8      	; 0xcc0 <__floatsisf+0x54>
     cb8:	9e e8       	ldi	r25, 0x8E	; 142
     cba:	87 2f       	mov	r24, r23
     cbc:	76 2f       	mov	r23, r22
     cbe:	05 c0       	rjmp	.+10     	; 0xcca <__floatsisf+0x5e>
     cc0:	66 23       	and	r22, r22
     cc2:	71 f0       	breq	.+28     	; 0xce0 <__floatsisf+0x74>
     cc4:	96 e8       	ldi	r25, 0x86	; 134
     cc6:	86 2f       	mov	r24, r22
     cc8:	70 e0       	ldi	r23, 0x00	; 0
     cca:	60 e0       	ldi	r22, 0x00	; 0
     ccc:	2a f0       	brmi	.+10     	; 0xcd8 <__floatsisf+0x6c>
     cce:	9a 95       	dec	r25
     cd0:	66 0f       	add	r22, r22
     cd2:	77 1f       	adc	r23, r23
     cd4:	88 1f       	adc	r24, r24
     cd6:	da f7       	brpl	.-10     	; 0xcce <__floatsisf+0x62>
     cd8:	88 0f       	add	r24, r24
     cda:	96 95       	lsr	r25
     cdc:	87 95       	ror	r24
     cde:	97 f9       	bld	r25, 7
     ce0:	08 95       	ret

00000ce2 <__fp_inf>:
     ce2:	97 f9       	bld	r25, 7
     ce4:	9f 67       	ori	r25, 0x7F	; 127
     ce6:	80 e8       	ldi	r24, 0x80	; 128
     ce8:	70 e0       	ldi	r23, 0x00	; 0
     cea:	60 e0       	ldi	r22, 0x00	; 0
     cec:	08 95       	ret

00000cee <__fp_nan>:
     cee:	9f ef       	ldi	r25, 0xFF	; 255
     cf0:	80 ec       	ldi	r24, 0xC0	; 192
     cf2:	08 95       	ret

00000cf4 <__fp_pscA>:
     cf4:	00 24       	eor	r0, r0
     cf6:	0a 94       	dec	r0
     cf8:	16 16       	cp	r1, r22
     cfa:	17 06       	cpc	r1, r23
     cfc:	18 06       	cpc	r1, r24
     cfe:	09 06       	cpc	r0, r25
     d00:	08 95       	ret

00000d02 <__fp_pscB>:
     d02:	00 24       	eor	r0, r0
     d04:	0a 94       	dec	r0
     d06:	12 16       	cp	r1, r18
     d08:	13 06       	cpc	r1, r19
     d0a:	14 06       	cpc	r1, r20
     d0c:	05 06       	cpc	r0, r21
     d0e:	08 95       	ret

00000d10 <__fp_round>:
     d10:	09 2e       	mov	r0, r25
     d12:	03 94       	inc	r0
     d14:	00 0c       	add	r0, r0
     d16:	11 f4       	brne	.+4      	; 0xd1c <__fp_round+0xc>
     d18:	88 23       	and	r24, r24
     d1a:	52 f0       	brmi	.+20     	; 0xd30 <__fp_round+0x20>
     d1c:	bb 0f       	add	r27, r27
     d1e:	40 f4       	brcc	.+16     	; 0xd30 <__fp_round+0x20>
     d20:	bf 2b       	or	r27, r31
     d22:	11 f4       	brne	.+4      	; 0xd28 <__fp_round+0x18>
     d24:	60 ff       	sbrs	r22, 0
     d26:	04 c0       	rjmp	.+8      	; 0xd30 <__fp_round+0x20>
     d28:	6f 5f       	subi	r22, 0xFF	; 255
     d2a:	7f 4f       	sbci	r23, 0xFF	; 255
     d2c:	8f 4f       	sbci	r24, 0xFF	; 255
     d2e:	9f 4f       	sbci	r25, 0xFF	; 255
     d30:	08 95       	ret

00000d32 <__fp_split3>:
     d32:	57 fd       	sbrc	r21, 7
     d34:	90 58       	subi	r25, 0x80	; 128
     d36:	44 0f       	add	r20, r20
     d38:	55 1f       	adc	r21, r21
     d3a:	59 f0       	breq	.+22     	; 0xd52 <__fp_splitA+0x10>
     d3c:	5f 3f       	cpi	r21, 0xFF	; 255
     d3e:	71 f0       	breq	.+28     	; 0xd5c <__fp_splitA+0x1a>
     d40:	47 95       	ror	r20

00000d42 <__fp_splitA>:
     d42:	88 0f       	add	r24, r24
     d44:	97 fb       	bst	r25, 7
     d46:	99 1f       	adc	r25, r25
     d48:	61 f0       	breq	.+24     	; 0xd62 <__fp_splitA+0x20>
     d4a:	9f 3f       	cpi	r25, 0xFF	; 255
     d4c:	79 f0       	breq	.+30     	; 0xd6c <__fp_splitA+0x2a>
     d4e:	87 95       	ror	r24
     d50:	08 95       	ret
     d52:	12 16       	cp	r1, r18
     d54:	13 06       	cpc	r1, r19
     d56:	14 06       	cpc	r1, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	f2 cf       	rjmp	.-28     	; 0xd40 <__fp_split3+0xe>
     d5c:	46 95       	lsr	r20
     d5e:	f1 df       	rcall	.-30     	; 0xd42 <__fp_splitA>
     d60:	08 c0       	rjmp	.+16     	; 0xd72 <__fp_splitA+0x30>
     d62:	16 16       	cp	r1, r22
     d64:	17 06       	cpc	r1, r23
     d66:	18 06       	cpc	r1, r24
     d68:	99 1f       	adc	r25, r25
     d6a:	f1 cf       	rjmp	.-30     	; 0xd4e <__fp_splitA+0xc>
     d6c:	86 95       	lsr	r24
     d6e:	71 05       	cpc	r23, r1
     d70:	61 05       	cpc	r22, r1
     d72:	08 94       	sec
     d74:	08 95       	ret

00000d76 <__fp_zero>:
     d76:	e8 94       	clt

00000d78 <__fp_szero>:
     d78:	bb 27       	eor	r27, r27
     d7a:	66 27       	eor	r22, r22
     d7c:	77 27       	eor	r23, r23
     d7e:	cb 01       	movw	r24, r22
     d80:	97 f9       	bld	r25, 7
     d82:	08 95       	ret

00000d84 <__mulsf3>:
     d84:	0e 94 d5 06 	call	0xdaa	; 0xdaa <__mulsf3x>
     d88:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__fp_round>
     d8c:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <__fp_pscA>
     d90:	38 f0       	brcs	.+14     	; 0xda0 <__mulsf3+0x1c>
     d92:	0e 94 81 06 	call	0xd02	; 0xd02 <__fp_pscB>
     d96:	20 f0       	brcs	.+8      	; 0xda0 <__mulsf3+0x1c>
     d98:	95 23       	and	r25, r21
     d9a:	11 f0       	breq	.+4      	; 0xda0 <__mulsf3+0x1c>
     d9c:	0c 94 71 06 	jmp	0xce2	; 0xce2 <__fp_inf>
     da0:	0c 94 77 06 	jmp	0xcee	; 0xcee <__fp_nan>
     da4:	11 24       	eor	r1, r1
     da6:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <__fp_szero>

00000daa <__mulsf3x>:
     daa:	0e 94 99 06 	call	0xd32	; 0xd32 <__fp_split3>
     dae:	70 f3       	brcs	.-36     	; 0xd8c <__mulsf3+0x8>

00000db0 <__mulsf3_pse>:
     db0:	95 9f       	mul	r25, r21
     db2:	c1 f3       	breq	.-16     	; 0xda4 <__mulsf3+0x20>
     db4:	95 0f       	add	r25, r21
     db6:	50 e0       	ldi	r21, 0x00	; 0
     db8:	55 1f       	adc	r21, r21
     dba:	62 9f       	mul	r22, r18
     dbc:	f0 01       	movw	r30, r0
     dbe:	72 9f       	mul	r23, r18
     dc0:	bb 27       	eor	r27, r27
     dc2:	f0 0d       	add	r31, r0
     dc4:	b1 1d       	adc	r27, r1
     dc6:	63 9f       	mul	r22, r19
     dc8:	aa 27       	eor	r26, r26
     dca:	f0 0d       	add	r31, r0
     dcc:	b1 1d       	adc	r27, r1
     dce:	aa 1f       	adc	r26, r26
     dd0:	64 9f       	mul	r22, r20
     dd2:	66 27       	eor	r22, r22
     dd4:	b0 0d       	add	r27, r0
     dd6:	a1 1d       	adc	r26, r1
     dd8:	66 1f       	adc	r22, r22
     dda:	82 9f       	mul	r24, r18
     ddc:	22 27       	eor	r18, r18
     dde:	b0 0d       	add	r27, r0
     de0:	a1 1d       	adc	r26, r1
     de2:	62 1f       	adc	r22, r18
     de4:	73 9f       	mul	r23, r19
     de6:	b0 0d       	add	r27, r0
     de8:	a1 1d       	adc	r26, r1
     dea:	62 1f       	adc	r22, r18
     dec:	83 9f       	mul	r24, r19
     dee:	a0 0d       	add	r26, r0
     df0:	61 1d       	adc	r22, r1
     df2:	22 1f       	adc	r18, r18
     df4:	74 9f       	mul	r23, r20
     df6:	33 27       	eor	r19, r19
     df8:	a0 0d       	add	r26, r0
     dfa:	61 1d       	adc	r22, r1
     dfc:	23 1f       	adc	r18, r19
     dfe:	84 9f       	mul	r24, r20
     e00:	60 0d       	add	r22, r0
     e02:	21 1d       	adc	r18, r1
     e04:	82 2f       	mov	r24, r18
     e06:	76 2f       	mov	r23, r22
     e08:	6a 2f       	mov	r22, r26
     e0a:	11 24       	eor	r1, r1
     e0c:	9f 57       	subi	r25, 0x7F	; 127
     e0e:	50 40       	sbci	r21, 0x00	; 0
     e10:	9a f0       	brmi	.+38     	; 0xe38 <__mulsf3_pse+0x88>
     e12:	f1 f0       	breq	.+60     	; 0xe50 <__mulsf3_pse+0xa0>
     e14:	88 23       	and	r24, r24
     e16:	4a f0       	brmi	.+18     	; 0xe2a <__mulsf3_pse+0x7a>
     e18:	ee 0f       	add	r30, r30
     e1a:	ff 1f       	adc	r31, r31
     e1c:	bb 1f       	adc	r27, r27
     e1e:	66 1f       	adc	r22, r22
     e20:	77 1f       	adc	r23, r23
     e22:	88 1f       	adc	r24, r24
     e24:	91 50       	subi	r25, 0x01	; 1
     e26:	50 40       	sbci	r21, 0x00	; 0
     e28:	a9 f7       	brne	.-22     	; 0xe14 <__mulsf3_pse+0x64>
     e2a:	9e 3f       	cpi	r25, 0xFE	; 254
     e2c:	51 05       	cpc	r21, r1
     e2e:	80 f0       	brcs	.+32     	; 0xe50 <__mulsf3_pse+0xa0>
     e30:	0c 94 71 06 	jmp	0xce2	; 0xce2 <__fp_inf>
     e34:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <__fp_szero>
     e38:	5f 3f       	cpi	r21, 0xFF	; 255
     e3a:	e4 f3       	brlt	.-8      	; 0xe34 <__mulsf3_pse+0x84>
     e3c:	98 3e       	cpi	r25, 0xE8	; 232
     e3e:	d4 f3       	brlt	.-12     	; 0xe34 <__mulsf3_pse+0x84>
     e40:	86 95       	lsr	r24
     e42:	77 95       	ror	r23
     e44:	67 95       	ror	r22
     e46:	b7 95       	ror	r27
     e48:	f7 95       	ror	r31
     e4a:	e7 95       	ror	r30
     e4c:	9f 5f       	subi	r25, 0xFF	; 255
     e4e:	c1 f7       	brne	.-16     	; 0xe40 <__mulsf3_pse+0x90>
     e50:	fe 2b       	or	r31, r30
     e52:	88 0f       	add	r24, r24
     e54:	91 1d       	adc	r25, r1
     e56:	96 95       	lsr	r25
     e58:	87 95       	ror	r24
     e5a:	97 f9       	bld	r25, 7
     e5c:	08 95       	ret

00000e5e <__divmodhi4>:
     e5e:	97 fb       	bst	r25, 7
     e60:	07 2e       	mov	r0, r23
     e62:	16 f4       	brtc	.+4      	; 0xe68 <__divmodhi4+0xa>
     e64:	00 94       	com	r0
     e66:	07 d0       	rcall	.+14     	; 0xe76 <__divmodhi4_neg1>
     e68:	77 fd       	sbrc	r23, 7
     e6a:	09 d0       	rcall	.+18     	; 0xe7e <__divmodhi4_neg2>
     e6c:	0e 94 43 07 	call	0xe86	; 0xe86 <__udivmodhi4>
     e70:	07 fc       	sbrc	r0, 7
     e72:	05 d0       	rcall	.+10     	; 0xe7e <__divmodhi4_neg2>
     e74:	3e f4       	brtc	.+14     	; 0xe84 <__divmodhi4_exit>

00000e76 <__divmodhi4_neg1>:
     e76:	90 95       	com	r25
     e78:	81 95       	neg	r24
     e7a:	9f 4f       	sbci	r25, 0xFF	; 255
     e7c:	08 95       	ret

00000e7e <__divmodhi4_neg2>:
     e7e:	70 95       	com	r23
     e80:	61 95       	neg	r22
     e82:	7f 4f       	sbci	r23, 0xFF	; 255

00000e84 <__divmodhi4_exit>:
     e84:	08 95       	ret

00000e86 <__udivmodhi4>:
     e86:	aa 1b       	sub	r26, r26
     e88:	bb 1b       	sub	r27, r27
     e8a:	51 e1       	ldi	r21, 0x11	; 17
     e8c:	07 c0       	rjmp	.+14     	; 0xe9c <__udivmodhi4_ep>

00000e8e <__udivmodhi4_loop>:
     e8e:	aa 1f       	adc	r26, r26
     e90:	bb 1f       	adc	r27, r27
     e92:	a6 17       	cp	r26, r22
     e94:	b7 07       	cpc	r27, r23
     e96:	10 f0       	brcs	.+4      	; 0xe9c <__udivmodhi4_ep>
     e98:	a6 1b       	sub	r26, r22
     e9a:	b7 0b       	sbc	r27, r23

00000e9c <__udivmodhi4_ep>:
     e9c:	88 1f       	adc	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	5a 95       	dec	r21
     ea2:	a9 f7       	brne	.-22     	; 0xe8e <__udivmodhi4_loop>
     ea4:	80 95       	com	r24
     ea6:	90 95       	com	r25
     ea8:	bc 01       	movw	r22, r24
     eaa:	cd 01       	movw	r24, r26
     eac:	08 95       	ret

00000eae <do_rand>:
     eae:	8f 92       	push	r8
     eb0:	9f 92       	push	r9
     eb2:	af 92       	push	r10
     eb4:	bf 92       	push	r11
     eb6:	cf 92       	push	r12
     eb8:	df 92       	push	r13
     eba:	ef 92       	push	r14
     ebc:	ff 92       	push	r15
     ebe:	cf 93       	push	r28
     ec0:	df 93       	push	r29
     ec2:	ec 01       	movw	r28, r24
     ec4:	68 81       	ld	r22, Y
     ec6:	79 81       	ldd	r23, Y+1	; 0x01
     ec8:	8a 81       	ldd	r24, Y+2	; 0x02
     eca:	9b 81       	ldd	r25, Y+3	; 0x03
     ecc:	61 15       	cp	r22, r1
     ece:	71 05       	cpc	r23, r1
     ed0:	81 05       	cpc	r24, r1
     ed2:	91 05       	cpc	r25, r1
     ed4:	21 f4       	brne	.+8      	; 0xede <do_rand+0x30>
     ed6:	64 e2       	ldi	r22, 0x24	; 36
     ed8:	79 ed       	ldi	r23, 0xD9	; 217
     eda:	8b e5       	ldi	r24, 0x5B	; 91
     edc:	97 e0       	ldi	r25, 0x07	; 7
     ede:	2d e1       	ldi	r18, 0x1D	; 29
     ee0:	33 ef       	ldi	r19, 0xF3	; 243
     ee2:	41 e0       	ldi	r20, 0x01	; 1
     ee4:	50 e0       	ldi	r21, 0x00	; 0
     ee6:	0e 94 b1 07 	call	0xf62	; 0xf62 <__divmodsi4>
     eea:	49 01       	movw	r8, r18
     eec:	5a 01       	movw	r10, r20
     eee:	9b 01       	movw	r18, r22
     ef0:	ac 01       	movw	r20, r24
     ef2:	a7 ea       	ldi	r26, 0xA7	; 167
     ef4:	b1 e4       	ldi	r27, 0x41	; 65
     ef6:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__muluhisi3>
     efa:	6b 01       	movw	r12, r22
     efc:	7c 01       	movw	r14, r24
     efe:	ac ee       	ldi	r26, 0xEC	; 236
     f00:	b4 ef       	ldi	r27, 0xF4	; 244
     f02:	a5 01       	movw	r20, r10
     f04:	94 01       	movw	r18, r8
     f06:	0e 94 de 07 	call	0xfbc	; 0xfbc <__mulohisi3>
     f0a:	dc 01       	movw	r26, r24
     f0c:	cb 01       	movw	r24, r22
     f0e:	8c 0d       	add	r24, r12
     f10:	9d 1d       	adc	r25, r13
     f12:	ae 1d       	adc	r26, r14
     f14:	bf 1d       	adc	r27, r15
     f16:	b7 ff       	sbrs	r27, 7
     f18:	03 c0       	rjmp	.+6      	; 0xf20 <do_rand+0x72>
     f1a:	01 97       	sbiw	r24, 0x01	; 1
     f1c:	a1 09       	sbc	r26, r1
     f1e:	b0 48       	sbci	r27, 0x80	; 128
     f20:	88 83       	st	Y, r24
     f22:	99 83       	std	Y+1, r25	; 0x01
     f24:	aa 83       	std	Y+2, r26	; 0x02
     f26:	bb 83       	std	Y+3, r27	; 0x03
     f28:	9f 77       	andi	r25, 0x7F	; 127
     f2a:	df 91       	pop	r29
     f2c:	cf 91       	pop	r28
     f2e:	ff 90       	pop	r15
     f30:	ef 90       	pop	r14
     f32:	df 90       	pop	r13
     f34:	cf 90       	pop	r12
     f36:	bf 90       	pop	r11
     f38:	af 90       	pop	r10
     f3a:	9f 90       	pop	r9
     f3c:	8f 90       	pop	r8
     f3e:	08 95       	ret

00000f40 <rand_r>:
     f40:	0c 94 57 07 	jmp	0xeae	; 0xeae <do_rand>

00000f44 <rand>:
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	90 e2       	ldi	r25, 0x20	; 32
     f48:	0c 94 57 07 	jmp	0xeae	; 0xeae <do_rand>

00000f4c <srand>:
     f4c:	a0 e0       	ldi	r26, 0x00	; 0
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <__data_start>
     f54:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <__data_start+0x1>
     f58:	a0 93 02 20 	sts	0x2002, r26	; 0x802002 <__data_start+0x2>
     f5c:	b0 93 03 20 	sts	0x2003, r27	; 0x802003 <__data_start+0x3>
     f60:	08 95       	ret

00000f62 <__divmodsi4>:
     f62:	05 2e       	mov	r0, r21
     f64:	97 fb       	bst	r25, 7
     f66:	1e f4       	brtc	.+6      	; 0xf6e <__divmodsi4+0xc>
     f68:	00 94       	com	r0
     f6a:	0e 94 c8 07 	call	0xf90	; 0xf90 <__negsi2>
     f6e:	57 fd       	sbrc	r21, 7
     f70:	07 d0       	rcall	.+14     	; 0xf80 <__divmodsi4_neg2>
     f72:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <__udivmodsi4>
     f76:	07 fc       	sbrc	r0, 7
     f78:	03 d0       	rcall	.+6      	; 0xf80 <__divmodsi4_neg2>
     f7a:	4e f4       	brtc	.+18     	; 0xf8e <__divmodsi4_exit>
     f7c:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <__negsi2>

00000f80 <__divmodsi4_neg2>:
     f80:	50 95       	com	r21
     f82:	40 95       	com	r20
     f84:	30 95       	com	r19
     f86:	21 95       	neg	r18
     f88:	3f 4f       	sbci	r19, 0xFF	; 255
     f8a:	4f 4f       	sbci	r20, 0xFF	; 255
     f8c:	5f 4f       	sbci	r21, 0xFF	; 255

00000f8e <__divmodsi4_exit>:
     f8e:	08 95       	ret

00000f90 <__negsi2>:
     f90:	90 95       	com	r25
     f92:	80 95       	com	r24
     f94:	70 95       	com	r23
     f96:	61 95       	neg	r22
     f98:	7f 4f       	sbci	r23, 0xFF	; 255
     f9a:	8f 4f       	sbci	r24, 0xFF	; 255
     f9c:	9f 4f       	sbci	r25, 0xFF	; 255
     f9e:	08 95       	ret

00000fa0 <__muluhisi3>:
     fa0:	0e 94 05 08 	call	0x100a	; 0x100a <__umulhisi3>
     fa4:	a5 9f       	mul	r26, r21
     fa6:	90 0d       	add	r25, r0
     fa8:	b4 9f       	mul	r27, r20
     faa:	90 0d       	add	r25, r0
     fac:	a4 9f       	mul	r26, r20
     fae:	80 0d       	add	r24, r0
     fb0:	91 1d       	adc	r25, r1
     fb2:	11 24       	eor	r1, r1
     fb4:	08 95       	ret

00000fb6 <__mulshisi3>:
     fb6:	b7 ff       	sbrs	r27, 7
     fb8:	0c 94 d0 07 	jmp	0xfa0	; 0xfa0 <__muluhisi3>

00000fbc <__mulohisi3>:
     fbc:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__muluhisi3>
     fc0:	82 1b       	sub	r24, r18
     fc2:	93 0b       	sbc	r25, r19
     fc4:	08 95       	ret

00000fc6 <__udivmodsi4>:
     fc6:	a1 e2       	ldi	r26, 0x21	; 33
     fc8:	1a 2e       	mov	r1, r26
     fca:	aa 1b       	sub	r26, r26
     fcc:	bb 1b       	sub	r27, r27
     fce:	fd 01       	movw	r30, r26
     fd0:	0d c0       	rjmp	.+26     	; 0xfec <__udivmodsi4_ep>

00000fd2 <__udivmodsi4_loop>:
     fd2:	aa 1f       	adc	r26, r26
     fd4:	bb 1f       	adc	r27, r27
     fd6:	ee 1f       	adc	r30, r30
     fd8:	ff 1f       	adc	r31, r31
     fda:	a2 17       	cp	r26, r18
     fdc:	b3 07       	cpc	r27, r19
     fde:	e4 07       	cpc	r30, r20
     fe0:	f5 07       	cpc	r31, r21
     fe2:	20 f0       	brcs	.+8      	; 0xfec <__udivmodsi4_ep>
     fe4:	a2 1b       	sub	r26, r18
     fe6:	b3 0b       	sbc	r27, r19
     fe8:	e4 0b       	sbc	r30, r20
     fea:	f5 0b       	sbc	r31, r21

00000fec <__udivmodsi4_ep>:
     fec:	66 1f       	adc	r22, r22
     fee:	77 1f       	adc	r23, r23
     ff0:	88 1f       	adc	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	1a 94       	dec	r1
     ff6:	69 f7       	brne	.-38     	; 0xfd2 <__udivmodsi4_loop>
     ff8:	60 95       	com	r22
     ffa:	70 95       	com	r23
     ffc:	80 95       	com	r24
     ffe:	90 95       	com	r25
    1000:	9b 01       	movw	r18, r22
    1002:	ac 01       	movw	r20, r24
    1004:	bd 01       	movw	r22, r26
    1006:	cf 01       	movw	r24, r30
    1008:	08 95       	ret

0000100a <__umulhisi3>:
    100a:	a2 9f       	mul	r26, r18
    100c:	b0 01       	movw	r22, r0
    100e:	b3 9f       	mul	r27, r19
    1010:	c0 01       	movw	r24, r0
    1012:	a3 9f       	mul	r26, r19
    1014:	70 0d       	add	r23, r0
    1016:	81 1d       	adc	r24, r1
    1018:	11 24       	eor	r1, r1
    101a:	91 1d       	adc	r25, r1
    101c:	b2 9f       	mul	r27, r18
    101e:	70 0d       	add	r23, r0
    1020:	81 1d       	adc	r24, r1
    1022:	11 24       	eor	r1, r1
    1024:	91 1d       	adc	r25, r1
    1026:	08 95       	ret

00001028 <_exit>:
    1028:	f8 94       	cli

0000102a <__stop_program>:
    102a:	ff cf       	rjmp	.-2      	; 0x102a <__stop_program>
