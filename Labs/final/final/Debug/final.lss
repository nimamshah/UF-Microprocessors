
final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  0000045c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00802000  00802000  0000045c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000048c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000004d0  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000017a  00000000  00000000  000009ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002a8  00000000  00000000  00000b66  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  00000e10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004af  00000000  00000000  00000f04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001c4  00000000  00000000  000013b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001577  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
   8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
   c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  10:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  14:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  18:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  1c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  20:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  24:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  28:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  2c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  30:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  34:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  38:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  3c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  40:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  44:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  48:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  4c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  50:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  54:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  58:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  5c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  60:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  64:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  68:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  6c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  70:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  74:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  78:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  7c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  80:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  84:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  88:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  8c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  90:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  94:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  98:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  9c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  fc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 100:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 104:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 108:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 10c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 110:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 114:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 118:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 11c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 120:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 124:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 128:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 12c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 130:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 134:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 138:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 13c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 140:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 144:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 148:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 14c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 150:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 154:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 158:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 15c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 160:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 164:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 168:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 16c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 170:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 174:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 178:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 17c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 180:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 184:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 188:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 18c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 190:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 194:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 198:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 19c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_clear_bss>:
 214:	20 e2       	ldi	r18, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
 21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
 21e:	a2 30       	cpi	r26, 0x02	; 2
 220:	b2 07       	cpc	r27, r18
 222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
 224:	0e 94 50 01 	call	0x2a0	; 0x2a0 <main>
 228:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <_exit>

0000022c <__bad_interrupt>:
 22c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000230 <dac_init>:
void dac_write(uint16_t data);
int dac_data_empty(void);

/////////////////////////////////////FUNCTIONS///////////////////////////////////////
void dac_init(void) 
{
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	cd b7       	in	r28, 0x3d	; 61
 236:	de b7       	in	r29, 0x3e	; 62
	// Configure DAC for single channel 0 w/ reference AREFB and then enable channel and DAC.
	DACB.CTRLB = DAC_CHSEL_SINGLE_gc;
 238:	80 e2       	ldi	r24, 0x20	; 32
 23a:	93 e0       	ldi	r25, 0x03	; 3
 23c:	fc 01       	movw	r30, r24
 23e:	11 82       	std	Z+1, r1	; 0x01
	DACB.CTRLC = DAC_REFSEL_AREFB_gc;
 240:	80 e2       	ldi	r24, 0x20	; 32
 242:	93 e0       	ldi	r25, 0x03	; 3
 244:	28 e1       	ldi	r18, 0x18	; 24
 246:	fc 01       	movw	r30, r24
 248:	22 83       	std	Z+2, r18	; 0x02
	DACB.CTRLA = DAC_CH0EN_bm | DAC_ENABLE_bm; 
 24a:	80 e2       	ldi	r24, 0x20	; 32
 24c:	93 e0       	ldi	r25, 0x03	; 3
 24e:	25 e0       	ldi	r18, 0x05	; 5
 250:	fc 01       	movw	r30, r24
 252:	20 83       	st	Z, r18
}
 254:	df 91       	pop	r29
 256:	cf 91       	pop	r28
 258:	08 95       	ret

0000025a <dac_write>:

void dac_write(uint16_t data) 
{
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	1f 92       	push	r1
 260:	1f 92       	push	r1
 262:	cd b7       	in	r28, 0x3d	; 61
 264:	de b7       	in	r29, 0x3e	; 62
 266:	89 83       	std	Y+1, r24	; 0x01
 268:	9a 83       	std	Y+2, r25	; 0x02
	DACB.CH0DATA = data;
 26a:	80 e2       	ldi	r24, 0x20	; 32
 26c:	93 e0       	ldi	r25, 0x03	; 3
 26e:	29 81       	ldd	r18, Y+1	; 0x01
 270:	3a 81       	ldd	r19, Y+2	; 0x02
 272:	fc 01       	movw	r30, r24
 274:	20 8f       	std	Z+24, r18	; 0x18
 276:	31 8f       	std	Z+25, r19	; 0x19
}
 278:	0f 90       	pop	r0
 27a:	0f 90       	pop	r0
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	08 95       	ret

00000282 <dac_data_empty>:

int dac_data_empty(void) 
{
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	cd b7       	in	r28, 0x3d	; 61
 288:	de b7       	in	r29, 0x3e	; 62
	return (DACB.STATUS & DAC_CH0DRE_bm);
 28a:	80 e2       	ldi	r24, 0x20	; 32
 28c:	93 e0       	ldi	r25, 0x03	; 3
 28e:	fc 01       	movw	r30, r24
 290:	85 81       	ldd	r24, Z+5	; 0x05
 292:	88 2f       	mov	r24, r24
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	81 70       	andi	r24, 0x01	; 1
 298:	99 27       	eor	r25, r25
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	08 95       	ret

000002a0 <main>:

uint16_t vout = 0;

///////////////////////////////////MAIN FUNCTION/////////////////////////////////////
int main(void)
{
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
 2a4:	1f 92       	push	r1
 2a6:	cd b7       	in	r28, 0x3d	; 61
 2a8:	de b7       	in	r29, 0x3e	; 62
	usart_init();
 2aa:	0e 94 b5 01 	call	0x36a	; 0x36a <usart_init>
	dac_init();
 2ae:	0e 94 18 01 	call	0x230	; 0x230 <dac_init>
	while (!dac_data_empty());
 2b2:	00 00       	nop
 2b4:	0e 94 41 01 	call	0x282	; 0x282 <dac_data_empty>
 2b8:	89 2b       	or	r24, r25
 2ba:	e1 f3       	breq	.-8      	; 0x2b4 <main+0x14>
	dac_write(0);
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	0e 94 2d 01 	call	0x25a	; 0x25a <dac_write>
	
	char c;
	while (1)
	{
		c = IN_CHAR();
 2c4:	0e 94 df 01 	call	0x3be	; 0x3be <IN_CHAR>
 2c8:	89 83       	std	Y+1, r24	; 0x01
		adjust(c);
 2ca:	89 81       	ldd	r24, Y+1	; 0x01
 2cc:	0e 94 69 01 	call	0x2d2	; 0x2d2 <adjust>
	}
 2d0:	f9 cf       	rjmp	.-14     	; 0x2c4 <main+0x24>

000002d2 <adjust>:
}

/////////////////////////////////////FUNCTIONS///////////////////////////////////////
void adjust(char c)
{
 2d2:	cf 93       	push	r28
 2d4:	df 93       	push	r29
 2d6:	1f 92       	push	r1
 2d8:	cd b7       	in	r28, 0x3d	; 61
 2da:	de b7       	in	r29, 0x3e	; 62
 2dc:	89 83       	std	Y+1, r24	; 0x01
	asm volatile ("nop");
 2de:	00 00       	nop
	while (!dac_data_empty());
 2e0:	00 00       	nop
 2e2:	0e 94 41 01 	call	0x282	; 0x282 <dac_data_empty>
 2e6:	89 2b       	or	r24, r25
 2e8:	e1 f3       	breq	.-8      	; 0x2e2 <adjust+0x10>
	if (c == 'h' || c == 'H')
 2ea:	89 81       	ldd	r24, Y+1	; 0x01
 2ec:	88 36       	cpi	r24, 0x68	; 104
 2ee:	19 f0       	breq	.+6      	; 0x2f6 <adjust+0x24>
 2f0:	89 81       	ldd	r24, Y+1	; 0x01
 2f2:	88 34       	cpi	r24, 0x48	; 72
 2f4:	c9 f4       	brne	.+50     	; 0x328 <adjust+0x56>
	{
		// higher
		if (vout < (4095-409))
 2f6:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <_edata>
 2fa:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <_edata+0x1>
 2fe:	86 36       	cpi	r24, 0x66	; 102
 300:	9e 40       	sbci	r25, 0x0E	; 14
 302:	88 f4       	brcc	.+34     	; 0x326 <adjust+0x54>
		{
			vout += 409;
 304:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <_edata>
 308:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <_edata+0x1>
 30c:	87 56       	subi	r24, 0x67	; 103
 30e:	9e 4f       	sbci	r25, 0xFE	; 254
 310:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <_edata>
 314:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <_edata+0x1>
			dac_write(vout);
 318:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <_edata>
 31c:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <_edata+0x1>
 320:	0e 94 2d 01 	call	0x25a	; 0x25a <dac_write>
	asm volatile ("nop");
	while (!dac_data_empty());
	if (c == 'h' || c == 'H')
	{
		// higher
		if (vout < (4095-409))
 324:	1e c0       	rjmp	.+60     	; 0x362 <adjust+0x90>
 326:	1d c0       	rjmp	.+58     	; 0x362 <adjust+0x90>
		{
			vout += 409;
			dac_write(vout);
		}
	} else if (c == 'l' || c == 'L')
 328:	89 81       	ldd	r24, Y+1	; 0x01
 32a:	8c 36       	cpi	r24, 0x6C	; 108
 32c:	19 f0       	breq	.+6      	; 0x334 <adjust+0x62>
 32e:	89 81       	ldd	r24, Y+1	; 0x01
 330:	8c 34       	cpi	r24, 0x4C	; 76
 332:	b9 f4       	brne	.+46     	; 0x362 <adjust+0x90>
	{
		// lower
		if (vout > (0+408))
 334:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <_edata>
 338:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <_edata+0x1>
 33c:	89 39       	cpi	r24, 0x99	; 153
 33e:	91 40       	sbci	r25, 0x01	; 1
 340:	80 f0       	brcs	.+32     	; 0x362 <adjust+0x90>
		{
			vout -= 409;
 342:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <_edata>
 346:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <_edata+0x1>
 34a:	89 59       	subi	r24, 0x99	; 153
 34c:	91 40       	sbci	r25, 0x01	; 1
 34e:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <_edata>
 352:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <_edata+0x1>
			dac_write(vout);
 356:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <_edata>
 35a:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <_edata+0x1>
 35e:	0e 94 2d 01 	call	0x25a	; 0x25a <dac_write>
		}
	}
}
 362:	0f 90       	pop	r0
 364:	df 91       	pop	r29
 366:	cf 91       	pop	r28
 368:	08 95       	ret

0000036a <usart_init>:

void usart_init(void)
{
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	cd b7       	in	r28, 0x3d	; 61
 370:	de b7       	in	r29, 0x3e	; 62
	PORTD_DIRCLR = 0x04;
 372:	82 e6       	ldi	r24, 0x62	; 98
 374:	96 e0       	ldi	r25, 0x06	; 6
 376:	24 e0       	ldi	r18, 0x04	; 4
 378:	fc 01       	movw	r30, r24
 37a:	20 83       	st	Z, r18
	PORTQ_DIRSET = 0xA;
 37c:	81 ec       	ldi	r24, 0xC1	; 193
 37e:	97 e0       	ldi	r25, 0x07	; 7
 380:	2a e0       	ldi	r18, 0x0A	; 10
 382:	fc 01       	movw	r30, r24
 384:	20 83       	st	Z, r18
	PORTQ_OUTCLR = 0xA;
 386:	86 ec       	ldi	r24, 0xC6	; 198
 388:	97 e0       	ldi	r25, 0x07	; 7
 38a:	2a e0       	ldi	r18, 0x0A	; 10
 38c:	fc 01       	movw	r30, r24
 38e:	20 83       	st	Z, r18
	
	USARTD0.CTRLB = USART_RXEN_bm;
 390:	80 ea       	ldi	r24, 0xA0	; 160
 392:	99 e0       	ldi	r25, 0x09	; 9
 394:	20 e1       	ldi	r18, 0x10	; 16
 396:	fc 01       	movw	r30, r24
 398:	24 83       	std	Z+4, r18	; 0x04
	USARTD0.CTRLC = USART_PMODE_ODD_gc | USART_CHSIZE_8BIT_gc;
 39a:	80 ea       	ldi	r24, 0xA0	; 160
 39c:	99 e0       	ldi	r25, 0x09	; 9
 39e:	23 e3       	ldi	r18, 0x33	; 51
 3a0:	fc 01       	movw	r30, r24
 3a2:	25 83       	std	Z+5, r18	; 0x05
	
	USARTD0.BAUDCTRLA = (BSel & 0xFF);
 3a4:	80 ea       	ldi	r24, 0xA0	; 160
 3a6:	99 e0       	ldi	r25, 0x09	; 9
 3a8:	2c e0       	ldi	r18, 0x0C	; 12
 3aa:	fc 01       	movw	r30, r24
 3ac:	26 83       	std	Z+6, r18	; 0x06
	USARTD0.BAUDCTRLB = ((BScale << 4) & 0xF0) | ((BSel >> 8) & 0x0F);
 3ae:	80 ea       	ldi	r24, 0xA0	; 160
 3b0:	99 e0       	ldi	r25, 0x09	; 9
 3b2:	20 e3       	ldi	r18, 0x30	; 48
 3b4:	fc 01       	movw	r30, r24
 3b6:	27 83       	std	Z+7, r18	; 0x07
}
 3b8:	df 91       	pop	r29
 3ba:	cf 91       	pop	r28
 3bc:	08 95       	ret

000003be <IN_CHAR>:

char IN_CHAR(void)
{
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	cd b7       	in	r28, 0x3d	; 61
 3c4:	de b7       	in	r29, 0x3e	; 62
	while (!(USARTD0_STATUS & USART_RXCIF_bm));
 3c6:	00 00       	nop
 3c8:	81 ea       	ldi	r24, 0xA1	; 161
 3ca:	99 e0       	ldi	r25, 0x09	; 9
 3cc:	fc 01       	movw	r30, r24
 3ce:	80 81       	ld	r24, Z
 3d0:	88 23       	and	r24, r24
 3d2:	d4 f7       	brge	.-12     	; 0x3c8 <IN_CHAR+0xa>
	asm volatile ("nop");
 3d4:	00 00       	nop
	return USARTD0_DATA;
 3d6:	80 ea       	ldi	r24, 0xA0	; 160
 3d8:	99 e0       	ldi	r25, 0x09	; 9
 3da:	fc 01       	movw	r30, r24
 3dc:	80 81       	ld	r24, Z
 3de:	df 91       	pop	r29
 3e0:	cf 91       	pop	r28
 3e2:	08 95       	ret

000003e4 <_exit>:
 3e4:	f8 94       	cli

000003e6 <__stop_program>:
 3e6:	ff cf       	rjmp	.-2      	; 0x3e6 <__stop_program>
