
dac_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000356  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  000003aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003aa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000371  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000012f  00000000  00000000  000007c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000258  00000000  00000000  000008f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00000b4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a4  00000000  00000000  00000be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f9  00000000  00000000  00000f84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000107d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
   8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
   c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  10:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  14:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  18:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  1c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  20:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  24:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  28:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  2c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  30:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  34:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  38:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  3c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  40:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  44:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  48:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  4c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  50:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  54:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  58:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  5c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  60:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  64:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  68:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  6c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  70:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  74:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  78:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  7c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  80:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  84:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  88:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  8c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  90:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  94:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  98:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  9c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  a0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  a4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  a8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  ac:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  b0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  b4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  b8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  bc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  c0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  c4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  c8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  cc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  d0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  d4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  d8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  dc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  e0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  e4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  e8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  ec:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  f0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  f4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  f8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  fc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 100:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 104:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 108:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 10c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 110:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 114:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 118:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 11c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 120:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 124:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 128:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 12c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 130:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 134:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 138:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 13c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 140:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 144:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 148:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 14c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 150:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 154:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 158:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 15c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 160:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 164:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 168:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 16c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 170:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 174:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 178:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 17c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 180:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 184:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 188:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 18c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 190:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 194:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 198:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 19c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1a0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1a4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1a8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1ac:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1b0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1b4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1b8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1bc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1c0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1c4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1c8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1cc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1d0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1d4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1d8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1dc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1e0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1e4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1e8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1ec:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1f0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1f4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1f8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59
 214:	0e 94 10 01 	call	0x220	; 0x220 <main>
 218:	0c 94 a9 01 	jmp	0x352	; 0x352 <_exit>

0000021c <__bad_interrupt>:
 21c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000220 <main>:
void dac_write(uint16_t data);
int dac_data_empty(void);

///////////////////////////////////MAIN FUNCTION/////////////////////////////////////
int main(void)
{
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	cd b7       	in	r28, 0x3d	; 61
 226:	de b7       	in	r29, 0x3e	; 62
	dac_init();
 228:	0e 94 71 01 	call	0x2e2	; 0x2e2 <dac_init>
	while (1)
	{
		while (!dac_data_empty());
 22c:	00 00       	nop
 22e:	0e 94 9a 01 	call	0x334	; 0x334 <dac_data_empty>
 232:	89 2b       	or	r24, r25
 234:	e1 f3       	breq	.-8      	; 0x22e <main+0xe>
		dac_write(0xFFF);
 236:	8f ef       	ldi	r24, 0xFF	; 255
 238:	9f e0       	ldi	r25, 0x0F	; 15
 23a:	0e 94 86 01 	call	0x30c	; 0x30c <dac_write>
		while (!dac_data_empty());
 23e:	00 00       	nop
 240:	0e 94 9a 01 	call	0x334	; 0x334 <dac_data_empty>
 244:	89 2b       	or	r24, r25
 246:	e1 f3       	breq	.-8      	; 0x240 <main+0x20>
		dac_write(0x800);
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	98 e0       	ldi	r25, 0x08	; 8
 24c:	0e 94 86 01 	call	0x30c	; 0x30c <dac_write>
		while (!dac_data_empty());
 250:	00 00       	nop
 252:	0e 94 9a 01 	call	0x334	; 0x334 <dac_data_empty>
 256:	89 2b       	or	r24, r25
 258:	e1 f3       	breq	.-8      	; 0x252 <main+0x32>
		dac_write(0x800);
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	98 e0       	ldi	r25, 0x08	; 8
 25e:	0e 94 86 01 	call	0x30c	; 0x30c <dac_write>
		while (!dac_data_empty());
 262:	00 00       	nop
 264:	0e 94 9a 01 	call	0x334	; 0x334 <dac_data_empty>
 268:	89 2b       	or	r24, r25
 26a:	e1 f3       	breq	.-8      	; 0x264 <main+0x44>
		dac_write(0x800);
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	98 e0       	ldi	r25, 0x08	; 8
 270:	0e 94 86 01 	call	0x30c	; 0x30c <dac_write>
		while (!dac_data_empty());
 274:	00 00       	nop
 276:	0e 94 9a 01 	call	0x334	; 0x334 <dac_data_empty>
 27a:	89 2b       	or	r24, r25
 27c:	e1 f3       	breq	.-8      	; 0x276 <main+0x56>
		dac_write(0x800);
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	98 e0       	ldi	r25, 0x08	; 8
 282:	0e 94 86 01 	call	0x30c	; 0x30c <dac_write>
		while (!dac_data_empty());
 286:	00 00       	nop
 288:	0e 94 9a 01 	call	0x334	; 0x334 <dac_data_empty>
 28c:	89 2b       	or	r24, r25
 28e:	e1 f3       	breq	.-8      	; 0x288 <main+0x68>
		dac_write(0x800);
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	98 e0       	ldi	r25, 0x08	; 8
 294:	0e 94 86 01 	call	0x30c	; 0x30c <dac_write>
		while (!dac_data_empty());
 298:	00 00       	nop
 29a:	0e 94 9a 01 	call	0x334	; 0x334 <dac_data_empty>
 29e:	89 2b       	or	r24, r25
 2a0:	e1 f3       	breq	.-8      	; 0x29a <main+0x7a>
		dac_write(0x800);
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	98 e0       	ldi	r25, 0x08	; 8
 2a6:	0e 94 86 01 	call	0x30c	; 0x30c <dac_write>
		while (!dac_data_empty());
 2aa:	00 00       	nop
 2ac:	0e 94 9a 01 	call	0x334	; 0x334 <dac_data_empty>
 2b0:	89 2b       	or	r24, r25
 2b2:	e1 f3       	breq	.-8      	; 0x2ac <main+0x8c>
		dac_write(0x800);
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	98 e0       	ldi	r25, 0x08	; 8
 2b8:	0e 94 86 01 	call	0x30c	; 0x30c <dac_write>
		while (!dac_data_empty());
 2bc:	00 00       	nop
 2be:	0e 94 9a 01 	call	0x334	; 0x334 <dac_data_empty>
 2c2:	89 2b       	or	r24, r25
 2c4:	e1 f3       	breq	.-8      	; 0x2be <main+0x9e>
		dac_write(0x800);
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	98 e0       	ldi	r25, 0x08	; 8
 2ca:	0e 94 86 01 	call	0x30c	; 0x30c <dac_write>
		while(!dac_data_empty());
 2ce:	00 00       	nop
 2d0:	0e 94 9a 01 	call	0x334	; 0x334 <dac_data_empty>
 2d4:	89 2b       	or	r24, r25
 2d6:	e1 f3       	breq	.-8      	; 0x2d0 <main+0xb0>
		dac_write(0);	
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 86 01 	call	0x30c	; 0x30c <dac_write>
	}
 2e0:	a5 cf       	rjmp	.-182    	; 0x22c <main+0xc>

000002e2 <dac_init>:
}

/////////////////////////////////////FUNCTIONS///////////////////////////////////////
void dac_init(void) 
{
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
 2e6:	cd b7       	in	r28, 0x3d	; 61
 2e8:	de b7       	in	r29, 0x3e	; 62
	// Configure DAC for single channel 0 w/ reference AREFB and then enable channel and DAC.
	DACB.CTRLB = DAC_CHSEL_SINGLE_gc;
 2ea:	80 e2       	ldi	r24, 0x20	; 32
 2ec:	93 e0       	ldi	r25, 0x03	; 3
 2ee:	fc 01       	movw	r30, r24
 2f0:	11 82       	std	Z+1, r1	; 0x01
	DACB.CTRLC = DAC_REFSEL_AREFB_gc;
 2f2:	80 e2       	ldi	r24, 0x20	; 32
 2f4:	93 e0       	ldi	r25, 0x03	; 3
 2f6:	28 e1       	ldi	r18, 0x18	; 24
 2f8:	fc 01       	movw	r30, r24
 2fa:	22 83       	std	Z+2, r18	; 0x02
	DACB.CTRLA = DAC_CH0EN_bm | DAC_ENABLE_bm; 
 2fc:	80 e2       	ldi	r24, 0x20	; 32
 2fe:	93 e0       	ldi	r25, 0x03	; 3
 300:	25 e0       	ldi	r18, 0x05	; 5
 302:	fc 01       	movw	r30, r24
 304:	20 83       	st	Z, r18
}
 306:	df 91       	pop	r29
 308:	cf 91       	pop	r28
 30a:	08 95       	ret

0000030c <dac_write>:

void dac_write(uint16_t data) 
{
 30c:	cf 93       	push	r28
 30e:	df 93       	push	r29
 310:	1f 92       	push	r1
 312:	1f 92       	push	r1
 314:	cd b7       	in	r28, 0x3d	; 61
 316:	de b7       	in	r29, 0x3e	; 62
 318:	89 83       	std	Y+1, r24	; 0x01
 31a:	9a 83       	std	Y+2, r25	; 0x02
	DACB.CH0DATA = data;
 31c:	80 e2       	ldi	r24, 0x20	; 32
 31e:	93 e0       	ldi	r25, 0x03	; 3
 320:	29 81       	ldd	r18, Y+1	; 0x01
 322:	3a 81       	ldd	r19, Y+2	; 0x02
 324:	fc 01       	movw	r30, r24
 326:	20 8f       	std	Z+24, r18	; 0x18
 328:	31 8f       	std	Z+25, r19	; 0x19
}
 32a:	0f 90       	pop	r0
 32c:	0f 90       	pop	r0
 32e:	df 91       	pop	r29
 330:	cf 91       	pop	r28
 332:	08 95       	ret

00000334 <dac_data_empty>:

int dac_data_empty(void) 
{
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	cd b7       	in	r28, 0x3d	; 61
 33a:	de b7       	in	r29, 0x3e	; 62
	return (DACB.STATUS & DAC_CH0DRE_bm);
 33c:	80 e2       	ldi	r24, 0x20	; 32
 33e:	93 e0       	ldi	r25, 0x03	; 3
 340:	fc 01       	movw	r30, r24
 342:	85 81       	ldd	r24, Z+5	; 0x05
 344:	88 2f       	mov	r24, r24
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	81 70       	andi	r24, 0x01	; 1
 34a:	99 27       	eor	r25, r25
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	08 95       	ret

00000352 <_exit>:
 352:	f8 94       	cli

00000354 <__stop_program>:
 354:	ff cf       	rjmp	.-2      	; 0x354 <__stop_program>
