
Lab6_PartB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000afc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000033e  00802000  00000afc  00000b70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000eae  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ee0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00000f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001755  00000000  00000000  00000fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000261  00000000  00000000  00002725  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000063b  00000000  00000000  00002986  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002b8  00000000  00000000  00002fc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000e25  00000000  00000000  0000327c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005b9  00000000  00000000  000040a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  0000465a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
   8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
   c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  10:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  14:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  18:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  1c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  20:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  24:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  28:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  2c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  30:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  34:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  38:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  3c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  40:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  44:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  48:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  4c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  50:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  54:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  58:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  5c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  60:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  64:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  68:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  6c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  70:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  74:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  78:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  7c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  80:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  84:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  88:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  8c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  90:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  94:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  98:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  9c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  ac:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  bc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  cc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d4:	0c 94 cf 04 	jmp	0x99e	; 0x99e <__vector_53>
  d8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  dc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  ec:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  fc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 100:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 104:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 108:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 10c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 110:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 114:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 118:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 11c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 120:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 124:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 128:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 12c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 130:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 134:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 138:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 13c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 140:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 144:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 148:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 14c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 150:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 154:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 158:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 15c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 160:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 164:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 168:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 16c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 170:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 174:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 178:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 17c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 180:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 184:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 188:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 18c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 190:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 194:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 198:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 19c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1ac:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1bc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1cc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1dc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1ec:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	13 e2       	ldi	r17, 0x23	; 35
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	ec ef       	ldi	r30, 0xFC	; 252
 21c:	fa e0       	ldi	r31, 0x0A	; 10
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	ae 33       	cpi	r26, 0x3E	; 62
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59
 230:	0e 94 06 03 	call	0x60c	; 0x60c <main>
 234:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <_exit>

00000238 <__bad_interrupt>:
 238:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023c <ebi_init>:
	lcd_disp = lcd_disp ^ 0x07;
	uint8_t disp_comm = 0x08 | lcd_disp;
	
	wait_busy();
	OUT_COMMAND(disp_comm);
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	cd b7       	in	r28, 0x3d	; 61
 242:	de b7       	in	r29, 0x3e	; 62
 244:	80 ee       	ldi	r24, 0xE0	; 224
 246:	96 e0       	ldi	r25, 0x06	; 6
 248:	27 e3       	ldi	r18, 0x37	; 55
 24a:	fc 01       	movw	r30, r24
 24c:	20 83       	st	Z, r18
 24e:	80 ee       	ldi	r24, 0xE0	; 224
 250:	96 e0       	ldi	r25, 0x06	; 6
 252:	23 e3       	ldi	r18, 0x33	; 51
 254:	fc 01       	movw	r30, r24
 256:	24 83       	std	Z+4, r18	; 0x04
 258:	80 e2       	ldi	r24, 0x20	; 32
 25a:	97 e0       	ldi	r25, 0x07	; 7
 25c:	2f ef       	ldi	r18, 0xFF	; 255
 25e:	fc 01       	movw	r30, r24
 260:	20 83       	st	Z, r18
 262:	80 e4       	ldi	r24, 0x40	; 64
 264:	94 e0       	ldi	r25, 0x04	; 4
 266:	21 e0       	ldi	r18, 0x01	; 1
 268:	fc 01       	movw	r30, r24
 26a:	20 83       	st	Z, r18
 26c:	80 e4       	ldi	r24, 0x40	; 64
 26e:	94 e0       	ldi	r25, 0x04	; 4
 270:	28 e2       	ldi	r18, 0x28	; 40
 272:	fc 01       	movw	r30, r24
 274:	23 8b       	std	Z+19, r18	; 0x13
 276:	80 e4       	ldi	r24, 0x40	; 64
 278:	94 e0       	ldi	r25, 0x04	; 4
 27a:	20 e8       	ldi	r18, 0x80	; 128
 27c:	fc 01       	movw	r30, r24
 27e:	22 8b       	std	Z+18, r18	; 0x12
 280:	80 e4       	ldi	r24, 0x40	; 64
 282:	94 e0       	ldi	r25, 0x04	; 4
 284:	25 e1       	ldi	r18, 0x15	; 21
 286:	fc 01       	movw	r30, r24
 288:	20 8b       	std	Z+16, r18	; 0x10
 28a:	80 e4       	ldi	r24, 0x40	; 64
 28c:	94 e0       	ldi	r25, 0x04	; 4
 28e:	20 e4       	ldi	r18, 0x40	; 64
 290:	39 e3       	ldi	r19, 0x39	; 57
 292:	fc 01       	movw	r30, r24
 294:	26 8b       	std	Z+22, r18	; 0x16
 296:	37 8b       	std	Z+23, r19	; 0x17
 298:	80 e4       	ldi	r24, 0x40	; 64
 29a:	94 e0       	ldi	r25, 0x04	; 4
 29c:	29 e1       	ldi	r18, 0x19	; 25
 29e:	fc 01       	movw	r30, r24
 2a0:	24 8b       	std	Z+20, r18	; 0x14
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	08 95       	ret

000002a8 <lcd_init>:
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
 2ac:	cd b7       	in	r28, 0x3d	; 61
 2ae:	de b7       	in	r29, 0x3e	; 62
 2b0:	2c 97       	sbiw	r28, 0x0c	; 12
 2b2:	cd bf       	out	0x3d, r28	; 61
 2b4:	de bf       	out	0x3e, r29	; 62
 2b6:	0e 94 a5 01 	call	0x34a	; 0x34a <wait_busy>
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	90 e5       	ldi	r25, 0x50	; 80
 2be:	a9 e3       	ldi	r26, 0x39	; 57
 2c0:	b0 e0       	ldi	r27, 0x00	; 0
 2c2:	89 83       	std	Y+1, r24	; 0x01
 2c4:	9a 83       	std	Y+2, r25	; 0x02
 2c6:	ab 83       	std	Y+3, r26	; 0x03
 2c8:	bc 83       	std	Y+4, r27	; 0x04
 2ca:	89 81       	ldd	r24, Y+1	; 0x01
 2cc:	9a 81       	ldd	r25, Y+2	; 0x02
 2ce:	ab 81       	ldd	r26, Y+3	; 0x03
 2d0:	bc 81       	ldd	r27, Y+4	; 0x04
 2d2:	28 e3       	ldi	r18, 0x38	; 56
 2d4:	0b b6       	in	r0, 0x3b	; 59
 2d6:	ab bf       	out	0x3b, r26	; 59
 2d8:	fc 01       	movw	r30, r24
 2da:	20 83       	st	Z, r18
 2dc:	0b be       	out	0x3b, r0	; 59
 2de:	00 00       	nop
 2e0:	00 00       	nop
 2e2:	0e 94 a5 01 	call	0x34a	; 0x34a <wait_busy>
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	90 e5       	ldi	r25, 0x50	; 80
 2ea:	a9 e3       	ldi	r26, 0x39	; 57
 2ec:	b0 e0       	ldi	r27, 0x00	; 0
 2ee:	8d 83       	std	Y+5, r24	; 0x05
 2f0:	9e 83       	std	Y+6, r25	; 0x06
 2f2:	af 83       	std	Y+7, r26	; 0x07
 2f4:	b8 87       	std	Y+8, r27	; 0x08
 2f6:	8d 81       	ldd	r24, Y+5	; 0x05
 2f8:	9e 81       	ldd	r25, Y+6	; 0x06
 2fa:	af 81       	ldd	r26, Y+7	; 0x07
 2fc:	b8 85       	ldd	r27, Y+8	; 0x08
 2fe:	2f e0       	ldi	r18, 0x0F	; 15
 300:	0b b6       	in	r0, 0x3b	; 59
 302:	ab bf       	out	0x3b, r26	; 59
 304:	fc 01       	movw	r30, r24
 306:	20 83       	st	Z, r18
 308:	0b be       	out	0x3b, r0	; 59
 30a:	00 00       	nop
 30c:	00 00       	nop
 30e:	0e 94 a5 01 	call	0x34a	; 0x34a <wait_busy>
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	90 e5       	ldi	r25, 0x50	; 80
 316:	a9 e3       	ldi	r26, 0x39	; 57
 318:	b0 e0       	ldi	r27, 0x00	; 0
 31a:	89 87       	std	Y+9, r24	; 0x09
 31c:	9a 87       	std	Y+10, r25	; 0x0a
 31e:	ab 87       	std	Y+11, r26	; 0x0b
 320:	bc 87       	std	Y+12, r27	; 0x0c
 322:	89 85       	ldd	r24, Y+9	; 0x09
 324:	9a 85       	ldd	r25, Y+10	; 0x0a
 326:	ab 85       	ldd	r26, Y+11	; 0x0b
 328:	bc 85       	ldd	r27, Y+12	; 0x0c
 32a:	21 e0       	ldi	r18, 0x01	; 1
 32c:	0b b6       	in	r0, 0x3b	; 59
 32e:	ab bf       	out	0x3b, r26	; 59
 330:	fc 01       	movw	r30, r24
 332:	20 83       	st	Z, r18
 334:	0b be       	out	0x3b, r0	; 59
 336:	00 00       	nop
 338:	00 00       	nop
 33a:	0e 94 a5 01 	call	0x34a	; 0x34a <wait_busy>
 33e:	2c 96       	adiw	r28, 0x0c	; 12
 340:	cd bf       	out	0x3d, r28	; 61
 342:	de bf       	out	0x3e, r29	; 62
 344:	df 91       	pop	r29
 346:	cf 91       	pop	r28
 348:	08 95       	ret

0000034a <wait_busy>:
 34a:	cf 93       	push	r28
 34c:	df 93       	push	r29
 34e:	00 d0       	rcall	.+0      	; 0x350 <wait_busy+0x6>
 350:	00 d0       	rcall	.+0      	; 0x352 <wait_busy+0x8>
 352:	cd b7       	in	r28, 0x3d	; 61
 354:	de b7       	in	r29, 0x3e	; 62
 356:	19 82       	std	Y+1, r1	; 0x01
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	90 e5       	ldi	r25, 0x50	; 80
 35c:	a9 e3       	ldi	r26, 0x39	; 57
 35e:	b0 e0       	ldi	r27, 0x00	; 0
 360:	8a 83       	std	Y+2, r24	; 0x02
 362:	9b 83       	std	Y+3, r25	; 0x03
 364:	ac 83       	std	Y+4, r26	; 0x04
 366:	bd 83       	std	Y+5, r27	; 0x05
 368:	8a 81       	ldd	r24, Y+2	; 0x02
 36a:	9b 81       	ldd	r25, Y+3	; 0x03
 36c:	ac 81       	ldd	r26, Y+4	; 0x04
 36e:	bd 81       	ldd	r27, Y+5	; 0x05
 370:	0b b6       	in	r0, 0x3b	; 59
 372:	ab bf       	out	0x3b, r26	; 59
 374:	fc 01       	movw	r30, r24
 376:	80 81       	ld	r24, Z
 378:	0b be       	out	0x3b, r0	; 59
 37a:	8e 83       	std	Y+6, r24	; 0x06
 37c:	8e 81       	ldd	r24, Y+6	; 0x06
 37e:	89 83       	std	Y+1, r24	; 0x01
 380:	89 81       	ldd	r24, Y+1	; 0x01
 382:	88 23       	and	r24, r24
 384:	4c f3       	brlt	.-46     	; 0x358 <wait_busy+0xe>
 386:	26 96       	adiw	r28, 0x06	; 6
 388:	cd bf       	out	0x3d, r28	; 61
 38a:	de bf       	out	0x3e, r29	; 62
 38c:	df 91       	pop	r29
 38e:	cf 91       	pop	r28
 390:	08 95       	ret

00000392 <OUT_CHAR>:
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
 396:	cd b7       	in	r28, 0x3d	; 61
 398:	de b7       	in	r29, 0x3e	; 62
 39a:	25 97       	sbiw	r28, 0x05	; 5
 39c:	cd bf       	out	0x3d, r28	; 61
 39e:	de bf       	out	0x3e, r29	; 62
 3a0:	8d 83       	std	Y+5, r24	; 0x05
 3a2:	0e 94 a5 01 	call	0x34a	; 0x34a <wait_busy>
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	90 e5       	ldi	r25, 0x50	; 80
 3aa:	a9 e3       	ldi	r26, 0x39	; 57
 3ac:	b0 e0       	ldi	r27, 0x00	; 0
 3ae:	89 83       	std	Y+1, r24	; 0x01
 3b0:	9a 83       	std	Y+2, r25	; 0x02
 3b2:	ab 83       	std	Y+3, r26	; 0x03
 3b4:	bc 83       	std	Y+4, r27	; 0x04
 3b6:	89 81       	ldd	r24, Y+1	; 0x01
 3b8:	9a 81       	ldd	r25, Y+2	; 0x02
 3ba:	ab 81       	ldd	r26, Y+3	; 0x03
 3bc:	bc 81       	ldd	r27, Y+4	; 0x04
 3be:	2d 81       	ldd	r18, Y+5	; 0x05
 3c0:	0b b6       	in	r0, 0x3b	; 59
 3c2:	ab bf       	out	0x3b, r26	; 59
 3c4:	fc 01       	movw	r30, r24
 3c6:	20 83       	st	Z, r18
 3c8:	0b be       	out	0x3b, r0	; 59
 3ca:	00 00       	nop
 3cc:	00 00       	nop
 3ce:	0e 94 a5 01 	call	0x34a	; 0x34a <wait_busy>
 3d2:	25 96       	adiw	r28, 0x05	; 5
 3d4:	cd bf       	out	0x3d, r28	; 61
 3d6:	de bf       	out	0x3e, r29	; 62
 3d8:	df 91       	pop	r29
 3da:	cf 91       	pop	r28
 3dc:	08 95       	ret

000003de <OUT_STRING>:
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
 3e2:	1f 92       	push	r1
 3e4:	1f 92       	push	r1
 3e6:	cd b7       	in	r28, 0x3d	; 61
 3e8:	de b7       	in	r29, 0x3e	; 62
 3ea:	89 83       	std	Y+1, r24	; 0x01
 3ec:	9a 83       	std	Y+2, r25	; 0x02
 3ee:	0b c0       	rjmp	.+22     	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
 3f0:	89 81       	ldd	r24, Y+1	; 0x01
 3f2:	9a 81       	ldd	r25, Y+2	; 0x02
 3f4:	fc 01       	movw	r30, r24
 3f6:	80 81       	ld	r24, Z
 3f8:	0e 94 c9 01 	call	0x392	; 0x392 <OUT_CHAR>
 3fc:	89 81       	ldd	r24, Y+1	; 0x01
 3fe:	9a 81       	ldd	r25, Y+2	; 0x02
 400:	01 96       	adiw	r24, 0x01	; 1
 402:	89 83       	std	Y+1, r24	; 0x01
 404:	9a 83       	std	Y+2, r25	; 0x02
 406:	89 81       	ldd	r24, Y+1	; 0x01
 408:	9a 81       	ldd	r25, Y+2	; 0x02
 40a:	fc 01       	movw	r30, r24
 40c:	80 81       	ld	r24, Z
 40e:	88 23       	and	r24, r24
 410:	79 f7       	brne	.-34     	; 0x3f0 <OUT_STRING+0x12>
 412:	0f 90       	pop	r0
 414:	0f 90       	pop	r0
 416:	df 91       	pop	r29
 418:	cf 91       	pop	r28
 41a:	08 95       	ret

0000041c <OUT_COMMAND>:
 41c:	cf 93       	push	r28
 41e:	df 93       	push	r29
 420:	cd b7       	in	r28, 0x3d	; 61
 422:	de b7       	in	r29, 0x3e	; 62
 424:	25 97       	sbiw	r28, 0x05	; 5
 426:	cd bf       	out	0x3d, r28	; 61
 428:	de bf       	out	0x3e, r29	; 62
 42a:	8d 83       	std	Y+5, r24	; 0x05
 42c:	0e 94 a5 01 	call	0x34a	; 0x34a <wait_busy>
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	90 e5       	ldi	r25, 0x50	; 80
 434:	a9 e3       	ldi	r26, 0x39	; 57
 436:	b0 e0       	ldi	r27, 0x00	; 0
 438:	89 83       	std	Y+1, r24	; 0x01
 43a:	9a 83       	std	Y+2, r25	; 0x02
 43c:	ab 83       	std	Y+3, r26	; 0x03
 43e:	bc 83       	std	Y+4, r27	; 0x04
 440:	89 81       	ldd	r24, Y+1	; 0x01
 442:	9a 81       	ldd	r25, Y+2	; 0x02
 444:	ab 81       	ldd	r26, Y+3	; 0x03
 446:	bc 81       	ldd	r27, Y+4	; 0x04
 448:	2d 81       	ldd	r18, Y+5	; 0x05
 44a:	0b b6       	in	r0, 0x3b	; 59
 44c:	ab bf       	out	0x3b, r26	; 59
 44e:	fc 01       	movw	r30, r24
 450:	20 83       	st	Z, r18
 452:	0b be       	out	0x3b, r0	; 59
 454:	00 00       	nop
 456:	00 00       	nop
 458:	0e 94 a5 01 	call	0x34a	; 0x34a <wait_busy>
 45c:	25 96       	adiw	r28, 0x05	; 5
 45e:	cd bf       	out	0x3d, r28	; 61
 460:	de bf       	out	0x3e, r29	; 62
 462:	df 91       	pop	r29
 464:	cf 91       	pop	r28
 466:	08 95       	ret

00000468 <CLEAR_SCREEN>:
 468:	cf 93       	push	r28
 46a:	df 93       	push	r29
 46c:	00 d0       	rcall	.+0      	; 0x46e <CLEAR_SCREEN+0x6>
 46e:	1f 92       	push	r1
 470:	cd b7       	in	r28, 0x3d	; 61
 472:	de b7       	in	r29, 0x3e	; 62
 474:	0e 94 a5 01 	call	0x34a	; 0x34a <wait_busy>
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	90 e5       	ldi	r25, 0x50	; 80
 47c:	a9 e3       	ldi	r26, 0x39	; 57
 47e:	b0 e0       	ldi	r27, 0x00	; 0
 480:	89 83       	std	Y+1, r24	; 0x01
 482:	9a 83       	std	Y+2, r25	; 0x02
 484:	ab 83       	std	Y+3, r26	; 0x03
 486:	bc 83       	std	Y+4, r27	; 0x04
 488:	89 81       	ldd	r24, Y+1	; 0x01
 48a:	9a 81       	ldd	r25, Y+2	; 0x02
 48c:	ab 81       	ldd	r26, Y+3	; 0x03
 48e:	bc 81       	ldd	r27, Y+4	; 0x04
 490:	21 e0       	ldi	r18, 0x01	; 1
 492:	0b b6       	in	r0, 0x3b	; 59
 494:	ab bf       	out	0x3b, r26	; 59
 496:	fc 01       	movw	r30, r24
 498:	20 83       	st	Z, r18
 49a:	0b be       	out	0x3b, r0	; 59
 49c:	00 00       	nop
 49e:	00 00       	nop
 4a0:	0e 94 a5 01 	call	0x34a	; 0x34a <wait_busy>
 4a4:	24 96       	adiw	r28, 0x04	; 4
 4a6:	cd bf       	out	0x3d, r28	; 61
 4a8:	de bf       	out	0x3e, r29	; 62
 4aa:	df 91       	pop	r29
 4ac:	cf 91       	pop	r28
 4ae:	08 95       	ret

000004b0 <keypad_init>:
uint8_t keyscan(void);
void keyhold(void);

/////////////////////////////////////FUNCTIONS///////////////////////////////////////
void keypad_init(void)
{
 4b0:	cf 93       	push	r28
 4b2:	df 93       	push	r29
 4b4:	cd b7       	in	r28, 0x3d	; 61
 4b6:	de b7       	in	r29, 0x3e	; 62
	PORTF.PIN7CTRL = PORT_OPC_PULLUP_gc;		// Set OPC to Pull-Up for all Keypad pins
 4b8:	80 ea       	ldi	r24, 0xA0	; 160
 4ba:	96 e0       	ldi	r25, 0x06	; 6
 4bc:	28 e1       	ldi	r18, 0x18	; 24
 4be:	fc 01       	movw	r30, r24
 4c0:	27 8b       	std	Z+23, r18	; 0x17
	PORTF.PIN6CTRL = PORT_OPC_PULLUP_gc;
 4c2:	80 ea       	ldi	r24, 0xA0	; 160
 4c4:	96 e0       	ldi	r25, 0x06	; 6
 4c6:	28 e1       	ldi	r18, 0x18	; 24
 4c8:	fc 01       	movw	r30, r24
 4ca:	26 8b       	std	Z+22, r18	; 0x16
	PORTF.PIN5CTRL = PORT_OPC_PULLUP_gc;
 4cc:	80 ea       	ldi	r24, 0xA0	; 160
 4ce:	96 e0       	ldi	r25, 0x06	; 6
 4d0:	28 e1       	ldi	r18, 0x18	; 24
 4d2:	fc 01       	movw	r30, r24
 4d4:	25 8b       	std	Z+21, r18	; 0x15
	PORTF.PIN4CTRL = PORT_OPC_PULLUP_gc;
 4d6:	80 ea       	ldi	r24, 0xA0	; 160
 4d8:	96 e0       	ldi	r25, 0x06	; 6
 4da:	28 e1       	ldi	r18, 0x18	; 24
 4dc:	fc 01       	movw	r30, r24
 4de:	24 8b       	std	Z+20, r18	; 0x14
	PORTF.PIN3CTRL = PORT_OPC_PULLUP_gc;
 4e0:	80 ea       	ldi	r24, 0xA0	; 160
 4e2:	96 e0       	ldi	r25, 0x06	; 6
 4e4:	28 e1       	ldi	r18, 0x18	; 24
 4e6:	fc 01       	movw	r30, r24
 4e8:	23 8b       	std	Z+19, r18	; 0x13
	PORTF.PIN2CTRL = PORT_OPC_PULLUP_gc;
 4ea:	80 ea       	ldi	r24, 0xA0	; 160
 4ec:	96 e0       	ldi	r25, 0x06	; 6
 4ee:	28 e1       	ldi	r18, 0x18	; 24
 4f0:	fc 01       	movw	r30, r24
 4f2:	22 8b       	std	Z+18, r18	; 0x12
	PORTF.PIN1CTRL = PORT_OPC_PULLUP_gc;
 4f4:	80 ea       	ldi	r24, 0xA0	; 160
 4f6:	96 e0       	ldi	r25, 0x06	; 6
 4f8:	28 e1       	ldi	r18, 0x18	; 24
 4fa:	fc 01       	movw	r30, r24
 4fc:	21 8b       	std	Z+17, r18	; 0x11
	PORTF.PIN0CTRL = PORT_OPC_PULLUP_gc;
 4fe:	80 ea       	ldi	r24, 0xA0	; 160
 500:	96 e0       	ldi	r25, 0x06	; 6
 502:	28 e1       	ldi	r18, 0x18	; 24
 504:	fc 01       	movw	r30, r24
 506:	20 8b       	std	Z+16, r18	; 0x10
	
	PORTF.DIRSET = 0x0F;			// Set LSNibble of PortF as Output
 508:	80 ea       	ldi	r24, 0xA0	; 160
 50a:	96 e0       	ldi	r25, 0x06	; 6
 50c:	2f e0       	ldi	r18, 0x0F	; 15
 50e:	fc 01       	movw	r30, r24
 510:	21 83       	std	Z+1, r18	; 0x01
}
 512:	df 91       	pop	r29
 514:	cf 91       	pop	r28
 516:	08 95       	ret

00000518 <keyscan>:

uint8_t keyscan(void)
{
 518:	cf 93       	push	r28
 51a:	df 93       	push	r29
 51c:	cd b7       	in	r28, 0x3d	; 61
 51e:	de b7       	in	r29, 0x3e	; 62
 520:	25 97       	sbiw	r28, 0x05	; 5
 522:	cd bf       	out	0x3d, r28	; 61
 524:	de bf       	out	0x3e, r29	; 62
	uint8_t input, index, line, key = 0xFF, i = 0;
 526:	8f ef       	ldi	r24, 0xFF	; 255
 528:	8b 83       	std	Y+3, r24	; 0x03
 52a:	1a 82       	std	Y+2, r1	; 0x02
	for (i = 0; i < 4; i++)	// Iterate columns
 52c:	1a 82       	std	Y+2, r1	; 0x02
 52e:	50 c0       	rjmp	.+160    	; 0x5d0 <keyscan+0xb8>
	{
		line = ~(0x01 << i) & 0x0F;		// Iterate shift 0x08 by i and not to hit each col
 530:	8a 81       	ldd	r24, Y+2	; 0x02
 532:	28 2f       	mov	r18, r24
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	02 c0       	rjmp	.+4      	; 0x540 <keyscan+0x28>
 53c:	88 0f       	add	r24, r24
 53e:	99 1f       	adc	r25, r25
 540:	2a 95       	dec	r18
 542:	e2 f7       	brpl	.-8      	; 0x53c <keyscan+0x24>
 544:	80 95       	com	r24
 546:	8f 70       	andi	r24, 0x0F	; 15
 548:	8c 83       	std	Y+4, r24	; 0x04
		PORTF.OUT = line;			// Output value for col
 54a:	80 ea       	ldi	r24, 0xA0	; 160
 54c:	96 e0       	ldi	r25, 0x06	; 6
 54e:	2c 81       	ldd	r18, Y+4	; 0x04
 550:	fc 01       	movw	r30, r24
 552:	24 83       	std	Z+4, r18	; 0x04
		asm volatile ("nop");
 554:	00 00       	nop
		input = PORTF.IN & 0xF0;	// Read Input and bitmask off Output bits
 556:	80 ea       	ldi	r24, 0xA0	; 160
 558:	96 e0       	ldi	r25, 0x06	; 6
 55a:	fc 01       	movw	r30, r24
 55c:	80 85       	ldd	r24, Z+8	; 0x08
 55e:	80 7f       	andi	r24, 0xF0	; 240
 560:	8d 83       	std	Y+5, r24	; 0x05
		
		if (input < 0xF0)
 562:	8d 81       	ldd	r24, Y+5	; 0x05
 564:	80 3f       	cpi	r24, 0xF0	; 240
 566:	88 f5       	brcc	.+98     	; 0x5ca <keyscan+0xb2>
		{
			switch (input)
 568:	8d 81       	ldd	r24, Y+5	; 0x05
 56a:	88 2f       	mov	r24, r24
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	80 3b       	cpi	r24, 0xB0	; 176
 570:	91 05       	cpc	r25, r1
 572:	91 f0       	breq	.+36     	; 0x598 <keyscan+0x80>
 574:	81 3b       	cpi	r24, 0xB1	; 177
 576:	91 05       	cpc	r25, r1
 578:	24 f4       	brge	.+8      	; 0x582 <keyscan+0x6a>
 57a:	80 37       	cpi	r24, 0x70	; 112
 57c:	91 05       	cpc	r25, r1
 57e:	79 f0       	breq	.+30     	; 0x59e <keyscan+0x86>
 580:	11 c0       	rjmp	.+34     	; 0x5a4 <keyscan+0x8c>
 582:	80 3d       	cpi	r24, 0xD0	; 208
 584:	91 05       	cpc	r25, r1
 586:	29 f0       	breq	.+10     	; 0x592 <keyscan+0x7a>
 588:	80 3e       	cpi	r24, 0xE0	; 224
 58a:	91 05       	cpc	r25, r1
 58c:	59 f4       	brne	.+22     	; 0x5a4 <keyscan+0x8c>
			{
				case 0xE0:
					index = 0x00;
 58e:	19 82       	std	Y+1, r1	; 0x01
					break;
 590:	09 c0       	rjmp	.+18     	; 0x5a4 <keyscan+0x8c>
				case 0xD0:
					index = 0x01;
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	89 83       	std	Y+1, r24	; 0x01
					break;
 596:	06 c0       	rjmp	.+12     	; 0x5a4 <keyscan+0x8c>
				case 0xB0:
					index = 0x02;
 598:	82 e0       	ldi	r24, 0x02	; 2
 59a:	89 83       	std	Y+1, r24	; 0x01
					break;
 59c:	03 c0       	rjmp	.+6      	; 0x5a4 <keyscan+0x8c>
				case 0x70:
					index = 0x03;
 59e:	83 e0       	ldi	r24, 0x03	; 3
 5a0:	89 83       	std	Y+1, r24	; 0x01
					break;
 5a2:	00 00       	nop
			}
			key = keys[index+4*i];
 5a4:	89 81       	ldd	r24, Y+1	; 0x01
 5a6:	28 2f       	mov	r18, r24
 5a8:	30 e0       	ldi	r19, 0x00	; 0
 5aa:	8a 81       	ldd	r24, Y+2	; 0x02
 5ac:	88 2f       	mov	r24, r24
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	88 0f       	add	r24, r24
 5b2:	99 1f       	adc	r25, r25
 5b4:	88 0f       	add	r24, r24
 5b6:	99 1f       	adc	r25, r25
 5b8:	82 0f       	add	r24, r18
 5ba:	93 1f       	adc	r25, r19
 5bc:	80 50       	subi	r24, 0x00	; 0
 5be:	90 4e       	sbci	r25, 0xE0	; 224
 5c0:	fc 01       	movw	r30, r24
 5c2:	80 81       	ld	r24, Z
 5c4:	8b 83       	std	Y+3, r24	; 0x03
			return key;
 5c6:	8b 81       	ldd	r24, Y+3	; 0x03
 5c8:	08 c0       	rjmp	.+16     	; 0x5da <keyscan+0xc2>
}

uint8_t keyscan(void)
{
	uint8_t input, index, line, key = 0xFF, i = 0;
	for (i = 0; i < 4; i++)	// Iterate columns
 5ca:	8a 81       	ldd	r24, Y+2	; 0x02
 5cc:	8f 5f       	subi	r24, 0xFF	; 255
 5ce:	8a 83       	std	Y+2, r24	; 0x02
 5d0:	8a 81       	ldd	r24, Y+2	; 0x02
 5d2:	84 30       	cpi	r24, 0x04	; 4
 5d4:	08 f4       	brcc	.+2      	; 0x5d8 <keyscan+0xc0>
 5d6:	ac cf       	rjmp	.-168    	; 0x530 <keyscan+0x18>
			}
			key = keys[index+4*i];
			return key;
		}
	}
	return key;
 5d8:	8b 81       	ldd	r24, Y+3	; 0x03
}
 5da:	25 96       	adiw	r28, 0x05	; 5
 5dc:	cd bf       	out	0x3d, r28	; 61
 5de:	de bf       	out	0x3e, r29	; 62
 5e0:	df 91       	pop	r29
 5e2:	cf 91       	pop	r28
 5e4:	08 95       	ret

000005e6 <keyhold>:

void keyhold(void) 
{
 5e6:	cf 93       	push	r28
 5e8:	df 93       	push	r29
 5ea:	cd b7       	in	r28, 0x3d	; 61
 5ec:	de b7       	in	r29, 0x3e	; 62
	while ((PORTF.IN & 0xF0) < 0xF0);
 5ee:	00 00       	nop
 5f0:	80 ea       	ldi	r24, 0xA0	; 160
 5f2:	96 e0       	ldi	r25, 0x06	; 6
 5f4:	fc 01       	movw	r30, r24
 5f6:	80 85       	ldd	r24, Z+8	; 0x08
 5f8:	88 2f       	mov	r24, r24
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	80 7f       	andi	r24, 0xF0	; 240
 5fe:	99 27       	eor	r25, r25
 600:	80 3f       	cpi	r24, 0xF0	; 240
 602:	91 05       	cpc	r25, r1
 604:	ac f3       	brlt	.-22     	; 0x5f0 <keyhold+0xa>
 606:	df 91       	pop	r29
 608:	cf 91       	pop	r28
 60a:	08 95       	ret

0000060c <main>:
uint16_t calc_ffrq(uint16_t freq);
void calc_per(uint16_t period);

///////////////////////////////////MAIN FUNCTION/////////////////////////////////////
int main(void)
{
 60c:	cf 93       	push	r28
 60e:	df 93       	push	r29
 610:	cd b7       	in	r28, 0x3d	; 61
 612:	de b7       	in	r29, 0x3e	; 62
 614:	27 97       	sbiw	r28, 0x07	; 7
 616:	cd bf       	out	0x3d, r28	; 61
 618:	de bf       	out	0x3e, r29	; 62
	ebi_init();
 61a:	0e 94 1e 01 	call	0x23c	; 0x23c <ebi_init>
	lcd_init();
 61e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_init>
	keypad_init();
 622:	0e 94 58 02 	call	0x4b0	; 0x4b0 <keypad_init>
	tc_init();
 626:	0e 94 44 04 	call	0x888	; 0x888 <tc_init>
	uint8_t key;
	while (1)
	{
		do
		{
			key = keyscan();		// Get Key press
 62a:	0e 94 8c 02 	call	0x518	; 0x518 <keyscan>
 62e:	89 83       	std	Y+1, r24	; 0x01
		} while (key == 0xFF);
 630:	89 81       	ldd	r24, Y+1	; 0x01
 632:	8f 3f       	cpi	r24, 0xFF	; 255
 634:	d1 f3       	breq	.-12     	; 0x62a <main+0x1e>
		keyhold();
 636:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <keyhold>
		TCE1.CTRLFSET = TC_CMD_RESTART_gc;
 63a:	80 e4       	ldi	r24, 0x40	; 64
 63c:	9a e0       	ldi	r25, 0x0A	; 10
 63e:	28 e0       	ldi	r18, 0x08	; 8
 640:	fc 01       	movw	r30, r24
 642:	21 87       	std	Z+9, r18	; 0x09
		
		if (key <= 0x0D)			// Keys 0-D
 644:	89 81       	ldd	r24, Y+1	; 0x01
 646:	8e 30       	cpi	r24, 0x0E	; 14
 648:	08 f5       	brcc	.+66     	; 0x68c <main+0x80>
		{
			calc_per(567.8);
 64a:	87 e3       	ldi	r24, 0x37	; 55
 64c:	92 e0       	ldi	r25, 0x02	; 2
 64e:	0e 94 9e 04 	call	0x93c	; 0x93c <calc_per>
			note n = notes[key];
 652:	89 81       	ldd	r24, Y+1	; 0x01
 654:	28 2f       	mov	r18, r24
 656:	30 e0       	ldi	r19, 0x00	; 0
 658:	c9 01       	movw	r24, r18
 65a:	88 0f       	add	r24, r24
 65c:	99 1f       	adc	r25, r25
 65e:	82 0f       	add	r24, r18
 660:	93 1f       	adc	r25, r19
 662:	88 0f       	add	r24, r24
 664:	99 1f       	adc	r25, r25
 666:	80 5f       	subi	r24, 0xF0	; 240
 668:	9f 4d       	sbci	r25, 0xDF	; 223
 66a:	26 e0       	ldi	r18, 0x06	; 6
 66c:	fc 01       	movw	r30, r24
 66e:	de 01       	movw	r26, r28
 670:	12 96       	adiw	r26, 0x02	; 2
 672:	01 90       	ld	r0, Z+
 674:	0d 92       	st	X+, r0
 676:	2a 95       	dec	r18
 678:	e1 f7       	brne	.-8      	; 0x672 <main+0x66>
			play(n);
 67a:	4a 81       	ldd	r20, Y+2	; 0x02
 67c:	5b 81       	ldd	r21, Y+3	; 0x03
 67e:	6c 81       	ldd	r22, Y+4	; 0x04
 680:	7d 81       	ldd	r23, Y+5	; 0x05
 682:	8e 81       	ldd	r24, Y+6	; 0x06
 684:	9f 81       	ldd	r25, Y+7	; 0x07
 686:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <play>
 68a:	14 c0       	rjmp	.+40     	; 0x6b4 <main+0xa8>
		}
		else if (key == 0x0E)		// Key *
 68c:	89 81       	ldd	r24, Y+1	; 0x01
 68e:	8e 30       	cpi	r24, 0x0E	; 14
 690:	49 f4       	brne	.+18     	; 0x6a4 <main+0x98>
		{
			play_sequence("Sonic", "Green Hill Zone", green_hill);
 692:	42 ed       	ldi	r20, 0xD2	; 210
 694:	50 e2       	ldi	r21, 0x20	; 32
 696:	62 e1       	ldi	r22, 0x12	; 18
 698:	73 e2       	ldi	r23, 0x23	; 35
 69a:	82 e2       	ldi	r24, 0x22	; 34
 69c:	93 e2       	ldi	r25, 0x23	; 35
 69e:	0e 94 d5 03 	call	0x7aa	; 0x7aa <play_sequence>
 6a2:	08 c0       	rjmp	.+16     	; 0x6b4 <main+0xa8>
		}
		else						// Key #
		{
			play_sequence("Pokemon", "Lavender Town", lavender);
 6a4:	4a e6       	ldi	r20, 0x6A	; 106
 6a6:	50 e2       	ldi	r21, 0x20	; 32
 6a8:	68 e2       	ldi	r22, 0x28	; 40
 6aa:	73 e2       	ldi	r23, 0x23	; 35
 6ac:	86 e3       	ldi	r24, 0x36	; 54
 6ae:	93 e2       	ldi	r25, 0x23	; 35
 6b0:	0e 94 d5 03 	call	0x7aa	; 0x7aa <play_sequence>
		}
	}
 6b4:	ba cf       	rjmp	.-140    	; 0x62a <main+0x1e>

000006b6 <play>:
}

/////////////////////////////////////FUNCTIONS///////////////////////////////////////
void play(note n)
{
 6b6:	0f 93       	push	r16
 6b8:	1f 93       	push	r17
 6ba:	cf 93       	push	r28
 6bc:	df 93       	push	r29
 6be:	00 d0       	rcall	.+0      	; 0x6c0 <play+0xa>
 6c0:	00 d0       	rcall	.+0      	; 0x6c2 <play+0xc>
 6c2:	cd b7       	in	r28, 0x3d	; 61
 6c4:	de b7       	in	r29, 0x3e	; 62
 6c6:	49 83       	std	Y+1, r20	; 0x01
 6c8:	5a 83       	std	Y+2, r21	; 0x02
 6ca:	6b 83       	std	Y+3, r22	; 0x03
 6cc:	7c 83       	std	Y+4, r23	; 0x04
 6ce:	8d 83       	std	Y+5, r24	; 0x05
 6d0:	9e 83       	std	Y+6, r25	; 0x06
	CLEAR_SCREEN();
 6d2:	0e 94 34 02 	call	0x468	; 0x468 <CLEAR_SCREEN>
	
	OUT_STRING(n.name);					// Print note and frequency
 6d6:	89 81       	ldd	r24, Y+1	; 0x01
 6d8:	9a 81       	ldd	r25, Y+2	; 0x02
 6da:	0e 94 ef 01 	call	0x3de	; 0x3de <OUT_STRING>
	OUT_COMMAND(0xC0);
 6de:	80 ec       	ldi	r24, 0xC0	; 192
 6e0:	0e 94 0e 02 	call	0x41c	; 0x41c <OUT_COMMAND>
	OUT_STRING(n.ascii_freq);
 6e4:	8b 81       	ldd	r24, Y+3	; 0x03
 6e6:	9c 81       	ldd	r25, Y+4	; 0x04
 6e8:	0e 94 ef 01 	call	0x3de	; 0x3de <OUT_STRING>
	
	TCE0.CCA = calc_ffrq(n.freq);		// Calculate CCA for given note frequency
 6ec:	00 e0       	ldi	r16, 0x00	; 0
 6ee:	1a e0       	ldi	r17, 0x0A	; 10
 6f0:	8d 81       	ldd	r24, Y+5	; 0x05
 6f2:	9e 81       	ldd	r25, Y+6	; 0x06
 6f4:	0e 94 7e 04 	call	0x8fc	; 0x8fc <calc_ffrq>
 6f8:	f8 01       	movw	r30, r16
 6fa:	80 a7       	std	Z+40, r24	; 0x28
 6fc:	91 a7       	std	Z+41, r25	; 0x29
	TCE0.CTRLB |= TC0_CCBEN_bm;			// Enable TCs
 6fe:	80 e0       	ldi	r24, 0x00	; 0
 700:	9a e0       	ldi	r25, 0x0A	; 10
 702:	20 e0       	ldi	r18, 0x00	; 0
 704:	3a e0       	ldi	r19, 0x0A	; 10
 706:	f9 01       	movw	r30, r18
 708:	21 81       	ldd	r18, Z+1	; 0x01
 70a:	20 62       	ori	r18, 0x20	; 32
 70c:	fc 01       	movw	r30, r24
 70e:	21 83       	std	Z+1, r18	; 0x01
	TCE1.CTRLB |= TC1_CCAEN_bm;
 710:	80 e4       	ldi	r24, 0x40	; 64
 712:	9a e0       	ldi	r25, 0x0A	; 10
 714:	20 e4       	ldi	r18, 0x40	; 64
 716:	3a e0       	ldi	r19, 0x0A	; 10
 718:	f9 01       	movw	r30, r18
 71a:	21 81       	ldd	r18, Z+1	; 0x01
 71c:	20 61       	ori	r18, 0x10	; 16
 71e:	fc 01       	movw	r30, r24
 720:	21 83       	std	Z+1, r18	; 0x01
}
 722:	26 96       	adiw	r28, 0x06	; 6
 724:	cd bf       	out	0x3d, r28	; 61
 726:	de bf       	out	0x3e, r29	; 62
 728:	df 91       	pop	r29
 72a:	cf 91       	pop	r28
 72c:	1f 91       	pop	r17
 72e:	0f 91       	pop	r16
 730:	08 95       	ret

00000732 <play_note>:

void play_note(note n, uint16_t d)
{
 732:	0f 93       	push	r16
 734:	1f 93       	push	r17
 736:	cf 93       	push	r28
 738:	df 93       	push	r29
 73a:	cd b7       	in	r28, 0x3d	; 61
 73c:	de b7       	in	r29, 0x3e	; 62
 73e:	28 97       	sbiw	r28, 0x08	; 8
 740:	cd bf       	out	0x3d, r28	; 61
 742:	de bf       	out	0x3e, r29	; 62
 744:	49 83       	std	Y+1, r20	; 0x01
 746:	5a 83       	std	Y+2, r21	; 0x02
 748:	6b 83       	std	Y+3, r22	; 0x03
 74a:	7c 83       	std	Y+4, r23	; 0x04
 74c:	8d 83       	std	Y+5, r24	; 0x05
 74e:	9e 83       	std	Y+6, r25	; 0x06
 750:	2f 83       	std	Y+7, r18	; 0x07
 752:	38 87       	std	Y+8, r19	; 0x08
	calc_per(d);						// Set PER register for note duration
 754:	8f 81       	ldd	r24, Y+7	; 0x07
 756:	98 85       	ldd	r25, Y+8	; 0x08
 758:	0e 94 9e 04 	call	0x93c	; 0x93c <calc_per>
	if (n.freq > 1)						// If freq < 1, do not play (used for waits)
 75c:	8d 81       	ldd	r24, Y+5	; 0x05
 75e:	9e 81       	ldd	r25, Y+6	; 0x06
 760:	02 97       	sbiw	r24, 0x02	; 2
 762:	90 f0       	brcs	.+36     	; 0x788 <play_note+0x56>
	{
		TCE0.CCA = calc_ffrq(n.freq);	
 764:	00 e0       	ldi	r16, 0x00	; 0
 766:	1a e0       	ldi	r17, 0x0A	; 10
 768:	8d 81       	ldd	r24, Y+5	; 0x05
 76a:	9e 81       	ldd	r25, Y+6	; 0x06
 76c:	0e 94 7e 04 	call	0x8fc	; 0x8fc <calc_ffrq>
 770:	f8 01       	movw	r30, r16
 772:	80 a7       	std	Z+40, r24	; 0x28
 774:	91 a7       	std	Z+41, r25	; 0x29
		TCE0.CTRLB |= TC0_CCBEN_bm;
 776:	80 e0       	ldi	r24, 0x00	; 0
 778:	9a e0       	ldi	r25, 0x0A	; 10
 77a:	20 e0       	ldi	r18, 0x00	; 0
 77c:	3a e0       	ldi	r19, 0x0A	; 10
 77e:	f9 01       	movw	r30, r18
 780:	21 81       	ldd	r18, Z+1	; 0x01
 782:	20 62       	ori	r18, 0x20	; 32
 784:	fc 01       	movw	r30, r24
 786:	21 83       	std	Z+1, r18	; 0x01
	}
	TCE1.CTRLB |= TC1_CCAEN_bm;
 788:	80 e4       	ldi	r24, 0x40	; 64
 78a:	9a e0       	ldi	r25, 0x0A	; 10
 78c:	20 e4       	ldi	r18, 0x40	; 64
 78e:	3a e0       	ldi	r19, 0x0A	; 10
 790:	f9 01       	movw	r30, r18
 792:	21 81       	ldd	r18, Z+1	; 0x01
 794:	20 61       	ori	r18, 0x10	; 16
 796:	fc 01       	movw	r30, r24
 798:	21 83       	std	Z+1, r18	; 0x01
}
 79a:	28 96       	adiw	r28, 0x08	; 8
 79c:	cd bf       	out	0x3d, r28	; 61
 79e:	de bf       	out	0x3e, r29	; 62
 7a0:	df 91       	pop	r29
 7a2:	cf 91       	pop	r28
 7a4:	1f 91       	pop	r17
 7a6:	0f 91       	pop	r16
 7a8:	08 95       	ret

000007aa <play_sequence>:

void play_sequence(char *name_top, char *name_bottom, beat *b)
{
 7aa:	cf 93       	push	r28
 7ac:	df 93       	push	r29
 7ae:	cd b7       	in	r28, 0x3d	; 61
 7b0:	de b7       	in	r29, 0x3e	; 62
 7b2:	28 97       	sbiw	r28, 0x08	; 8
 7b4:	cd bf       	out	0x3d, r28	; 61
 7b6:	de bf       	out	0x3e, r29	; 62
 7b8:	8b 83       	std	Y+3, r24	; 0x03
 7ba:	9c 83       	std	Y+4, r25	; 0x04
 7bc:	6d 83       	std	Y+5, r22	; 0x05
 7be:	7e 83       	std	Y+6, r23	; 0x06
 7c0:	4f 83       	std	Y+7, r20	; 0x07
 7c2:	58 87       	std	Y+8, r21	; 0x08
	CLEAR_SCREEN();
 7c4:	0e 94 34 02 	call	0x468	; 0x468 <CLEAR_SCREEN>
	
	OUT_STRING(name_top);				// Print name of song selection
 7c8:	8b 81       	ldd	r24, Y+3	; 0x03
 7ca:	9c 81       	ldd	r25, Y+4	; 0x04
 7cc:	0e 94 ef 01 	call	0x3de	; 0x3de <OUT_STRING>
	OUT_COMMAND(0xC0);
 7d0:	80 ec       	ldi	r24, 0xC0	; 192
 7d2:	0e 94 0e 02 	call	0x41c	; 0x41c <OUT_COMMAND>
	OUT_STRING(name_bottom);
 7d6:	8d 81       	ldd	r24, Y+5	; 0x05
 7d8:	9e 81       	ldd	r25, Y+6	; 0x06
 7da:	0e 94 ef 01 	call	0x3de	; 0x3de <OUT_STRING>
	
	int i = 0;
 7de:	19 82       	std	Y+1, r1	; 0x01
 7e0:	1a 82       	std	Y+2, r1	; 0x02
	while (b[i].n.freq != 0)			// Loop until end of sequence reached (knull)
 7e2:	3a c0       	rjmp	.+116    	; 0x858 <play_sequence+0xae>
	{
		TCE1.CTRLFSET = TC_CMD_RESTART_gc;
 7e4:	80 e4       	ldi	r24, 0x40	; 64
 7e6:	9a e0       	ldi	r25, 0x0A	; 10
 7e8:	28 e0       	ldi	r18, 0x08	; 8
 7ea:	fc 01       	movw	r30, r24
 7ec:	21 87       	std	Z+9, r18	; 0x09
		play_note(b[i].n, b[i].d);
 7ee:	89 81       	ldd	r24, Y+1	; 0x01
 7f0:	9a 81       	ldd	r25, Y+2	; 0x02
 7f2:	88 0f       	add	r24, r24
 7f4:	99 1f       	adc	r25, r25
 7f6:	88 0f       	add	r24, r24
 7f8:	99 1f       	adc	r25, r25
 7fa:	88 0f       	add	r24, r24
 7fc:	99 1f       	adc	r25, r25
 7fe:	2f 81       	ldd	r18, Y+7	; 0x07
 800:	38 85       	ldd	r19, Y+8	; 0x08
 802:	82 0f       	add	r24, r18
 804:	93 1f       	adc	r25, r19
 806:	fc 01       	movw	r30, r24
 808:	46 81       	ldd	r20, Z+6	; 0x06
 80a:	57 81       	ldd	r21, Z+7	; 0x07
 80c:	89 81       	ldd	r24, Y+1	; 0x01
 80e:	9a 81       	ldd	r25, Y+2	; 0x02
 810:	88 0f       	add	r24, r24
 812:	99 1f       	adc	r25, r25
 814:	88 0f       	add	r24, r24
 816:	99 1f       	adc	r25, r25
 818:	88 0f       	add	r24, r24
 81a:	99 1f       	adc	r25, r25
 81c:	2f 81       	ldd	r18, Y+7	; 0x07
 81e:	38 85       	ldd	r19, Y+8	; 0x08
 820:	f9 01       	movw	r30, r18
 822:	e8 0f       	add	r30, r24
 824:	f9 1f       	adc	r31, r25
 826:	9a 01       	movw	r18, r20
 828:	40 81       	ld	r20, Z
 82a:	51 81       	ldd	r21, Z+1	; 0x01
 82c:	62 81       	ldd	r22, Z+2	; 0x02
 82e:	73 81       	ldd	r23, Z+3	; 0x03
 830:	84 81       	ldd	r24, Z+4	; 0x04
 832:	95 81       	ldd	r25, Z+5	; 0x05
 834:	0e 94 99 03 	call	0x732	; 0x732 <play_note>
		while(TCE1.CTRLB & TC1_CCAEN_bm);
 838:	00 00       	nop
 83a:	80 e4       	ldi	r24, 0x40	; 64
 83c:	9a e0       	ldi	r25, 0x0A	; 10
 83e:	fc 01       	movw	r30, r24
 840:	81 81       	ldd	r24, Z+1	; 0x01
 842:	88 2f       	mov	r24, r24
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	80 71       	andi	r24, 0x10	; 16
 848:	99 27       	eor	r25, r25
 84a:	89 2b       	or	r24, r25
 84c:	b1 f7       	brne	.-20     	; 0x83a <play_sequence+0x90>
		i++;
 84e:	89 81       	ldd	r24, Y+1	; 0x01
 850:	9a 81       	ldd	r25, Y+2	; 0x02
 852:	01 96       	adiw	r24, 0x01	; 1
 854:	89 83       	std	Y+1, r24	; 0x01
 856:	9a 83       	std	Y+2, r25	; 0x02
	OUT_STRING(name_top);				// Print name of song selection
	OUT_COMMAND(0xC0);
	OUT_STRING(name_bottom);
	
	int i = 0;
	while (b[i].n.freq != 0)			// Loop until end of sequence reached (knull)
 858:	89 81       	ldd	r24, Y+1	; 0x01
 85a:	9a 81       	ldd	r25, Y+2	; 0x02
 85c:	88 0f       	add	r24, r24
 85e:	99 1f       	adc	r25, r25
 860:	88 0f       	add	r24, r24
 862:	99 1f       	adc	r25, r25
 864:	88 0f       	add	r24, r24
 866:	99 1f       	adc	r25, r25
 868:	2f 81       	ldd	r18, Y+7	; 0x07
 86a:	38 85       	ldd	r19, Y+8	; 0x08
 86c:	82 0f       	add	r24, r18
 86e:	93 1f       	adc	r25, r19
 870:	fc 01       	movw	r30, r24
 872:	84 81       	ldd	r24, Z+4	; 0x04
 874:	95 81       	ldd	r25, Z+5	; 0x05
 876:	89 2b       	or	r24, r25
 878:	09 f0       	breq	.+2      	; 0x87c <play_sequence+0xd2>
 87a:	b4 cf       	rjmp	.-152    	; 0x7e4 <play_sequence+0x3a>
		TCE1.CTRLFSET = TC_CMD_RESTART_gc;
		play_note(b[i].n, b[i].d);
		while(TCE1.CTRLB & TC1_CCAEN_bm);
		i++;
	}
}
 87c:	28 96       	adiw	r28, 0x08	; 8
 87e:	cd bf       	out	0x3d, r28	; 61
 880:	de bf       	out	0x3e, r29	; 62
 882:	df 91       	pop	r29
 884:	cf 91       	pop	r28
 886:	08 95       	ret

00000888 <tc_init>:

void tc_init(void)
{
 888:	cf 93       	push	r28
 88a:	df 93       	push	r29
 88c:	cd b7       	in	r28, 0x3d	; 61
 88e:	de b7       	in	r29, 0x3e	; 62
	PORTE.DIRSET = 0x12;
 890:	80 e8       	ldi	r24, 0x80	; 128
 892:	96 e0       	ldi	r25, 0x06	; 6
 894:	22 e1       	ldi	r18, 0x12	; 18
 896:	fc 01       	movw	r30, r24
 898:	21 83       	std	Z+1, r18	; 0x01
	
	TCE0.CTRLA = TC_CLKSEL_DIV1_gc;			// Prescaler: CLK
 89a:	80 e0       	ldi	r24, 0x00	; 0
 89c:	9a e0       	ldi	r25, 0x0A	; 10
 89e:	21 e0       	ldi	r18, 0x01	; 1
 8a0:	fc 01       	movw	r30, r24
 8a2:	20 83       	st	Z, r18
	TCE0.CTRLB = TC_WGMODE_FRQ_gc;			// FRQ Mode
 8a4:	80 e0       	ldi	r24, 0x00	; 0
 8a6:	9a e0       	ldi	r25, 0x0A	; 10
 8a8:	21 e0       	ldi	r18, 0x01	; 1
 8aa:	fc 01       	movw	r30, r24
 8ac:	21 83       	std	Z+1, r18	; 0x01
	TCE0.CTRLE = TC_BYTEM_NORMAL_gc;
 8ae:	80 e0       	ldi	r24, 0x00	; 0
 8b0:	9a e0       	ldi	r25, 0x0A	; 10
 8b2:	fc 01       	movw	r30, r24
 8b4:	14 82       	std	Z+4, r1	; 0x04
	
	TCE1.CTRLA = TC_CLKSEL_DIV64_gc;		// Prescaler: CLK/64
 8b6:	80 e4       	ldi	r24, 0x40	; 64
 8b8:	9a e0       	ldi	r25, 0x0A	; 10
 8ba:	25 e0       	ldi	r18, 0x05	; 5
 8bc:	fc 01       	movw	r30, r24
 8be:	20 83       	st	Z, r18
	TCE1.CTRLB = TC_WGMODE_NORMAL_gc;		// Normal Mode
 8c0:	80 e4       	ldi	r24, 0x40	; 64
 8c2:	9a e0       	ldi	r25, 0x0A	; 10
 8c4:	fc 01       	movw	r30, r24
 8c6:	11 82       	std	Z+1, r1	; 0x01
	TCE1.CTRLE = TC_BYTEM_NORMAL_gc;
 8c8:	80 e4       	ldi	r24, 0x40	; 64
 8ca:	9a e0       	ldi	r25, 0x0A	; 10
 8cc:	fc 01       	movw	r30, r24
 8ce:	14 82       	std	Z+4, r1	; 0x04
	
	TCE1.INTCTRLA = TC_OVFINTLVL_LO_gc;		// Enable low-level interrupts on overflow
 8d0:	80 e4       	ldi	r24, 0x40	; 64
 8d2:	9a e0       	ldi	r25, 0x0A	; 10
 8d4:	21 e0       	ldi	r18, 0x01	; 1
 8d6:	fc 01       	movw	r30, r24
 8d8:	26 83       	std	Z+6, r18	; 0x06
	calc_per(567.8);
 8da:	87 e3       	ldi	r24, 0x37	; 55
 8dc:	92 e0       	ldi	r25, 0x02	; 2
 8de:	0e 94 9e 04 	call	0x93c	; 0x93c <calc_per>
	
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
 8e2:	80 ea       	ldi	r24, 0xA0	; 160
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	20 ea       	ldi	r18, 0xA0	; 160
 8e8:	30 e0       	ldi	r19, 0x00	; 0
 8ea:	f9 01       	movw	r30, r18
 8ec:	22 81       	ldd	r18, Z+2	; 0x02
 8ee:	21 60       	ori	r18, 0x01	; 1
 8f0:	fc 01       	movw	r30, r24
 8f2:	22 83       	std	Z+2, r18	; 0x02
	
	sei();
 8f4:	78 94       	sei
}
 8f6:	df 91       	pop	r29
 8f8:	cf 91       	pop	r28
 8fa:	08 95       	ret

000008fc <calc_ffrq>:

uint16_t calc_ffrq(uint16_t freq)
{
 8fc:	cf 93       	push	r28
 8fe:	df 93       	push	r29
 900:	00 d0       	rcall	.+0      	; 0x902 <calc_ffrq+0x6>
 902:	00 d0       	rcall	.+0      	; 0x904 <calc_ffrq+0x8>
 904:	cd b7       	in	r28, 0x3d	; 61
 906:	de b7       	in	r29, 0x3e	; 62
 908:	89 83       	std	Y+1, r24	; 0x01
 90a:	9a 83       	std	Y+2, r25	; 0x02
	return (F_CPU / (freq * 2)) - 1;		// Formula from Doc 8331.
 90c:	89 81       	ldd	r24, Y+1	; 0x01
 90e:	9a 81       	ldd	r25, Y+2	; 0x02
 910:	88 0f       	add	r24, r24
 912:	99 1f       	adc	r25, r25
 914:	9c 01       	movw	r18, r24
 916:	40 e0       	ldi	r20, 0x00	; 0
 918:	50 e0       	ldi	r21, 0x00	; 0
 91a:	80 e8       	ldi	r24, 0x80	; 128
 91c:	94 e8       	ldi	r25, 0x84	; 132
 91e:	ae e1       	ldi	r26, 0x1E	; 30
 920:	b0 e0       	ldi	r27, 0x00	; 0
 922:	bc 01       	movw	r22, r24
 924:	cd 01       	movw	r24, r26
 926:	0e 94 21 05 	call	0xa42	; 0xa42 <__divmodsi4>
 92a:	da 01       	movw	r26, r20
 92c:	c9 01       	movw	r24, r18
 92e:	01 97       	sbiw	r24, 0x01	; 1
}
 930:	26 96       	adiw	r28, 0x06	; 6
 932:	cd bf       	out	0x3d, r28	; 61
 934:	de bf       	out	0x3e, r29	; 62
 936:	df 91       	pop	r29
 938:	cf 91       	pop	r28
 93a:	08 95       	ret

0000093c <calc_per>:

void calc_per(uint16_t period)
{
 93c:	0f 93       	push	r16
 93e:	1f 93       	push	r17
 940:	cf 93       	push	r28
 942:	df 93       	push	r29
 944:	00 d0       	rcall	.+0      	; 0x946 <calc_per+0xa>
 946:	00 d0       	rcall	.+0      	; 0x948 <calc_per+0xc>
 948:	cd b7       	in	r28, 0x3d	; 61
 94a:	de b7       	in	r29, 0x3e	; 62
 94c:	89 83       	std	Y+1, r24	; 0x01
 94e:	9a 83       	std	Y+2, r25	; 0x02
	TCE1.PER = ((period * F_CPU) / SCALE) - 1;	// Formula for FRQ from Doc 8331,
 950:	00 e4       	ldi	r16, 0x40	; 64
 952:	1a e0       	ldi	r17, 0x0A	; 10
 954:	89 81       	ldd	r24, Y+1	; 0x01
 956:	9a 81       	ldd	r25, Y+2	; 0x02
 958:	cc 01       	movw	r24, r24
 95a:	a0 e0       	ldi	r26, 0x00	; 0
 95c:	b0 e0       	ldi	r27, 0x00	; 0
 95e:	9c 01       	movw	r18, r24
 960:	ad 01       	movw	r20, r26
 962:	60 e8       	ldi	r22, 0x80	; 128
 964:	74 e8       	ldi	r23, 0x84	; 132
 966:	8e e1       	ldi	r24, 0x1E	; 30
 968:	90 e0       	ldi	r25, 0x00	; 0
 96a:	0e 94 11 05 	call	0xa22	; 0xa22 <__mulsi3>
 96e:	dc 01       	movw	r26, r24
 970:	cb 01       	movw	r24, r22
 972:	20 e0       	ldi	r18, 0x00	; 0
 974:	34 ef       	ldi	r19, 0xF4	; 244
 976:	41 e0       	ldi	r20, 0x01	; 1
 978:	50 e0       	ldi	r21, 0x00	; 0
 97a:	bc 01       	movw	r22, r24
 97c:	cd 01       	movw	r24, r26
 97e:	0e 94 21 05 	call	0xa42	; 0xa42 <__divmodsi4>
 982:	da 01       	movw	r26, r20
 984:	c9 01       	movw	r24, r18
 986:	01 97       	sbiw	r24, 0x01	; 1
 988:	f8 01       	movw	r30, r16
 98a:	86 a3       	std	Z+38, r24	; 0x26
 98c:	97 a3       	std	Z+39, r25	; 0x27
												//	rearranged to determine PER. 
}
 98e:	26 96       	adiw	r28, 0x06	; 6
 990:	cd bf       	out	0x3d, r28	; 61
 992:	de bf       	out	0x3e, r29	; 62
 994:	df 91       	pop	r29
 996:	cf 91       	pop	r28
 998:	1f 91       	pop	r17
 99a:	0f 91       	pop	r16
 99c:	08 95       	ret

0000099e <__vector_53>:


////////////////////////////////////////ISRs/////////////////////////////////////////
ISR(TCE1_OVF_vect)
{
 99e:	1f 92       	push	r1
 9a0:	0f 92       	push	r0
 9a2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 9a6:	0f 92       	push	r0
 9a8:	11 24       	eor	r1, r1
 9aa:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 9ae:	0f 92       	push	r0
 9b0:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 9b4:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 9b8:	0f 92       	push	r0
 9ba:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 9be:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 9c2:	0f 92       	push	r0
 9c4:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 9c8:	2f 93       	push	r18
 9ca:	8f 93       	push	r24
 9cc:	9f 93       	push	r25
 9ce:	ef 93       	push	r30
 9d0:	ff 93       	push	r31
 9d2:	cf 93       	push	r28
 9d4:	df 93       	push	r29
 9d6:	cd b7       	in	r28, 0x3d	; 61
 9d8:	de b7       	in	r29, 0x3e	; 62
	TCE1.INTFLAGS = TC1_OVFIF_bm;			// Clear interrupt flag
 9da:	80 e4       	ldi	r24, 0x40	; 64
 9dc:	9a e0       	ldi	r25, 0x0A	; 10
 9de:	21 e0       	ldi	r18, 0x01	; 1
 9e0:	fc 01       	movw	r30, r24
 9e2:	24 87       	std	Z+12, r18	; 0x0c
	TCE1.CTRLB = TC_WGMODE_NORMAL_gc;		// Disable CCs
 9e4:	80 e4       	ldi	r24, 0x40	; 64
 9e6:	9a e0       	ldi	r25, 0x0A	; 10
 9e8:	fc 01       	movw	r30, r24
 9ea:	11 82       	std	Z+1, r1	; 0x01
	TCE0.CTRLB = TC_WGMODE_FRQ_gc; 
 9ec:	80 e0       	ldi	r24, 0x00	; 0
 9ee:	9a e0       	ldi	r25, 0x0A	; 10
 9f0:	21 e0       	ldi	r18, 0x01	; 1
 9f2:	fc 01       	movw	r30, r24
 9f4:	21 83       	std	Z+1, r18	; 0x01
 9f6:	df 91       	pop	r29
 9f8:	cf 91       	pop	r28
 9fa:	ff 91       	pop	r31
 9fc:	ef 91       	pop	r30
 9fe:	9f 91       	pop	r25
 a00:	8f 91       	pop	r24
 a02:	2f 91       	pop	r18
 a04:	0f 90       	pop	r0
 a06:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 a0a:	0f 90       	pop	r0
 a0c:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 a10:	0f 90       	pop	r0
 a12:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 a16:	0f 90       	pop	r0
 a18:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 a1c:	0f 90       	pop	r0
 a1e:	1f 90       	pop	r1
 a20:	18 95       	reti

00000a22 <__mulsi3>:
 a22:	db 01       	movw	r26, r22
 a24:	8f 93       	push	r24
 a26:	9f 93       	push	r25
 a28:	0e 94 40 05 	call	0xa80	; 0xa80 <__muluhisi3>
 a2c:	bf 91       	pop	r27
 a2e:	af 91       	pop	r26
 a30:	a2 9f       	mul	r26, r18
 a32:	80 0d       	add	r24, r0
 a34:	91 1d       	adc	r25, r1
 a36:	a3 9f       	mul	r26, r19
 a38:	90 0d       	add	r25, r0
 a3a:	b2 9f       	mul	r27, r18
 a3c:	90 0d       	add	r25, r0
 a3e:	11 24       	eor	r1, r1
 a40:	08 95       	ret

00000a42 <__divmodsi4>:
 a42:	05 2e       	mov	r0, r21
 a44:	97 fb       	bst	r25, 7
 a46:	1e f4       	brtc	.+6      	; 0xa4e <__divmodsi4+0xc>
 a48:	00 94       	com	r0
 a4a:	0e 94 38 05 	call	0xa70	; 0xa70 <__negsi2>
 a4e:	57 fd       	sbrc	r21, 7
 a50:	07 d0       	rcall	.+14     	; 0xa60 <__divmodsi4_neg2>
 a52:	0e 94 4b 05 	call	0xa96	; 0xa96 <__udivmodsi4>
 a56:	07 fc       	sbrc	r0, 7
 a58:	03 d0       	rcall	.+6      	; 0xa60 <__divmodsi4_neg2>
 a5a:	4e f4       	brtc	.+18     	; 0xa6e <__divmodsi4_exit>
 a5c:	0c 94 38 05 	jmp	0xa70	; 0xa70 <__negsi2>

00000a60 <__divmodsi4_neg2>:
 a60:	50 95       	com	r21
 a62:	40 95       	com	r20
 a64:	30 95       	com	r19
 a66:	21 95       	neg	r18
 a68:	3f 4f       	sbci	r19, 0xFF	; 255
 a6a:	4f 4f       	sbci	r20, 0xFF	; 255
 a6c:	5f 4f       	sbci	r21, 0xFF	; 255

00000a6e <__divmodsi4_exit>:
 a6e:	08 95       	ret

00000a70 <__negsi2>:
 a70:	90 95       	com	r25
 a72:	80 95       	com	r24
 a74:	70 95       	com	r23
 a76:	61 95       	neg	r22
 a78:	7f 4f       	sbci	r23, 0xFF	; 255
 a7a:	8f 4f       	sbci	r24, 0xFF	; 255
 a7c:	9f 4f       	sbci	r25, 0xFF	; 255
 a7e:	08 95       	ret

00000a80 <__muluhisi3>:
 a80:	0e 94 6d 05 	call	0xada	; 0xada <__umulhisi3>
 a84:	a5 9f       	mul	r26, r21
 a86:	90 0d       	add	r25, r0
 a88:	b4 9f       	mul	r27, r20
 a8a:	90 0d       	add	r25, r0
 a8c:	a4 9f       	mul	r26, r20
 a8e:	80 0d       	add	r24, r0
 a90:	91 1d       	adc	r25, r1
 a92:	11 24       	eor	r1, r1
 a94:	08 95       	ret

00000a96 <__udivmodsi4>:
 a96:	a1 e2       	ldi	r26, 0x21	; 33
 a98:	1a 2e       	mov	r1, r26
 a9a:	aa 1b       	sub	r26, r26
 a9c:	bb 1b       	sub	r27, r27
 a9e:	fd 01       	movw	r30, r26
 aa0:	0d c0       	rjmp	.+26     	; 0xabc <__udivmodsi4_ep>

00000aa2 <__udivmodsi4_loop>:
 aa2:	aa 1f       	adc	r26, r26
 aa4:	bb 1f       	adc	r27, r27
 aa6:	ee 1f       	adc	r30, r30
 aa8:	ff 1f       	adc	r31, r31
 aaa:	a2 17       	cp	r26, r18
 aac:	b3 07       	cpc	r27, r19
 aae:	e4 07       	cpc	r30, r20
 ab0:	f5 07       	cpc	r31, r21
 ab2:	20 f0       	brcs	.+8      	; 0xabc <__udivmodsi4_ep>
 ab4:	a2 1b       	sub	r26, r18
 ab6:	b3 0b       	sbc	r27, r19
 ab8:	e4 0b       	sbc	r30, r20
 aba:	f5 0b       	sbc	r31, r21

00000abc <__udivmodsi4_ep>:
 abc:	66 1f       	adc	r22, r22
 abe:	77 1f       	adc	r23, r23
 ac0:	88 1f       	adc	r24, r24
 ac2:	99 1f       	adc	r25, r25
 ac4:	1a 94       	dec	r1
 ac6:	69 f7       	brne	.-38     	; 0xaa2 <__udivmodsi4_loop>
 ac8:	60 95       	com	r22
 aca:	70 95       	com	r23
 acc:	80 95       	com	r24
 ace:	90 95       	com	r25
 ad0:	9b 01       	movw	r18, r22
 ad2:	ac 01       	movw	r20, r24
 ad4:	bd 01       	movw	r22, r26
 ad6:	cf 01       	movw	r24, r30
 ad8:	08 95       	ret

00000ada <__umulhisi3>:
 ada:	a2 9f       	mul	r26, r18
 adc:	b0 01       	movw	r22, r0
 ade:	b3 9f       	mul	r27, r19
 ae0:	c0 01       	movw	r24, r0
 ae2:	a3 9f       	mul	r26, r19
 ae4:	70 0d       	add	r23, r0
 ae6:	81 1d       	adc	r24, r1
 ae8:	11 24       	eor	r1, r1
 aea:	91 1d       	adc	r25, r1
 aec:	b2 9f       	mul	r27, r18
 aee:	70 0d       	add	r23, r0
 af0:	81 1d       	adc	r24, r1
 af2:	11 24       	eor	r1, r1
 af4:	91 1d       	adc	r25, r1
 af6:	08 95       	ret

00000af8 <_exit>:
 af8:	f8 94       	cli

00000afa <__stop_program>:
 afa:	ff cf       	rjmp	.-2      	; 0xafa <__stop_program>
