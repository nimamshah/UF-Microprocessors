
keypadc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00802000  000003a8  0000041c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000045c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002d7  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000114  00000000  00000000  000007a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000021c  00000000  00000000  000008b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00000ad4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000024a  00000000  00000000  00000b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ca  00000000  00000000  00000d92  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00000e5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
   8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
   c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  10:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  14:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  18:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  1c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  20:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  24:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  28:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  2c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  30:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  34:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  38:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  3c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  40:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  44:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  48:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  4c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  50:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  54:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  58:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  5c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  60:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  64:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  68:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  6c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  70:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  74:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  78:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  7c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  80:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  84:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  88:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  8c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  90:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  94:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  98:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  9c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  ac:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  bc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  cc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  dc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  ec:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  fc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 100:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 104:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 108:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 10c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 110:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 114:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 118:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 11c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 120:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 124:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 128:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 12c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 130:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 134:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 138:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 13c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 140:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 144:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 148:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 14c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 150:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 154:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 158:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 15c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 160:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 164:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 168:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 16c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 170:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 174:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 178:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 17c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 180:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 184:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 188:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 18c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 190:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 194:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 198:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 19c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1ac:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1bc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1cc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1dc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1ec:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	10 e2       	ldi	r17, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	e8 ea       	ldi	r30, 0xA8	; 168
 21c:	f3 e0       	ldi	r31, 0x03	; 3
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a0 31       	cpi	r26, 0x10	; 16
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59
 230:	0e 94 1e 01 	call	0x23c	; 0x23c <main>
 234:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <_exit>

00000238 <__bad_interrupt>:
 238:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023c <main>:
uint8_t keyscan(void);
uint8_t scan(uint8_t);

///////////////////////////////////MAIN FUNCTION/////////////////////////////////////
int main(void)
{
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	1f 92       	push	r1
 242:	cd b7       	in	r28, 0x3d	; 61
 244:	de b7       	in	r29, 0x3e	; 62
	keypad_init();
 246:	0e 94 29 01 	call	0x252	; 0x252 <keypad_init>
	uint8_t key;
	while(1)
	{
		key = keyscan();
 24a:	0e 94 5d 01 	call	0x2ba	; 0x2ba <keyscan>
 24e:	89 83       	std	Y+1, r24	; 0x01
	}
 250:	fc cf       	rjmp	.-8      	; 0x24a <main+0xe>

00000252 <keypad_init>:
}

/////////////////////////////////////FUNCTIONS///////////////////////////////////////
void keypad_init(void)
{
 252:	cf 93       	push	r28
 254:	df 93       	push	r29
 256:	cd b7       	in	r28, 0x3d	; 61
 258:	de b7       	in	r29, 0x3e	; 62
	PORTF.PIN7CTRL = PF_OPC;		// Set OPC to Pull-Up for all Keypad pins
 25a:	80 ea       	ldi	r24, 0xA0	; 160
 25c:	96 e0       	ldi	r25, 0x06	; 6
 25e:	28 e1       	ldi	r18, 0x18	; 24
 260:	fc 01       	movw	r30, r24
 262:	27 8b       	std	Z+23, r18	; 0x17
	PORTF.PIN6CTRL = PF_OPC;
 264:	80 ea       	ldi	r24, 0xA0	; 160
 266:	96 e0       	ldi	r25, 0x06	; 6
 268:	28 e1       	ldi	r18, 0x18	; 24
 26a:	fc 01       	movw	r30, r24
 26c:	26 8b       	std	Z+22, r18	; 0x16
	PORTF.PIN5CTRL = PF_OPC;
 26e:	80 ea       	ldi	r24, 0xA0	; 160
 270:	96 e0       	ldi	r25, 0x06	; 6
 272:	28 e1       	ldi	r18, 0x18	; 24
 274:	fc 01       	movw	r30, r24
 276:	25 8b       	std	Z+21, r18	; 0x15
	PORTF.PIN4CTRL = PF_OPC;
 278:	80 ea       	ldi	r24, 0xA0	; 160
 27a:	96 e0       	ldi	r25, 0x06	; 6
 27c:	28 e1       	ldi	r18, 0x18	; 24
 27e:	fc 01       	movw	r30, r24
 280:	24 8b       	std	Z+20, r18	; 0x14
	PORTF.PIN3CTRL = PF_OPC;
 282:	80 ea       	ldi	r24, 0xA0	; 160
 284:	96 e0       	ldi	r25, 0x06	; 6
 286:	28 e1       	ldi	r18, 0x18	; 24
 288:	fc 01       	movw	r30, r24
 28a:	23 8b       	std	Z+19, r18	; 0x13
	PORTF.PIN2CTRL = PF_OPC;
 28c:	80 ea       	ldi	r24, 0xA0	; 160
 28e:	96 e0       	ldi	r25, 0x06	; 6
 290:	28 e1       	ldi	r18, 0x18	; 24
 292:	fc 01       	movw	r30, r24
 294:	22 8b       	std	Z+18, r18	; 0x12
	PORTF.PIN1CTRL = PF_OPC;
 296:	80 ea       	ldi	r24, 0xA0	; 160
 298:	96 e0       	ldi	r25, 0x06	; 6
 29a:	28 e1       	ldi	r18, 0x18	; 24
 29c:	fc 01       	movw	r30, r24
 29e:	21 8b       	std	Z+17, r18	; 0x11
	PORTF.PIN0CTRL = PF_OPC;
 2a0:	80 ea       	ldi	r24, 0xA0	; 160
 2a2:	96 e0       	ldi	r25, 0x06	; 6
 2a4:	28 e1       	ldi	r18, 0x18	; 24
 2a6:	fc 01       	movw	r30, r24
 2a8:	20 8b       	std	Z+16, r18	; 0x10
	
	PORTF.DIRSET = 0x0F;			// Set LSNibble of PortF as Output
 2aa:	80 ea       	ldi	r24, 0xA0	; 160
 2ac:	96 e0       	ldi	r25, 0x06	; 6
 2ae:	2f e0       	ldi	r18, 0x0F	; 15
 2b0:	fc 01       	movw	r30, r24
 2b2:	21 83       	std	Z+1, r18	; 0x01
}
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	08 95       	ret

000002ba <keyscan>:

uint8_t keyscan(void)
{
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	cd b7       	in	r28, 0x3d	; 61
 2c0:	de b7       	in	r29, 0x3e	; 62
 2c2:	25 97       	sbiw	r28, 0x05	; 5
 2c4:	cd bf       	out	0x3d, r28	; 61
 2c6:	de bf       	out	0x3e, r29	; 62
	uint8_t line = 0x0F;
 2c8:	8f e0       	ldi	r24, 0x0F	; 15
 2ca:	89 83       	std	Y+1, r24	; 0x01
	uint8_t input, index, key;
	for (uint8_t i = 0; i < 4; i++)	// Iterate columns
 2cc:	1c 82       	std	Y+4, r1	; 0x04
 2ce:	5f c0       	rjmp	.+190    	; 0x38e <keyscan+0xd4>
	{
		line &= ~(0x01 << i);		// Iterate shift 0x08 by i and not to hit each col
 2d0:	8c 81       	ldd	r24, Y+4	; 0x04
 2d2:	28 2f       	mov	r18, r24
 2d4:	30 e0       	ldi	r19, 0x00	; 0
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <keyscan+0x26>
 2dc:	88 0f       	add	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	2a 95       	dec	r18
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <keyscan+0x22>
 2e4:	98 2f       	mov	r25, r24
 2e6:	90 95       	com	r25
 2e8:	89 81       	ldd	r24, Y+1	; 0x01
 2ea:	89 23       	and	r24, r25
 2ec:	89 83       	std	Y+1, r24	; 0x01
		PORTF.OUT = line;			// Output value for col
 2ee:	80 ea       	ldi	r24, 0xA0	; 160
 2f0:	96 e0       	ldi	r25, 0x06	; 6
 2f2:	29 81       	ldd	r18, Y+1	; 0x01
 2f4:	fc 01       	movw	r30, r24
 2f6:	24 83       	std	Z+4, r18	; 0x04
		asm("nop");
 2f8:	00 00       	nop
		input = PORTF.IN & 0xF0;	// Read Input and bitmask off Output bits
 2fa:	80 ea       	ldi	r24, 0xA0	; 160
 2fc:	96 e0       	ldi	r25, 0x06	; 6
 2fe:	fc 01       	movw	r30, r24
 300:	80 85       	ldd	r24, Z+8	; 0x08
 302:	80 7f       	andi	r24, 0xF0	; 240
 304:	8d 83       	std	Y+5, r24	; 0x05
		
		if (input < 0xF0)
 306:	8d 81       	ldd	r24, Y+5	; 0x05
 308:	80 3f       	cpi	r24, 0xF0	; 240
 30a:	e0 f5       	brcc	.+120    	; 0x384 <keyscan+0xca>
		{
			switch (input)
 30c:	8d 81       	ldd	r24, Y+5	; 0x05
 30e:	88 2f       	mov	r24, r24
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	80 3b       	cpi	r24, 0xB0	; 176
 314:	91 05       	cpc	r25, r1
 316:	91 f0       	breq	.+36     	; 0x33c <keyscan+0x82>
 318:	81 3b       	cpi	r24, 0xB1	; 177
 31a:	91 05       	cpc	r25, r1
 31c:	24 f4       	brge	.+8      	; 0x326 <keyscan+0x6c>
 31e:	80 37       	cpi	r24, 0x70	; 112
 320:	91 05       	cpc	r25, r1
 322:	79 f0       	breq	.+30     	; 0x342 <keyscan+0x88>
 324:	11 c0       	rjmp	.+34     	; 0x348 <keyscan+0x8e>
 326:	80 3d       	cpi	r24, 0xD0	; 208
 328:	91 05       	cpc	r25, r1
 32a:	29 f0       	breq	.+10     	; 0x336 <keyscan+0x7c>
 32c:	80 3e       	cpi	r24, 0xE0	; 224
 32e:	91 05       	cpc	r25, r1
 330:	59 f4       	brne	.+22     	; 0x348 <keyscan+0x8e>
			{
				case 0xE0:
					index = 0x00;
 332:	1a 82       	std	Y+2, r1	; 0x02
					break;
 334:	09 c0       	rjmp	.+18     	; 0x348 <keyscan+0x8e>
				case 0xD0:
					index = 0x01;
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	8a 83       	std	Y+2, r24	; 0x02
					break;
 33a:	06 c0       	rjmp	.+12     	; 0x348 <keyscan+0x8e>
				case 0xB0:
					index = 0x02;
 33c:	82 e0       	ldi	r24, 0x02	; 2
 33e:	8a 83       	std	Y+2, r24	; 0x02
					break;
 340:	03 c0       	rjmp	.+6      	; 0x348 <keyscan+0x8e>
				case 0x70:
					index = 0x03;
 342:	83 e0       	ldi	r24, 0x03	; 3
 344:	8a 83       	std	Y+2, r24	; 0x02
					break;
 346:	00 00       	nop
			}
			key = keys[index+4*i];
 348:	8a 81       	ldd	r24, Y+2	; 0x02
 34a:	28 2f       	mov	r18, r24
 34c:	30 e0       	ldi	r19, 0x00	; 0
 34e:	8c 81       	ldd	r24, Y+4	; 0x04
 350:	88 2f       	mov	r24, r24
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	88 0f       	add	r24, r24
 356:	99 1f       	adc	r25, r25
 358:	88 0f       	add	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	82 0f       	add	r24, r18
 35e:	93 1f       	adc	r25, r19
 360:	80 50       	subi	r24, 0x00	; 0
 362:	90 4e       	sbci	r25, 0xE0	; 224
 364:	fc 01       	movw	r30, r24
 366:	80 81       	ld	r24, Z
 368:	8b 83       	std	Y+3, r24	; 0x03
			while ((PORTF.IN & 0xF0) < 0xF0);
 36a:	00 00       	nop
 36c:	80 ea       	ldi	r24, 0xA0	; 160
 36e:	96 e0       	ldi	r25, 0x06	; 6
 370:	fc 01       	movw	r30, r24
 372:	80 85       	ldd	r24, Z+8	; 0x08
 374:	88 2f       	mov	r24, r24
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	80 7f       	andi	r24, 0xF0	; 240
 37a:	99 27       	eor	r25, r25
 37c:	80 3f       	cpi	r24, 0xF0	; 240
 37e:	91 05       	cpc	r25, r1
 380:	ac f3       	brlt	.-22     	; 0x36c <keyscan+0xb2>
			break;
 382:	09 c0       	rjmp	.+18     	; 0x396 <keyscan+0xdc>
		} else 
		{
			key = 0xFF;			
 384:	8f ef       	ldi	r24, 0xFF	; 255
 386:	8b 83       	std	Y+3, r24	; 0x03

uint8_t keyscan(void)
{
	uint8_t line = 0x0F;
	uint8_t input, index, key;
	for (uint8_t i = 0; i < 4; i++)	// Iterate columns
 388:	8c 81       	ldd	r24, Y+4	; 0x04
 38a:	8f 5f       	subi	r24, 0xFF	; 255
 38c:	8c 83       	std	Y+4, r24	; 0x04
 38e:	8c 81       	ldd	r24, Y+4	; 0x04
 390:	84 30       	cpi	r24, 0x04	; 4
 392:	08 f4       	brcc	.+2      	; 0x396 <keyscan+0xdc>
 394:	9d cf       	rjmp	.-198    	; 0x2d0 <keyscan+0x16>
		} else 
		{
			key = 0xFF;			
		}
	}
	return key;
 396:	8b 81       	ldd	r24, Y+3	; 0x03
 398:	25 96       	adiw	r28, 0x05	; 5
 39a:	cd bf       	out	0x3d, r28	; 61
 39c:	de bf       	out	0x3e, r29	; 62
 39e:	df 91       	pop	r29
 3a0:	cf 91       	pop	r28
 3a2:	08 95       	ret

000003a4 <_exit>:
 3a4:	f8 94       	cli

000003a6 <__stop_program>:
 3a6:	ff cf       	rjmp	.-2      	; 0x3a6 <__stop_program>
